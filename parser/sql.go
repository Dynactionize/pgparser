// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/ruiaylin/pgparser/types/geo/geopb"
	"github.com/ruiaylin/pgparser/roachpb"
	"github.com/ruiaylin/pgparser/lex"
	"github.com/ruiaylin/pgparser/privilege"
	"github.com/ruiaylin/pgparser/ast"
	"github.com/ruiaylin/pgparser/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *ast.NumVal {
	return u.val.(*ast.NumVal)
}
func (u *sqlSymUnion) strVal() *ast.StrVal {
	if stmt, ok := u.val.(*ast.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *ast.Placeholder {
	return u.val.(*ast.Placeholder)
}
func (u *sqlSymUnion) auditMode() ast.AuditMode {
	return u.val.(ast.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *ast.TableIndexName {
	tn := u.val.(ast.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() ast.TableIndexName {
	return u.val.(ast.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() ast.TableIndexNames {
	return u.val.(ast.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *ast.ShardedIndexDef {
	return u.val.(*ast.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() ast.NameList {
	return u.val.(ast.NameList)
}
func (u *sqlSymUnion) unresolvedName() *ast.UnresolvedName {
	return u.val.(*ast.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *ast.UnresolvedObjectName {
	return u.val.(*ast.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*ast.UnresolvedObjectName {
	return u.val.([]*ast.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() ast.FunctionReference {
	return u.val.(ast.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() ast.TablePatterns {
	return u.val.(ast.TablePatterns)
}
func (u *sqlSymUnion) tableNames() ast.TableNames {
	return u.val.(ast.TableNames)
}
func (u *sqlSymUnion) indexFlags() *ast.IndexFlags {
	return u.val.(*ast.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *ast.ArraySubscript {
	return u.val.(*ast.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ast.ArraySubscripts {
	if as, ok := u.val.(ast.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() ast.Statement {
	if stmt, ok := u.val.(ast.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *ast.CTE {
	if cte, ok := u.val.(*ast.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*ast.CTE {
	return u.val.([]*ast.CTE)
}
func (u *sqlSymUnion) with() *ast.With {
	if with, ok := u.val.(*ast.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *ast.Select {
	return u.val.(*ast.Select)
}
func (u *sqlSymUnion) selectStmt() ast.SelectStatement {
	return u.val.(ast.SelectStatement)
}
func (u *sqlSymUnion) colDef() *ast.ColumnTableDef {
	return u.val.(*ast.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ast.ConstraintTableDef {
	return u.val.(ast.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() ast.TableDef {
	return u.val.(ast.TableDef)
}
func (u *sqlSymUnion) tblDefs() ast.TableDefs {
	return u.val.(ast.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() ast.LikeTableOption {
	return u.val.(ast.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []ast.LikeTableOption {
	return u.val.([]ast.LikeTableOption)
}
func (u *sqlSymUnion) colQual() ast.NamedColumnQualification {
	return u.val.(ast.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ast.ColumnQualification {
	return u.val.(ast.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []ast.NamedColumnQualification {
	return u.val.([]ast.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() ast.StorageParam {
	return u.val.(ast.StorageParam)
}
func (u *sqlSymUnion) storageParams() []ast.StorageParam {
	if params, ok := u.val.([]ast.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ast.ColumnID {
	if refCols, ok := u.val.([]ast.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() ast.SequenceOption {
	return u.val.(ast.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []ast.SequenceOption {
	return u.val.([]ast.SequenceOption)
}
func (u *sqlSymUnion) expr() ast.Expr {
	if expr, ok := u.val.(ast.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() ast.Exprs {
	return u.val.(ast.Exprs)
}
func (u *sqlSymUnion) selExpr() ast.SelectExpr {
	return u.val.(ast.SelectExpr)
}
func (u *sqlSymUnion) selExprs() ast.SelectExprs {
	return u.val.(ast.SelectExprs)
}
func (u *sqlSymUnion) retClause() ast.ReturningClause {
	return u.val.(ast.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() ast.AliasClause {
	return u.val.(ast.AliasClause)
}
func (u *sqlSymUnion) asOfClause() ast.AsOfClause {
	return u.val.(ast.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() ast.TableExpr {
	return u.val.(ast.TableExpr)
}
func (u *sqlSymUnion) tblExprs() ast.TableExprs {
	return u.val.(ast.TableExprs)
}
func (u *sqlSymUnion) from() ast.From {
	return u.val.(ast.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() ast.JoinCond {
	return u.val.(ast.JoinCond)
}
func (u *sqlSymUnion) when() *ast.When {
	return u.val.(*ast.When)
}
func (u *sqlSymUnion) whens() []*ast.When {
	return u.val.([]*ast.When)
}
func (u *sqlSymUnion) lockingClause() ast.LockingClause {
	return u.val.(ast.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *ast.LockingItem {
	return u.val.(*ast.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() ast.LockingStrength {
	return u.val.(ast.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() ast.LockingWaitPolicy {
	return u.val.(ast.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *ast.UpdateExpr {
	return u.val.(*ast.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() ast.UpdateExprs {
	return u.val.(ast.UpdateExprs)
}
func (u *sqlSymUnion) limit() *ast.Limit {
	return u.val.(*ast.Limit)
}
func (u *sqlSymUnion) targetList() ast.TargetList {
	return u.val.(ast.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *ast.TargetList {
	return u.val.(*ast.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *ast.OnConflict {
	return u.val.(*ast.OnConflict)
}
func (u *sqlSymUnion) orderBy() ast.OrderBy {
	return u.val.(ast.OrderBy)
}
func (u *sqlSymUnion) order() *ast.Order {
	return u.val.(*ast.Order)
}
func (u *sqlSymUnion) orders() []*ast.Order {
	return u.val.([]*ast.Order)
}
func (u *sqlSymUnion) groupBy() ast.GroupBy {
	return u.val.(ast.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *ast.WindowFrame {
	return u.val.(*ast.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() ast.WindowFrameBounds {
	return u.val.(ast.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *ast.WindowFrameBound {
	return u.val.(*ast.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() ast.WindowFrameExclusion {
	return u.val.(ast.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() ast.DistinctOn {
	return u.val.(ast.DistinctOn)
}
func (u *sqlSymUnion) dir() ast.Direction {
	return u.val.(ast.Direction)
}
func (u *sqlSymUnion) nullsOrder() ast.NullsOrder {
	return u.val.(ast.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() ast.AlterTableCmd {
	return u.val.(ast.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() ast.AlterTableCmds {
	return u.val.(ast.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() ast.AlterIndexCmd {
	return u.val.(ast.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() ast.AlterIndexCmds {
	return u.val.(ast.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() ast.IsolationLevel {
	return u.val.(ast.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() ast.UserPriority {
	return u.val.(ast.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ast.ReadWriteMode {
	return u.val.(ast.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() ast.IndexElem {
	return u.val.(ast.IndexElem)
}
func (u *sqlSymUnion) idxElems() ast.IndexElemList {
	return u.val.(ast.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() ast.DropBehavior {
	return u.val.(ast.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ast.ValidationBehavior {
	return u.val.(ast.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *ast.InterleaveDef {
	return u.val.(*ast.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *ast.PartitionBy {
	return u.val.(*ast.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() ast.CreateTableOnCommitSetting {
	return u.val.(ast.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() ast.ListPartition {
	return u.val.(ast.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []ast.ListPartition {
	return u.val.([]ast.ListPartition)
}
func (u *sqlSymUnion) rangePartition() ast.RangePartition {
	return u.val.(ast.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []ast.RangePartition {
	return u.val.([]ast.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *ast.SetZoneConfig {
	return u.val.(*ast.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*ast.Tuple {
	return u.val.([]*ast.Tuple)
}
func (u *sqlSymUnion) tuple() *ast.Tuple {
	return u.val.(*ast.Tuple)
}
func (u *sqlSymUnion) windowDef() *ast.WindowDef {
	return u.val.(*ast.WindowDef)
}
func (u *sqlSymUnion) window() ast.Window {
	return u.val.(ast.Window)
}
func (u *sqlSymUnion) op() ast.Operator {
	return u.val.(ast.Operator)
}
func (u *sqlSymUnion) cmpOp() ast.ComparisonOperator {
	return u.val.(ast.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() ast.KVOption {
	return u.val.(ast.KVOption)
}
func (u *sqlSymUnion) kvOptions() []ast.KVOption {
	if colType, ok := u.val.([]ast.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) backupOptions() *ast.BackupOptions {
	return u.val.(*ast.BackupOptions)
}
func (u *sqlSymUnion) transactionModes() ast.TransactionModes {
	return u.val.(ast.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() ast.CompositeKeyMatchMethod {
	return u.val.(ast.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() ast.ReferenceAction {
	return u.val.(ast.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ast.ReferenceActions {
	return u.val.(ast.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *ast.CreateStatsOptions {
	return u.val.(*ast.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() ast.ScrubOptions {
	return u.val.(ast.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() ast.ScrubOption {
	return u.val.(ast.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() ast.ResolvableFunctionReference {
	return ast.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *ast.RowsFromExpr {
	return u.val.(*ast.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() ast.PartitionedBackup {
	return u.val.(ast.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []ast.PartitionedBackup {
	return u.val.([]ast.PartitionedBackup)
}
func (u *sqlSymUnion) fullBackupClause() *ast.FullBackupClause {
	return u.val.(*ast.FullBackupClause)
}
func (u *sqlSymUnion) geoShapeType() geopb.ShapeType {
	return u.val.(geopb.ShapeType)
}
func newNameFromStr(s string) *ast.Name {
	return (*ast.Name)(&s)
}
func (u *sqlSymUnion) typeReference() ast.ResolvableTypeReference {
	return u.val.(ast.ResolvableTypeReference)
}
func (u *sqlSymUnion) typeReferences() []ast.ResolvableTypeReference {
	return u.val.([]ast.ResolvableTypeReference)
}
func (u *sqlSymUnion) alterTypeAddValuePlacement() *ast.AlterTypeAddValuePlacement {
	return u.val.(*ast.AlterTypeAddValuePlacement)
}

//line sql-gen.y:661
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AFTER = lex.AFTER
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const ATTRIBUTE = lex.ATTRIBUTE
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEFORE = lex.BEFORE
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CBRT = lex.CBRT
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DETACHED = lex.DETACHED
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const ENCRYPTION_PASSPHRASE = lex.ENCRYPTION_PASSPHRASE
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXECUTION = lex.EXECUTION
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEVER = lex.NEVER
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OWNER = lex.OWNER
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const RECURRING = lex.RECURRING
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const RETRY = lex.RETRY
const REVISION_HISTORY = lex.REVISION_HISTORY
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEDULE = lex.SCHEDULE
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SQRT = lex.SQRT
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TENANT = lex.TENANT
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const GENERATED_ALWAYS = lex.GENERATED_ALWAYS
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEFORE",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CBRT",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DETACHED",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"ENCRYPTION_PASSPHRASE",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXECUTION",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEVER",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"RECURRING",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"RETRY",
	"REVISION_HISTORY",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEDULE",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SQRT",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TENANT",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"GENERATED_ALWAYS",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}

var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10971

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	-2, 1202,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 67,
	426, 183,
	-2, 0,
	-1, 77,
	202, 1026,
	214, 1026,
	229, 301,
	324, 301,
	333, 824,
	364, 301,
	374, 824,
	411, 824,
	436, 301,
	461, 824,
	-2, 0,
	-1, 82,
	229, 305,
	-2, 0,
	-1, 83,
	118, 1202,
	208, 1202,
	446, 1202,
	447, 1202,
	-2, 0,
	-1, 95,
	133, 1173,
	151, 1173,
	164, 1173,
	211, 1173,
	241, 1173,
	284, 1173,
	294, 1173,
	441, 1173,
	-2, 1144,
	-1, 127,
	141, 731,
	228, 731,
	327, 711,
	379, 711,
	429, 731,
	-2, 0,
	-1, 129,
	4, 1204,
	21, 1204,
	22, 1204,
	23, 1204,
	24, 1204,
	25, 1204,
	26, 1204,
	28, 1204,
	29, 1204,
	35, 1204,
	40, 1204,
	41, 1204,
	42, 1204,
	43, 1204,
	44, 1204,
	45, 1204,
	46, 1204,
	47, 1204,
	48, 1204,
	50, 1204,
	51, 1204,
	52, 1204,
	54, 1204,
	55, 1204,
	56, 1204,
	57, 1204,
	58, 1204,
	62, 1204,
	63, 1204,
	64, 1204,
	65, 1204,
	67, 1204,
	68, 1204,
	69, 1204,
	73, 1204,
	74, 1204,
	75, 1204,
	76, 1204,
	77, 1204,
	78, 1204,
	79, 1204,
	82, 1204,
	83, 1204,
	84, 1204,
	85, 1204,
	87, 1204,
	89, 1204,
	90, 1204,
	91, 1204,
	93, 1204,
	95, 1204,
	96, 1204,
	104, 1204,
	105, 1204,
	106, 1204,
	107, 1204,
	109, 1204,
	110, 1204,
	111, 1204,
	113, 1204,
	114, 1204,
	115, 1204,
	117, 1204,
	118, 1204,
	120, 1204,
	121, 1204,
	124, 1204,
	125, 1204,
	126, 1204,
	128, 1204,
	129, 1204,
	131, 1204,
	132, 1204,
	134, 1204,
	135, 1204,
	136, 1204,
	137, 1204,
	138, 1204,
	139, 1204,
	140, 1204,
	141, 1204,
	142, 1204,
	143, 1204,
	144, 1204,
	145, 1204,
	146, 1204,
	147, 1204,
	148, 1204,
	150, 1204,
	156, 1204,
	157, 1204,
	158, 1204,
	159, 1204,
	163, 1204,
	165, 1204,
	169, 1204,
	170, 1204,
	171, 1204,
	172, 1204,
	173, 1204,
	174, 1204,
	176, 1204,
	177, 1204,
	179, 1204,
	180, 1204,
	182, 1204,
	183, 1204,
	184, 1204,
	185, 1204,
	186, 1204,
	187, 1204,
	188, 1204,
	189, 1204,
	190, 1204,
	192, 1204,
	193, 1204,
	195, 1204,
	196, 1204,
	197, 1204,
	198, 1204,
	202, 1204,
	203, 1204,
	204, 1204,
	205, 1204,
	208, 1204,
	209, 1204,
	210, 1204,
	212, 1204,
	214, 1204,
	216, 1204,
	218, 1204,
	219, 1204,
	220, 1204,
	222, 1204,
	226, 1204,
	227, 1204,
	228, 1204,
	229, 1204,
	230, 1204,
	232, 1204,
	233, 1204,
	235, 1204,
	236, 1204,
	238, 1204,
	239, 1204,
	242, 1204,
	243, 1204,
	244, 1204,
	247, 1204,
	248, 1204,
	249, 1204,
	250, 1204,
	252, 1204,
	253, 1204,
	254, 1204,
	255, 1204,
	256, 1204,
	257, 1204,
	258, 1204,
	259, 1204,
	260, 1204,
	261, 1204,
	262, 1204,
	264, 1204,
	266, 1204,
	267, 1204,
	268, 1204,
	269, 1204,
	270, 1204,
	271, 1204,
	273, 1204,
	275, 1204,
	277, 1204,
	279, 1204,
	280, 1204,
	281, 1204,
	282, 1204,
	283, 1204,
	286, 1204,
	289, 1204,
	290, 1204,
	291, 1204,
	292, 1204,
	295, 1204,
	296, 1204,
	297, 1204,
	299, 1204,
	301, 1204,
	302, 1204,
	303, 1204,
	304, 1204,
	305, 1204,
	306, 1204,
	307, 1204,
	308, 1204,
	309, 1204,
	310, 1204,
	311, 1204,
	313, 1204,
	314, 1204,
	315, 1204,
	316, 1204,
	317, 1204,
	318, 1204,
	319, 1204,
	320, 1204,
	321, 1204,
	323, 1204,
	325, 1204,
	326, 1204,
	327, 1204,
	328, 1204,
	329, 1204,
	330, 1204,
	331, 1204,
	332, 1204,
	333, 1204,
	334, 1204,
	335, 1204,
	342, 1204,
	344, 1204,
	345, 1204,
	346, 1204,
	347, 1204,
	348, 1204,
	349, 1204,
	350, 1204,
	351, 1204,
	353, 1204,
	354, 1204,
	355, 1204,
	357, 1204,
	358, 1204,
	359, 1204,
	360, 1204,
	361, 1204,
	362, 1204,
	364, 1204,
	365, 1204,
	366, 1204,
	367, 1204,
	368, 1204,
	369, 1204,
	370, 1204,
	371, 1204,
	372, 1204,
	374, 1204,
	375, 1204,
	376, 1204,
	377, 1204,
	378, 1204,
	379, 1204,
	381, 1204,
	382, 1204,
	383, 1204,
	384, 1204,
	385, 1204,
	387, 1204,
	388, 1204,
	389, 1204,
	391, 1204,
	393, 1204,
	394, 1204,
	395, 1204,
	396, 1204,
	397, 1204,
	398, 1204,
	399, 1204,
	400, 1204,
	401, 1204,
	402, 1204,
	403, 1204,
	404, 1204,
	405, 1204,
	407, 1204,
	408, 1204,
	410, 1204,
	412, 1204,
	413, 1204,
	414, 1204,
	415, 1204,
	416, 1204,
	417, 1204,
	418, 1204,
	419, 1204,
	421, 1204,
	422, 1204,
	423, 1204,
	424, 1204,
	425, 1204,
	427, 1204,
	429, 1204,
	430, 1204,
	431, 1204,
	432, 1204,
	433, 1204,
	435, 1204,
	436, 1204,
	437, 1204,
	439, 1204,
	440, 1204,
	443, 1204,
	444, 1204,
	445, 1204,
	446, 1204,
	447, 1204,
	448, 1204,
	449, 1204,
	451, 1204,
	454, 1204,
	455, 1204,
	456, 1204,
	457, 1204,
	458, 1204,
	459, 1204,
	461, 1204,
	462, 1204,
	463, 1204,
	468, 1204,
	469, 1204,
	470, 1204,
	471, 1204,
	472, 1204,
	473, 1204,
	-2, 0,
	-1, 130,
	1, 1078,
	218, 1078,
	323, 1078,
	331, 1078,
	476, 1078,
	500, 1078,
	-2, 0,
	-1, 132,
	1, 1078,
	500, 1078,
	-2, 0,
	-1, 133,
	1, 1078,
	500, 1078,
	-2, 0,
	-1, 134,
	1, 1078,
	426, 1078,
	500, 1078,
	-2, 0,
	-1, 161,
	133, 1172,
	151, 1172,
	164, 1172,
	211, 1172,
	241, 1172,
	284, 1172,
	294, 1172,
	441, 1172,
	-2, 1147,
	-1, 194,
	4, 1211,
	5, 1211,
	6, 1211,
	7, 1211,
	8, 1211,
	9, 1211,
	10, 1211,
	21, 1211,
	22, 1211,
	23, 1211,
	24, 1211,
	25, 1211,
	26, 1211,
	28, 1211,
	29, 1211,
	35, 1211,
	36, 1211,
	40, 1211,
	41, 1211,
	42, 1211,
	43, 1211,
	44, 1211,
	45, 1211,
	46, 1211,
	47, 1211,
	48, 1211,
	50, 1211,
	51, 1211,
	52, 1211,
	54, 1211,
	55, 1211,
	56, 1211,
	57, 1211,
	58, 1211,
	59, 1211,
	60, 1211,
	61, 1211,
	62, 1211,
	63, 1211,
	64, 1211,
	65, 1211,
	67, 1211,
	68, 1211,
	69, 1211,
	71, 1211,
	73, 1211,
	74, 1211,
	75, 1211,
	76, 1211,
	77, 1211,
	78, 1211,
	79, 1211,
	82, 1211,
	83, 1211,
	84, 1211,
	85, 1211,
	87, 1211,
	89, 1211,
	90, 1211,
	91, 1211,
	93, 1211,
	94, 1211,
	95, 1211,
	96, 1211,
	97, 1211,
	98, 1211,
	99, 1211,
	100, 1211,
	101, 1211,
	102, 1211,
	103, 1211,
	104, 1211,
	105, 1211,
	106, 1211,
	107, 1211,
	108, 1211,
	109, 1211,
	110, 1211,
	111, 1211,
	112, 1211,
	113, 1211,
	114, 1211,
	115, 1211,
	117, 1211,
	118, 1211,
	120, 1211,
	121, 1211,
	124, 1211,
	125, 1211,
	126, 1211,
	128, 1211,
	129, 1211,
	131, 1211,
	132, 1211,
	134, 1211,
	135, 1211,
	136, 1211,
	137, 1211,
	138, 1211,
	139, 1211,
	140, 1211,
	141, 1211,
	142, 1211,
	143, 1211,
	144, 1211,
	145, 1211,
	146, 1211,
	147, 1211,
	148, 1211,
	149, 1211,
	150, 1211,
	156, 1211,
	157, 1211,
	158, 1211,
	159, 1211,
	163, 1211,
	165, 1211,
	168, 1211,
	169, 1211,
	170, 1211,
	171, 1211,
	172, 1211,
	173, 1211,
	174, 1211,
	176, 1211,
	177, 1211,
	179, 1211,
	180, 1211,
	182, 1211,
	183, 1211,
	184, 1211,
	185, 1211,
	186, 1211,
	187, 1211,
	188, 1211,
	189, 1211,
	190, 1211,
	191, 1211,
	192, 1211,
	193, 1211,
	195, 1211,
	196, 1211,
	197, 1211,
	198, 1211,
	202, 1211,
	203, 1211,
	204, 1211,
	205, 1211,
	207, 1211,
	208, 1211,
	209, 1211,
	210, 1211,
	212, 1211,
	214, 1211,
	215, 1211,
	216, 1211,
	217, 1211,
	218, 1211,
	219, 1211,
	220, 1211,
	221, 1211,
	222, 1211,
	226, 1211,
	227, 1211,
	228, 1211,
	229, 1211,
	230, 1211,
	232, 1211,
	233, 1211,
	235, 1211,
	236, 1211,
	237, 1211,
	238, 1211,
	239, 1211,
	240, 1211,
	242, 1211,
	243, 1211,
	244, 1211,
	245, 1211,
	246, 1211,
	247, 1211,
	248, 1211,
	249, 1211,
	250, 1211,
	252, 1211,
	253, 1211,
	254, 1211,
	255, 1211,
	256, 1211,
	257, 1211,
	258, 1211,
	259, 1211,
	260, 1211,
	261, 1211,
	262, 1211,
	264, 1211,
	265, 1211,
	266, 1211,
	267, 1211,
	268, 1211,
	269, 1211,
	270, 1211,
	271, 1211,
	272, 1211,
	273, 1211,
	274, 1211,
	275, 1211,
	276, 1211,
	277, 1211,
	278, 1211,
	279, 1211,
	280, 1211,
	281, 1211,
	282, 1211,
	283, 1211,
	286, 1211,
	290, 1211,
	291, 1211,
	292, 1211,
	295, 1211,
	296, 1211,
	297, 1211,
	298, 1211,
	299, 1211,
	300, 1211,
	301, 1211,
	302, 1211,
	303, 1211,
	304, 1211,
	305, 1211,
	306, 1211,
	307, 1211,
	308, 1211,
	309, 1211,
	310, 1211,
	311, 1211,
	313, 1211,
	314, 1211,
	315, 1211,
	316, 1211,
	317, 1211,
	318, 1211,
	319, 1211,
	320, 1211,
	321, 1211,
	323, 1211,
	325, 1211,
	326, 1211,
	327, 1211,
	328, 1211,
	329, 1211,
	330, 1211,
	331, 1211,
	332, 1211,
	333, 1211,
	334, 1211,
	335, 1211,
	342, 1211,
	344, 1211,
	345, 1211,
	346, 1211,
	347, 1211,
	348, 1211,
	349, 1211,
	350, 1211,
	351, 1211,
	353, 1211,
	354, 1211,
	355, 1211,
	356, 1211,
	357, 1211,
	358, 1211,
	359, 1211,
	360, 1211,
	361, 1211,
	362, 1211,
	364, 1211,
	365, 1211,
	366, 1211,
	367, 1211,
	368, 1211,
	369, 1211,
	370, 1211,
	371, 1211,
	372, 1211,
	374, 1211,
	375, 1211,
	376, 1211,
	377, 1211,
	378, 1211,
	379, 1211,
	380, 1211,
	381, 1211,
	382, 1211,
	383, 1211,
	384, 1211,
	385, 1211,
	386, 1211,
	387, 1211,
	388, 1211,
	389, 1211,
	391, 1211,
	393, 1211,
	394, 1211,
	395, 1211,
	396, 1211,
	397, 1211,
	398, 1211,
	399, 1211,
	400, 1211,
	401, 1211,
	402, 1211,
	403, 1211,
	404, 1211,
	405, 1211,
	407, 1211,
	408, 1211,
	409, 1211,
	410, 1211,
	412, 1211,
	413, 1211,
	414, 1211,
	415, 1211,
	416, 1211,
	417, 1211,
	418, 1211,
	419, 1211,
	421, 1211,
	422, 1211,
	423, 1211,
	424, 1211,
	425, 1211,
	427, 1211,
	429, 1211,
	430, 1211,
	431, 1211,
	432, 1211,
	433, 1211,
	434, 1211,
	435, 1211,
	436, 1211,
	437, 1211,
	439, 1211,
	440, 1211,
	442, 1211,
	443, 1211,
	444, 1211,
	445, 1211,
	446, 1211,
	447, 1211,
	448, 1211,
	449, 1211,
	450, 1211,
	451, 1211,
	454, 1211,
	455, 1211,
	456, 1211,
	457, 1211,
	458, 1211,
	459, 1211,
	461, 1211,
	462, 1211,
	463, 1211,
	468, 1211,
	469, 1211,
	470, 1211,
	471, 1211,
	472, 1211,
	473, 1211,
	474, 1211,
	481, 1211,
	488, 1211,
	489, 1211,
	490, 1211,
	497, 1211,
	501, 1211,
	-2, 0,
	-1, 592,
	167, 1917,
	426, 1917,
	480, 1917,
	499, 1917,
	-2, 0,
	-1, 593,
	167, 1999,
	426, 1999,
	480, 1999,
	499, 1999,
	-2, 0,
	-1, 594,
	167, 1905,
	426, 1905,
	480, 1905,
	499, 1905,
	-2, 0,
	-1, 596,
	167, 2094,
	426, 2094,
	480, 2094,
	499, 2094,
	-2, 0,
	-1, 598,
	167, 2124,
	426, 2124,
	480, 2124,
	499, 2124,
	-2, 0,
	-1, 605,
	167, 2014,
	426, 2014,
	480, 2014,
	499, 2014,
	-2, 567,
	-1, 634,
	499, 1858,
	502, 1858,
	-2, 785,
	-1, 635,
	499, 1860,
	502, 1860,
	-2, 786,
	-1, 636,
	499, 1859,
	502, 1859,
	-2, 787,
	-1, 637,
	502, 1793,
	-2, 788,
	-1, 659,
	164, 196,
	-2, 0,
	-1, 682,
	461, 1003,
	-2, 825,
	-1, 720,
	4, 1024,
	21, 1024,
	22, 1024,
	23, 1024,
	24, 1024,
	25, 1024,
	26, 1024,
	28, 1024,
	29, 1024,
	35, 1024,
	40, 1024,
	41, 1024,
	42, 1024,
	43, 1024,
	44, 1024,
	45, 1024,
	46, 1024,
	47, 1024,
	48, 1024,
	50, 1024,
	51, 1024,
	52, 1024,
	54, 1024,
	55, 1024,
	56, 1024,
	57, 1024,
	58, 1024,
	62, 1024,
	63, 1024,
	64, 1024,
	65, 1024,
	67, 1024,
	68, 1024,
	69, 1024,
	73, 1024,
	74, 1024,
	75, 1024,
	76, 1024,
	77, 1024,
	78, 1024,
	79, 1024,
	82, 1024,
	83, 1024,
	84, 1024,
	85, 1024,
	87, 1024,
	89, 1024,
	90, 1024,
	91, 1024,
	93, 1024,
	95, 1024,
	96, 1024,
	104, 1024,
	105, 1024,
	106, 1024,
	107, 1024,
	109, 1024,
	110, 1024,
	111, 1024,
	113, 1024,
	114, 1024,
	115, 1024,
	117, 1024,
	118, 1024,
	120, 1024,
	121, 1024,
	124, 1024,
	125, 1024,
	126, 1024,
	128, 1024,
	129, 1024,
	131, 1024,
	132, 1024,
	134, 1024,
	135, 1024,
	136, 1024,
	137, 1024,
	138, 1024,
	139, 1024,
	140, 1024,
	141, 1024,
	142, 1024,
	143, 1024,
	144, 1024,
	145, 1024,
	146, 1024,
	147, 1024,
	148, 1024,
	150, 1024,
	156, 1024,
	157, 1024,
	158, 1024,
	159, 1024,
	163, 1024,
	165, 1024,
	169, 1024,
	170, 1024,
	171, 1024,
	172, 1024,
	173, 1024,
	174, 1024,
	176, 1024,
	177, 1024,
	179, 1024,
	180, 1024,
	182, 1024,
	183, 1024,
	184, 1024,
	185, 1024,
	186, 1024,
	187, 1024,
	188, 1024,
	189, 1024,
	190, 1024,
	192, 1024,
	193, 1024,
	195, 1024,
	196, 1024,
	197, 1024,
	198, 1024,
	202, 1024,
	203, 1024,
	204, 1024,
	205, 1024,
	208, 1024,
	209, 1024,
	210, 1024,
	212, 1024,
	214, 1024,
	216, 1024,
	218, 1024,
	219, 1024,
	220, 1024,
	222, 1024,
	226, 1024,
	227, 1024,
	228, 1024,
	229, 1024,
	230, 1024,
	232, 1024,
	233, 1024,
	235, 1024,
	236, 1024,
	238, 1024,
	239, 1024,
	242, 1024,
	243, 1024,
	244, 1024,
	247, 1024,
	248, 1024,
	249, 1024,
	250, 1024,
	252, 1024,
	253, 1024,
	254, 1024,
	255, 1024,
	256, 1024,
	257, 1024,
	258, 1024,
	259, 1024,
	260, 1024,
	261, 1024,
	262, 1024,
	264, 1024,
	266, 1024,
	267, 1024,
	268, 1024,
	269, 1024,
	270, 1024,
	271, 1024,
	273, 1024,
	275, 1024,
	277, 1024,
	279, 1024,
	280, 1024,
	281, 1024,
	282, 1024,
	283, 1024,
	286, 1024,
	290, 1024,
	291, 1024,
	292, 1024,
	295, 1024,
	296, 1024,
	297, 1024,
	299, 1024,
	301, 1024,
	302, 1024,
	303, 1024,
	304, 1024,
	305, 1024,
	306, 1024,
	307, 1024,
	308, 1024,
	309, 1024,
	310, 1024,
	311, 1024,
	313, 1024,
	314, 1024,
	315, 1024,
	316, 1024,
	317, 1024,
	318, 1024,
	319, 1024,
	320, 1024,
	321, 1024,
	323, 1024,
	325, 1024,
	326, 1024,
	327, 1024,
	328, 1024,
	329, 1024,
	330, 1024,
	331, 1024,
	332, 1024,
	333, 1024,
	334, 1024,
	335, 1024,
	342, 1024,
	344, 1024,
	345, 1024,
	346, 1024,
	347, 1024,
	348, 1024,
	349, 1024,
	350, 1024,
	351, 1024,
	353, 1024,
	354, 1024,
	355, 1024,
	357, 1024,
	358, 1024,
	359, 1024,
	360, 1024,
	361, 1024,
	362, 1024,
	364, 1024,
	365, 1024,
	366, 1024,
	367, 1024,
	368, 1024,
	369, 1024,
	370, 1024,
	371, 1024,
	372, 1024,
	374, 1024,
	375, 1024,
	376, 1024,
	377, 1024,
	378, 1024,
	379, 1024,
	381, 1024,
	382, 1024,
	383, 1024,
	384, 1024,
	385, 1024,
	387, 1024,
	388, 1024,
	389, 1024,
	391, 1024,
	393, 1024,
	394, 1024,
	395, 1024,
	396, 1024,
	397, 1024,
	398, 1024,
	399, 1024,
	400, 1024,
	401, 1024,
	402, 1024,
	403, 1024,
	404, 1024,
	405, 1024,
	407, 1024,
	408, 1024,
	410, 1024,
	412, 1024,
	413, 1024,
	414, 1024,
	415, 1024,
	416, 1024,
	417, 1024,
	418, 1024,
	419, 1024,
	421, 1024,
	422, 1024,
	423, 1024,
	424, 1024,
	425, 1024,
	427, 1024,
	429, 1024,
	430, 1024,
	431, 1024,
	432, 1024,
	433, 1024,
	435, 1024,
	436, 1024,
	437, 1024,
	439, 1024,
	440, 1024,
	443, 1024,
	444, 1024,
	445, 1024,
	446, 1024,
	447, 1024,
	448, 1024,
	449, 1024,
	451, 1024,
	454, 1024,
	455, 1024,
	456, 1024,
	457, 1024,
	458, 1024,
	459, 1024,
	461, 1024,
	462, 1024,
	463, 1024,
	468, 1024,
	469, 1024,
	470, 1024,
	471, 1024,
	472, 1024,
	473, 1024,
	-2, 0,
	-1, 785,
	327, 712,
	379, 712,
	-2, 0,
	-1, 786,
	327, 711,
	379, 711,
	-2, 659,
	-1, 790,
	1, 741,
	496, 741,
	498, 741,
	500, 741,
	-2, 0,
	-1, 791,
	1, 784,
	164, 784,
	496, 784,
	498, 784,
	500, 784,
	-2, 0,
	-1, 799,
	1, 715,
	496, 715,
	498, 715,
	500, 715,
	-2, 0,
	-1, 802,
	1, 741,
	496, 741,
	498, 741,
	500, 741,
	-2, 0,
	-1, 803,
	1, 743,
	496, 743,
	498, 743,
	500, 743,
	-2, 0,
	-1, 804,
	1, 746,
	496, 746,
	498, 746,
	500, 746,
	-2, 0,
	-1, 810,
	1, 763,
	496, 763,
	498, 763,
	500, 763,
	-2, 0,
	-1, 811,
	1, 765,
	496, 765,
	498, 765,
	500, 765,
	-2, 0,
	-1, 857,
	151, 1213,
	164, 1213,
	241, 1213,
	284, 1213,
	-2, 1151,
	-1, 871,
	151, 1212,
	164, 1212,
	241, 1212,
	284, 1212,
	-2, 1148,
	-1, 897,
	499, 1857,
	-2, 575,
	-1, 925,
	5, 1849,
	497, 1847,
	-2, 1838,
	-1, 933,
	5, 1870,
	497, 1867,
	-2, 1858,
	-1, 934,
	5, 1871,
	497, 1868,
	-2, 1859,
	-1, 942,
	499, 1855,
	-2, 1837,
	-1, 943,
	497, 2202,
	-2, 1856,
	-1, 966,
	497, 2201,
	-2, 1872,
	-1, 967,
	5, 1377,
	-2, 2172,
	-1, 968,
	5, 1378,
	-2, 2173,
	-1, 969,
	5, 1379,
	-2, 2187,
	-1, 970,
	5, 1380,
	-2, 2152,
	-1, 971,
	5, 1381,
	-2, 2185,
	-1, 972,
	5, 1389,
	-2, 2164,
	-1, 973,
	5, 1376,
	-2, 2160,
	-1, 974,
	5, 1376,
	-2, 2159,
	-1, 975,
	5, 1376,
	-2, 2178,
	-1, 976,
	5, 1387,
	-2, 2154,
	-1, 977,
	5, 1392,
	-2, 2153,
	-1, 978,
	5, 1394,
	-2, 2197,
	-1, 981,
	5, 1416,
	-2, 2190,
	-1, 982,
	5, 1408,
	-2, 2191,
	-1, 983,
	5, 1416,
	-2, 2192,
	-1, 984,
	5, 1412,
	-2, 2193,
	-1, 985,
	5, 1363,
	-2, 2165,
	-1, 986,
	5, 1364,
	-2, 2166,
	-1, 1013,
	5, 1399,
	-2, 2198,
	-1, 1014,
	5, 1400,
	-2, 2188,
	-1, 1015,
	5, 1401,
	462, 1401,
	-2, 2155,
	-1, 1016,
	5, 1402,
	462, 1402,
	-2, 2156,
	-1, 1053,
	497, 1867,
	-2, 1858,
	-1, 1054,
	497, 1868,
	-2, 1859,
	-1, 1083,
	167, 2124,
	426, 2124,
	480, 2124,
	499, 2124,
	-2, 0,
	-1, 1086,
	1, 553,
	500, 553,
	-2, 1086,
	-1, 1211,
	344, 1833,
	490, 1833,
	-2, 1831,
	-1, 1223,
	501, 1833,
	-2, 1834,
	-1, 1227,
	1, 1000,
	496, 1000,
	498, 1000,
	500, 1000,
	-2, 1200,
	-1, 1277,
	333, 824,
	461, 824,
	-2, 300,
	-1, 1300,
	1, 1000,
	496, 1000,
	498, 1000,
	500, 1000,
	-2, 1200,
	-1, 1306,
	4, 1024,
	21, 1024,
	22, 1024,
	23, 1024,
	24, 1024,
	25, 1024,
	26, 1024,
	28, 1024,
	29, 1024,
	35, 1024,
	40, 1024,
	41, 1024,
	42, 1024,
	43, 1024,
	44, 1024,
	45, 1024,
	46, 1024,
	47, 1024,
	48, 1024,
	50, 1024,
	51, 1024,
	52, 1024,
	54, 1024,
	55, 1024,
	56, 1024,
	57, 1024,
	58, 1024,
	62, 1024,
	63, 1024,
	64, 1024,
	65, 1024,
	67, 1024,
	68, 1024,
	69, 1024,
	73, 1024,
	74, 1024,
	75, 1024,
	76, 1024,
	77, 1024,
	78, 1024,
	79, 1024,
	82, 1024,
	83, 1024,
	84, 1024,
	85, 1024,
	87, 1024,
	89, 1024,
	90, 1024,
	91, 1024,
	93, 1024,
	95, 1024,
	96, 1024,
	104, 1024,
	105, 1024,
	106, 1024,
	107, 1024,
	109, 1024,
	110, 1024,
	111, 1024,
	113, 1024,
	114, 1024,
	115, 1024,
	117, 1024,
	118, 1024,
	120, 1024,
	121, 1024,
	124, 1024,
	125, 1024,
	126, 1024,
	128, 1024,
	129, 1024,
	131, 1024,
	132, 1024,
	134, 1024,
	135, 1024,
	136, 1024,
	137, 1024,
	138, 1024,
	139, 1024,
	140, 1024,
	141, 1024,
	142, 1024,
	143, 1024,
	144, 1024,
	145, 1024,
	146, 1024,
	147, 1024,
	148, 1024,
	156, 1024,
	157, 1024,
	158, 1024,
	159, 1024,
	163, 1024,
	165, 1024,
	169, 1024,
	170, 1024,
	171, 1024,
	172, 1024,
	173, 1024,
	174, 1024,
	176, 1024,
	177, 1024,
	179, 1024,
	180, 1024,
	182, 1024,
	183, 1024,
	184, 1024,
	185, 1024,
	186, 1024,
	187, 1024,
	188, 1024,
	189, 1024,
	190, 1024,
	192, 1024,
	193, 1024,
	195, 1024,
	196, 1024,
	197, 1024,
	198, 1024,
	203, 1024,
	204, 1024,
	205, 1024,
	208, 1024,
	209, 1024,
	210, 1024,
	212, 1024,
	214, 1024,
	216, 1024,
	218, 1024,
	219, 1024,
	220, 1024,
	222, 1024,
	226, 1024,
	227, 1024,
	228, 1024,
	229, 1024,
	230, 1024,
	232, 1024,
	233, 1024,
	235, 1024,
	236, 1024,
	238, 1024,
	239, 1024,
	242, 1024,
	243, 1024,
	244, 1024,
	247, 1024,
	248, 1024,
	249, 1024,
	250, 1024,
	252, 1024,
	253, 1024,
	254, 1024,
	255, 1024,
	256, 1024,
	257, 1024,
	258, 1024,
	259, 1024,
	260, 1024,
	261, 1024,
	262, 1024,
	264, 1024,
	266, 1024,
	267, 1024,
	268, 1024,
	269, 1024,
	270, 1024,
	271, 1024,
	273, 1024,
	277, 1024,
	279, 1024,
	280, 1024,
	281, 1024,
	282, 1024,
	283, 1024,
	286, 1024,
	288, 1024,
	290, 1024,
	291, 1024,
	292, 1024,
	295, 1024,
	296, 1024,
	297, 1024,
	299, 1024,
	301, 1024,
	302, 1024,
	303, 1024,
	304, 1024,
	305, 1024,
	306, 1024,
	307, 1024,
	308, 1024,
	309, 1024,
	310, 1024,
	311, 1024,
	313, 1024,
	314, 1024,
	315, 1024,
	316, 1024,
	317, 1024,
	318, 1024,
	319, 1024,
	320, 1024,
	321, 1024,
	323, 1024,
	325, 1024,
	326, 1024,
	327, 1024,
	328, 1024,
	329, 1024,
	330, 1024,
	331, 1024,
	332, 1024,
	333, 1024,
	334, 1024,
	335, 1024,
	342, 1024,
	344, 1024,
	345, 1024,
	346, 1024,
	347, 1024,
	348, 1024,
	349, 1024,
	350, 1024,
	351, 1024,
	353, 1024,
	354, 1024,
	355, 1024,
	357, 1024,
	358, 1024,
	359, 1024,
	360, 1024,
	361, 1024,
	362, 1024,
	364, 1024,
	365, 1024,
	366, 1024,
	367, 1024,
	368, 1024,
	369, 1024,
	370, 1024,
	371, 1024,
	372, 1024,
	374, 1024,
	375, 1024,
	376, 1024,
	377, 1024,
	378, 1024,
	379, 1024,
	381, 1024,
	382, 1024,
	383, 1024,
	384, 1024,
	385, 1024,
	387, 1024,
	388, 1024,
	389, 1024,
	391, 1024,
	393, 1024,
	394, 1024,
	395, 1024,
	396, 1024,
	397, 1024,
	398, 1024,
	399, 1024,
	400, 1024,
	401, 1024,
	402, 1024,
	403, 1024,
	404, 1024,
	405, 1024,
	407, 1024,
	408, 1024,
	410, 1024,
	412, 1024,
	413, 1024,
	414, 1024,
	415, 1024,
	416, 1024,
	417, 1024,
	418, 1024,
	419, 1024,
	421, 1024,
	422, 1024,
	423, 1024,
	424, 1024,
	425, 1024,
	427, 1024,
	429, 1024,
	430, 1024,
	431, 1024,
	432, 1024,
	433, 1024,
	435, 1024,
	436, 1024,
	437, 1024,
	439, 1024,
	440, 1024,
	443, 1024,
	444, 1024,
	445, 1024,
	446, 1024,
	447, 1024,
	448, 1024,
	449, 1024,
	451, 1024,
	454, 1024,
	455, 1024,
	456, 1024,
	457, 1024,
	458, 1024,
	459, 1024,
	461, 1024,
	462, 1024,
	463, 1024,
	468, 1024,
	469, 1024,
	470, 1024,
	471, 1024,
	472, 1024,
	473, 1024,
	-2, 0,
	-1, 1371,
	1, 428,
	496, 428,
	498, 428,
	500, 428,
	-2, 1171,
	-1, 1374,
	4, 2196,
	11, 2196,
	12, 2196,
	14, 2196,
	15, 2196,
	16, 2196,
	17, 2196,
	18, 2196,
	19, 2196,
	21, 2196,
	22, 2196,
	23, 2196,
	24, 2196,
	25, 2196,
	26, 2196,
	28, 2196,
	29, 2196,
	32, 2196,
	33, 2196,
	35, 2196,
	37, 2196,
	40, 2196,
	41, 2196,
	42, 2196,
	43, 2196,
	44, 2196,
	45, 2196,
	46, 2196,
	47, 2196,
	48, 2196,
	50, 2196,
	51, 2196,
	52, 2196,
	54, 2196,
	55, 2196,
	56, 2196,
	57, 2196,
	58, 2196,
	62, 2196,
	63, 2196,
	64, 2196,
	65, 2196,
	67, 2196,
	68, 2196,
	69, 2196,
	70, 2196,
	73, 2196,
	74, 2196,
	75, 2196,
	76, 2196,
	77, 2196,
	78, 2196,
	79, 2196,
	80, 2196,
	82, 2196,
	83, 2196,
	84, 2196,
	85, 2196,
	87, 2196,
	88, 2196,
	89, 2196,
	90, 2196,
	91, 2196,
	93, 2196,
	94, 2196,
	95, 2196,
	96, 2196,
	104, 2196,
	105, 2196,
	106, 2196,
	107, 2196,
	109, 2196,
	110, 2196,
	111, 2196,
	113, 2196,
	114, 2196,
	115, 2196,
	117, 2196,
	118, 2196,
	120, 2196,
	121, 2196,
	124, 2196,
	125, 2196,
	126, 2196,
	128, 2196,
	129, 2196,
	131, 2196,
	132, 2196,
	134, 2196,
	135, 2196,
	136, 2196,
	137, 2196,
	138, 2196,
	139, 2196,
	140, 2196,
	141, 2196,
	142, 2196,
	143, 2196,
	144, 2196,
	145, 2196,
	146, 2196,
	147, 2196,
	148, 2196,
	152, 2196,
	153, 2196,
	154, 2196,
	155, 2196,
	156, 2196,
	157, 2196,
	158, 2196,
	159, 2196,
	162, 2196,
	163, 2196,
	165, 2196,
	168, 2196,
	169, 2196,
	170, 2196,
	171, 2196,
	172, 2196,
	173, 2196,
	174, 2196,
	176, 2196,
	177, 2196,
	179, 2196,
	180, 2196,
	182, 2196,
	183, 2196,
	184, 2196,
	185, 2196,
	186, 2196,
	187, 2196,
	188, 2196,
	189, 2196,
	190, 2196,
	191, 2196,
	192, 2196,
	193, 2196,
	194, 2196,
	195, 2196,
	196, 2196,
	197, 2196,
	198, 2196,
	200, 2196,
	201, 2196,
	203, 2196,
	204, 2196,
	205, 2196,
	207, 2196,
	208, 2196,
	209, 2196,
	210, 2196,
	212, 2196,
	214, 2196,
	215, 2196,
	216, 2196,
	217, 2196,
	218, 2196,
	219, 2196,
	220, 2196,
	221, 2196,
	222, 2196,
	224, 2196,
	225, 2196,
	226, 2196,
	227, 2196,
	228, 2196,
	229, 2196,
	230, 2196,
	232, 2196,
	233, 2196,
	235, 2196,
	236, 2196,
	237, 2196,
	238, 2196,
	239, 2196,
	240, 2196,
	242, 2196,
	243, 2196,
	244, 2196,
	247, 2196,
	248, 2196,
	249, 2196,
	250, 2196,
	251, 2196,
	252, 2196,
	253, 2196,
	254, 2196,
	255, 2196,
	256, 2196,
	257, 2196,
	258, 2196,
	259, 2196,
	260, 2196,
	261, 2196,
	262, 2196,
	264, 2196,
	265, 2196,
	266, 2196,
	267, 2196,
	268, 2196,
	269, 2196,
	270, 2196,
	271, 2196,
	273, 2196,
	276, 2196,
	277, 2196,
	279, 2196,
	280, 2196,
	281, 2196,
	282, 2196,
	283, 2196,
	286, 2196,
	290, 2196,
	291, 2196,
	292, 2196,
	293, 2196,
	295, 2196,
	296, 2196,
	297, 2196,
	299, 2196,
	301, 2196,
	302, 2196,
	303, 2196,
	304, 2196,
	305, 2196,
	306, 2196,
	307, 2196,
	308, 2196,
	309, 2196,
	310, 2196,
	311, 2196,
	313, 2196,
	314, 2196,
	315, 2196,
	316, 2196,
	317, 2196,
	318, 2196,
	319, 2196,
	320, 2196,
	321, 2196,
	323, 2196,
	325, 2196,
	326, 2196,
	327, 2196,
	328, 2196,
	329, 2196,
	330, 2196,
	331, 2196,
	332, 2196,
	333, 2196,
	334, 2196,
	335, 2196,
	342, 2196,
	343, 2196,
	344, 2196,
	345, 2196,
	346, 2196,
	347, 2196,
	348, 2196,
	349, 2196,
	350, 2196,
	351, 2196,
	353, 2196,
	354, 2196,
	355, 2196,
	356, 2196,
	357, 2196,
	358, 2196,
	359, 2196,
	360, 2196,
	361, 2196,
	362, 2196,
	363, 2196,
	364, 2196,
	365, 2196,
	366, 2196,
	367, 2196,
	368, 2196,
	369, 2196,
	370, 2196,
	371, 2196,
	372, 2196,
	374, 2196,
	375, 2196,
	376, 2196,
	377, 2196,
	378, 2196,
	379, 2196,
	381, 2196,
	382, 2196,
	383, 2196,
	384, 2196,
	385, 2196,
	386, 2196,
	387, 2196,
	388, 2196,
	389, 2196,
	391, 2196,
	393, 2196,
	394, 2196,
	395, 2196,
	396, 2196,
	397, 2196,
	398, 2196,
	399, 2196,
	400, 2196,
	401, 2196,
	402, 2196,
	403, 2196,
	404, 2196,
	405, 2196,
	407, 2196,
	408, 2196,
	410, 2196,
	412, 2196,
	413, 2196,
	414, 2196,
	415, 2196,
	416, 2196,
	417, 2196,
	418, 2196,
	419, 2196,
	421, 2196,
	422, 2196,
	423, 2196,
	424, 2196,
	425, 2196,
	427, 2196,
	429, 2196,
	430, 2196,
	431, 2196,
	432, 2196,
	433, 2196,
	435, 2196,
	436, 2196,
	437, 2196,
	439, 2196,
	440, 2196,
	443, 2196,
	444, 2196,
	445, 2196,
	446, 2196,
	447, 2196,
	448, 2196,
	449, 2196,
	451, 2196,
	454, 2196,
	455, 2196,
	456, 2196,
	457, 2196,
	458, 2196,
	459, 2196,
	461, 2196,
	462, 2196,
	463, 2196,
	468, 2196,
	469, 2196,
	470, 2196,
	471, 2196,
	472, 2196,
	473, 2196,
	474, 2196,
	475, 2196,
	478, 2196,
	479, 2196,
	480, 2196,
	481, 2196,
	482, 2196,
	483, 2196,
	485, 2196,
	486, 2196,
	487, 2196,
	488, 2196,
	489, 2196,
	490, 2196,
	491, 2196,
	492, 2196,
	493, 2196,
	495, 2196,
	498, 2196,
	499, 2196,
	501, 2196,
	502, 2196,
	-2, 0,
	-1, 1379,
	167, 2094,
	426, 2094,
	480, 2094,
	499, 2094,
	-2, 0,
	-1, 1413,
	327, 712,
	379, 712,
	-2, 0,
	-1, 1437,
	1, 707,
	496, 707,
	498, 707,
	500, 707,
	-2, 0,
	-1, 1438,
	1, 732,
	496, 732,
	498, 732,
	500, 732,
	-2, 0,
	-1, 1439,
	1, 714,
	496, 714,
	498, 714,
	500, 714,
	-2, 0,
	-1, 1441,
	1, 718,
	496, 718,
	498, 718,
	500, 718,
	-2, 0,
	-1, 1469,
	1, 2144,
	496, 2144,
	498, 2144,
	499, 2144,
	500, 2144,
	-2, 761,
	-1, 1470,
	1, 2091,
	496, 2091,
	498, 2091,
	499, 2091,
	500, 2091,
	-2, 762,
	-1, 1485,
	1, 1081,
	500, 1081,
	-2, 1086,
	-1, 1488,
	151, 1212,
	164, 1212,
	241, 1212,
	284, 1212,
	-2, 1152,
	-1, 1582,
	133, 1173,
	151, 1173,
	164, 1173,
	211, 1173,
	241, 1173,
	284, 1173,
	294, 1173,
	441, 1173,
	-2, 1577,
	-1, 1642,
	498, 1727,
	-2, 0,
	-1, 1677,
	133, 1173,
	151, 1173,
	164, 1173,
	211, 1173,
	241, 1173,
	284, 1173,
	294, 1173,
	441, 1173,
	-2, 1293,
	-1, 1724,
	497, 1404,
	-2, 1392,
	-1, 1757,
	1, 555,
	500, 555,
	-2, 1086,
	-1, 1970,
	1, 709,
	496, 709,
	498, 709,
	500, 709,
	-2, 0,
	-1, 1971,
	1, 734,
	496, 734,
	498, 734,
	500, 734,
	-2, 0,
	-1, 2044,
	361, 1239,
	362, 1239,
	-2, 1437,
	-1, 2075,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1457,
	-1, 2076,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1458,
	-1, 2077,
	88, 0,
	224, 0,
	225, 0,
	482, 0,
	483, 0,
	-2, 1459,
	-1, 2078,
	88, 0,
	224, 0,
	225, 0,
	482, 0,
	483, 0,
	-2, 1460,
	-1, 2079,
	88, 0,
	224, 0,
	225, 0,
	482, 0,
	483, 0,
	-2, 1461,
	-1, 2080,
	88, 0,
	224, 0,
	225, 0,
	482, 0,
	483, 0,
	-2, 1462,
	-1, 2081,
	88, 0,
	224, 0,
	225, 0,
	482, 0,
	483, 0,
	-2, 1463,
	-1, 2082,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1464,
	-1, 2094,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1476,
	-1, 2095,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1477,
	-1, 2096,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1478,
	-1, 2099,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1483,
	-1, 2105,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1487,
	-1, 2107,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1495,
	-1, 2108,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1496,
	-1, 2109,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1497,
	-1, 2110,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1498,
	-1, 2222,
	5, 1870,
	167, 1738,
	497, 1867,
	-2, 1858,
	-1, 2223,
	167, 1739,
	-2, 2148,
	-1, 2224,
	167, 1740,
	-2, 2013,
	-1, 2225,
	167, 1741,
	-2, 1928,
	-1, 2226,
	167, 1742,
	-2, 1970,
	-1, 2227,
	167, 1743,
	-2, 2008,
	-1, 2228,
	167, 1744,
	-2, 2089,
	-1, 2229,
	167, 1745,
	-2, 1560,
	-1, 2298,
	1, 1294,
	2, 1294,
	94, 1294,
	133, 1294,
	151, 1294,
	164, 1294,
	168, 1294,
	178, 1294,
	181, 1294,
	207, 1294,
	211, 1294,
	221, 1294,
	237, 1294,
	241, 1294,
	265, 1294,
	284, 1294,
	288, 1294,
	294, 1294,
	352, 1294,
	356, 1294,
	441, 1294,
	452, 1294,
	465, 1294,
	466, 1294,
	467, 1294,
	476, 1294,
	496, 1294,
	498, 1294,
	500, 1294,
	502, 1294,
	-2, 1293,
	-1, 2311,
	497, 1839,
	-2, 1853,
	-1, 2335,
	497, 1403,
	-2, 1393,
	-1, 2447,
	1, 1000,
	496, 1000,
	498, 1000,
	500, 1000,
	-2, 1200,
	-1, 2602,
	289, 1242,
	-2, 2186,
	-1, 2603,
	289, 1243,
	-2, 2077,
	-1, 2607,
	361, 1804,
	362, 1804,
	-2, 1558,
	-1, 2608,
	361, 1808,
	362, 1808,
	-2, 1559,
	-1, 2609,
	361, 1805,
	362, 1805,
	-2, 1558,
	-1, 2610,
	361, 1809,
	362, 1809,
	-2, 1559,
	-1, 2623,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1485,
	-1, 2624,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1489,
	-1, 2630,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1491,
	-1, 2827,
	218, 1086,
	323, 1086,
	331, 1086,
	476, 1086,
	-2, 552,
	-1, 2942,
	1, 1000,
	496, 1000,
	498, 1000,
	500, 1000,
	-2, 1200,
	-1, 3033,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1493,
	-1, 3040,
	215, 0,
	217, 0,
	276, 0,
	-2, 1512,
	-1, 3107,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1541,
	-1, 3108,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1542,
	-1, 3109,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1543,
	-1, 3113,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1547,
	-1, 3114,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1548,
	-1, 3115,
	14, 0,
	15, 0,
	16, 0,
	478, 0,
	479, 0,
	480, 0,
	-2, 1549,
	-1, 3161,
	497, 1840,
	-2, 1854,
	-1, 3270,
	499, 2302,
	-2, 1130,
	-1, 3321,
	215, 0,
	217, 0,
	276, 0,
	-2, 1513,
	-1, 3324,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1516,
	-1, 3325,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1518,
	-1, 3520,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1517,
	-1, 3521,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	191, 0,
	194, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 1519,
	-1, 3532,
	215, 0,
	-2, 1550,
	-1, 3675,
	215, 0,
	-2, 1551,
	-1, 3827,
	47, 0,
	191, 0,
	240, 0,
	386, 0,
	474, 0,
	481, 0,
	-2, 2151,
}

const sqlPrivate = 57344

const sqlLast = 94849

var sqlAct = [...]int{
	229, 3605, 3566, 3697, 3563, 3452, 2525, 3837, 3934, 3796,
	3720, 3802, 3766, 2757, 3826, 3304, 2928, 3781, 3839, 3838,
	1245, 3784, 3884, 3072, 3183, 3612, 2499, 1057, 3679, 3551,
	3825, 2758, 3483, 3478, 3436, 881, 2054, 3509, 898, 3621,
	2844, 3262, 3443, 2957, 1092, 3465, 3445, 3218, 1365, 3643,
	3388, 2122, 1366, 1711, 3488, 936, 1230, 2950, 3241, 1929,
	2924, 1497, 1808, 3231, 2062, 3025, 2055, 3184, 636, 2952,
	2534, 1683, 1115, 2616, 3537, 2488, 2474, 2462, 1369, 2471,
	3303, 2536, 2367, 603, 1208, 1046, 1942, 2800, 2772, 636,
	2426, 2544, 1387, 3360, 2780, 2740, 2533, 1652, 2761, 872,
	2527, 1853, 2500, 1918, 1421, 925, 1817, 2763, 2290, 2369,
	2291, 1852, 2483, 731, 3132, 2164, 2739, 2485, 4, 2135,
	3680, 1590, 1216, 1712, 1949, 2059, 2438, 223, 1927, 1840,
	880, 153, 1293, 2543, 2600, 631, 222, 1849, 2404, 2403,
	1833, 1485, 2472, 1793, 3606, 1099, 929, 1795, 2806, 2272,
	1653, 2119, 2293, 2155, 1628, 1783, 2043, 2251, 2026, 2254,
	2024, 2166, 1346, 1362, 1037, 934, 2926, 1372, 2493, 1884,
	1672, 1356, 2359, 1298, 637, 638, 2537, 1088, 571, 2158,
	1623, 1040, 2280, 1662, 1019, 1232, 2218, 2208, 2136, 1575,
	161, 1498, 1499, 587, 2262, 642, 162, 1054, 633, 557,
	979, 2025, 725, 579, 645, 1883, 1386, 597, 1240, 707,
	2027, 682, 1370, 1807, 153, 2048, 642, 910, 41, 574,
	40, 38, 1017, 29, 27, 645, 25, 1504, 780, 1042,
	582, 1484, 1904, 2651, 797, 3146, 2647, 3147, 1920, 1920,
	1669, 66, 1920, 3992, 2759, 1321, 1244, 2271, 932, 3987,
	1920, 94, 876, 2982, 1036, 3975, 1440, 67, 3974, 2271,
	3951, 3949, 2271, 3945, 3404, 3404, 2967, 1859, 3867, 3861,
	71, 3859, 3868, 2271, 2825, 2271, 876, 2660, 1512, 1513,
	36, 2966, 3856, 2661, 3853, 3848, 3857, 742, 3854, 1859,
	3823, 3822, 1512, 1513, 1859, 1859, 2264, 3821, 2322, 3817,
	1543, 1935, 1052, 1935, 1034, 77, 3816, 1515, 3811, 3809,
	1935, 2982, 3404, 3404, 1543, 2712, 2713, 1096, 3792, 3779,
	3760, 1515, 3600, 3404, 2326, 3753, 3752, 3747, 3746, 2271,
	2271, 3404, 3404, 1859, 3740, 1096, 3677, 1514, 1859, 82,
	2326, 1020, 1020, 3136, 858, 3657, 1023, 1534, 1024, 1859,
	857, 1514, 93, 2615, 1073, 1531, 3654, 83, 90, 3614,
	3404, 1950, 1213, 3615, 1512, 1513, 2271, 1545, 1546, 1547,
	1555, 1556, 1557, 3583, 3582, 3574, 3573, 1859, 1859, 1859,
	3404, 3761, 83, 927, 2727, 1548, 1543, 3543, 3522, 866,
	3507, 1859, 2326, 1515, 1935, 3672, 871, 3496, 3431, 3317,
	1561, 2982, 2271, 3422, 3403, 3323, 84, 2271, 3404, 2326,
	3278, 1068, 1021, 3272, 2998, 877, 3660, 2998, 2161, 1537,
	1538, 1539, 1540, 1514, 3239, 194, 3156, 3154, 3240, 1520,
	3157, 3155, 3139, 1534, 3056, 3052, 2271, 2422, 1859, 2271,
	2997, 1531, 2989, 1520, 2998, 1049, 2990, 2756, 2751, 2750,
	2703, 2271, 2271, 2271, 2704, 2701, 1935, 2693, 2691, 2702,
	2271, 2694, 2271, 196, 2712, 2713, 2718, 1542, 1544, 2662,
	2549, 2523, 2522, 2271, 1935, 1938, 1938, 3600, 3136, 2343,
	2263, 1542, 1544, 2271, 2650, 2325, 2320, 1069, 3477, 2326,
	2271, 1529, 1530, 1263, 2162, 2314, 2270, 1937, 3423, 1859,
	2271, 1938, 1859, 2324, 2990, 1537, 1538, 1539, 1540, 195,
	2417, 1812, 2358, 1763, 1919, 1520, 2468, 1858, 1535, 188,
	2434, 2356, 1648, 85, 1239, 3212, 3028, 189, 3006, 1670,
	1921, 1921, 1535, 1843, 1921, 2307, 2306, 2968, 2305, 1423,
	2304, 1257, 1921, 2303, 1552, 1025, 1022, 1562, 865, 163,
	864, 863, 194, 1542, 1544, 2728, 2969, 1244, 862, 861,
	860, 160, 88, 856, 89, 855, 2163, 2160, 1558, 854,
	1559, 2580, 3561, 853, 852, 194, 66, 1529, 1530, 851,
	850, 849, 848, 847, 846, 845, 194, 844, 843, 842,
	196, 841, 67, 1550, 730, 823, 778, 777, 127, 2191,
	776, 2966, 934, 775, 1535, 71, 934, 3844, 774, 1069,
	1541, 194, 773, 196, 772, 2718, 771, 2496, 770, 769,
	221, 1118, 768, 127, 196, 1118, 767, 194, 1235, 1560,
	1536, 2263, 1512, 1513, 766, 765, 195, 1098, 764, 763,
	77, 1103, 762, 761, 1536, 760, 1549, 759, 129, 196,
	758, 934, 757, 934, 1543, 934, 756, 755, 754, 195,
	1235, 1515, 164, 753, 752, 196, 1251, 2729, 751, 188,
	195, 740, 739, 698, 82, 1224, 163, 189, 1262, 2177,
	188, 2165, 2513, 1933, 1235, 1219, 1919, 93, 189, 1069,
	658, 1514, 83, 90, 2019, 195, 1541, 657, 656, 163,
	648, 647, 1512, 1513, 2728, 188, 1227, 646, 617, 609,
	163, 195, 1243, 189, 608, 607, 1536, 591, 1442, 217,
	216, 188, 215, 214, 1235, 213, 1256, 212, 1235, 189,
	211, 1515, 1235, 1303, 1305, 163, 210, 934, 1266, 1553,
	1086, 84, 1235, 209, 208, 934, 207, 206, 205, 1532,
	1528, 163, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521,
	1522, 1514, 1300, 204, 203, 202, 201, 642, 1524, 1516,
	1517, 1518, 1519, 1521, 1522, 200, 645, 199, 198, 2390,
	879, 2159, 197, 1520, 1111, 1235, 1205, 1210, 3376, 2723,
	2721, 2722, 2714, 2715, 2716, 2717, 2719, 2720, 3335, 3167,
	3150, 934, 2999, 1673, 1081, 2803, 2339, 2754, 2175, 2673,
	1381, 2656, 2451, 2330, 1242, 1241, 2729, 2312, 2712, 2713,
	1388, 1542, 1544, 2297, 2479, 1945, 1511, 1551, 2755, 1791,
	1696, 1526, 1527, 1533, 1554, 1532, 1528, 1601, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 1375, 1377, 1247,
	1105, 3345, 3824, 1520, 1056, 3344, 1512, 1513, 85, 153,
	153, 1393, 3727, 1405, 194, 2712, 2713, 1631, 3669, 3663,
	1631, 3661, 1535, 1630, 3536, 3497, 1630, 3492, 194, 2712,
	2713, 1350, 1353, 3476, 3381, 1515, 3358, 934, 934, 934,
	934, 934, 934, 934, 3357, 1634, 160, 88, 1629, 89,
	1944, 3351, 196, 3350, 3349, 3342, 3341, 1450, 3339, 3334,
	3331, 3330, 194, 1373, 3238, 1514, 196, 194, 934, 2712,
	2713, 194, 3245, 3171, 934, 1592, 3170, 3169, 3210, 730,
	3160, 3127, 1250, 127, 1255, 3126, 1261, 3125, 3048, 1512,
	1513, 2714, 2715, 2716, 2717, 2719, 2720, 3044, 195, 2993,
	196, 1599, 1324, 2798, 2747, 196, 2738, 1489, 188, 196,
	2711, 1543, 195, 2708, 2707, 2705, 189, 2700, 1515, 2718,
	2699, 2698, 188, 2695, 2692, 2672, 2655, 2648, 2524, 877,
	189, 2298, 2148, 129, 1536, 1511, 1895, 1581, 163, 1483,
	1510, 1864, 3986, 3943, 1592, 1033, 195, 164, 1514, 3942,
	3877, 195, 2495, 3875, 3866, 195, 188, 1520, 1862, 1058,
	1398, 188, 3074, 3719, 189, 188, 2718, 3707, 1385, 189,
	3704, 1414, 2481, 189, 3703, 3702, 1392, 934, 934, 934,
	2718, 3696, 3689, 934, 3658, 3642, 163, 194, 3641, 2125,
	1054, 163, 1054, 3629, 3626, 163, 3681, 2795, 1650, 3601,
	1308, 2752, 3579, 3557, 3534, 3517, 3516, 1118, 2728, 1593,
	3504, 1591, 1486, 3503, 3469, 934, 3375, 3560, 636, 3356,
	2718, 858, 1729, 636, 1494, 196, 3293, 857, 3290, 1699,
	1441, 934, 3201, 1493, 1359, 1235, 3491, 3200, 3187, 1708,
	1520, 1488, 3186, 3142, 1752, 2190, 1490, 3130, 3039, 1579,
	934, 3000, 1507, 1508, 2983, 2943, 1118, 1523, 1524, 1516,
	1517, 1518, 1519, 1521, 1522, 2892, 2871, 2847, 2818, 2728,
	2846, 195, 1704, 2820, 2677, 1656, 1657, 1723, 1542, 1544,
	2131, 188, 2676, 3244, 2671, 1789, 2639, 2461, 1633, 189,
	1637, 1760, 1636, 1635, 1632, 1052, 1624, 1052, 1622, 1680,
	2337, 194, 2336, 2309, 2302, 1625, 1626, 2269, 2173, 1695,
	1651, 163, 1754, 1646, 1645, 1644, 1643, 1703, 1642, 877,
	2729, 1020, 1641, 1640, 153, 2176, 1639, 1638, 1619, 1535,
	1618, 1518, 1519, 1521, 1522, 1617, 1616, 1615, 3472, 196,
	2480, 1614, 1659, 1613, 1612, 642, 1611, 1610, 1609, 1608,
	642, 1607, 1606, 1605, 645, 1594, 1580, 1578, 1702, 645,
	1573, 1080, 1071, 1681, 1064, 3377, 3327, 3166, 3153, 3145,
	2659, 2300, 3546, 1678, 1706, 1757, 1512, 1513, 2328, 3379,
	1946, 2729, 3165, 1593, 2816, 195, 1780, 2712, 2713, 1235,
	1755, 1649, 1782, 1211, 2847, 188, 1223, 1226, 1118, 1576,
	1691, 1512, 1513, 189, 1782, 1515, 1801, 1782, 3425, 3940,
	1102, 3933, 1690, 3705, 1689, 1688, 1707, 1686, 1685, 1675,
	1684, 1751, 1726, 1543, 2874, 163, 1830, 2953, 1671, 1832,
	1515, 3617, 1837, 3616, 3602, 1514, 1096, 1481, 1049, 1709,
	1049, 1536, 3495, 877, 2722, 2714, 2715, 2716, 2717, 2719,
	2720, 2408, 3424, 3148, 2174, 1226, 1226, 2985, 1100, 2984,
	1514, 1673, 2697, 1785, 1101, 1775, 3622, 1388, 3248, 2161,
	2696, 2621, 2392, 1097, 1687, 1093, 1631, 1096, 2237, 1769,
	3199, 1856, 1630, 1516, 1517, 1518, 1519, 1521, 1522, 3664,
	1413, 3662, 1812, 1226, 2716, 2717, 2719, 2720, 2930, 839,
	2929, 1816, 1614, 2723, 2721, 2722, 2714, 2715, 2716, 2717,
	2719, 2720, 1603, 1422, 1841, 1096, 1943, 642, 3613, 1614,
	3864, 3849, 3836, 3232, 1423, 3538, 645, 1235, 1854, 1235,
	3215, 1235, 1888, 3203, 3004, 2759, 3076, 2665, 1758, 840,
	1235, 1235, 3845, 2156, 1235, 2162, 2714, 2715, 2716, 2717,
	2719, 2720, 1520, 2335, 1647, 1627, 1451, 1235, 1235, 1235,
	1901, 2922, 1893, 1892, 1242, 1241, 1516, 1517, 1518, 1519,
	1521, 1522, 1700, 1281, 3858, 3855, 2962, 636, 3178, 3698,
	1094, 1951, 2431, 1836, 3479, 3778, 1402, 3686, 1095, 2428,
	1542, 1544, 1952, 1600, 2850, 3901, 1896, 1087, 1857, 3194,
	2531, 2492, 3846, 2915, 1923, 1717, 3739, 1925, 3900, 1941,
	3020, 2829, 3599, 1930, 2034, 3414, 1932, 2163, 2160, 1388,
	1269, 2344, 1954, 3982, 3592, 3585, 1909, 3234, 1898, 2004,
	2712, 2713, 837, 835, 3224, 1963, 1964, 1965, 1875, 1874,
	1032, 1535, 1962, 3223, 1966, 931, 833, 1948, 831, 828,
	875, 934, 2002, 934, 3217, 3214, 2032, 3213, 3175, 3174,
	934, 1770, 1279, 1729, 1729, 1118, 821, 934, 934, 934,
	934, 934, 934, 934, 934, 934, 934, 934, 934, 934,
	934, 934, 934, 934, 934, 934, 934, 934, 934, 934,
	934, 934, 934, 934, 934, 934, 934, 934, 934, 934,
	934, 934, 1907, 934, 642, 934, 934, 934, 934, 893,
	2036, 1903, 1373, 645, 1373, 1911, 1912, 1102, 1723, 1723,
	1324, 1449, 1906, 2670, 1906, 2023, 694, 934, 874, 1102,
	934, 934, 2165, 1096, 1280, 1448, 2018, 1081, 934, 1939,
	2669, 1940, 934, 2362, 934, 934, 2636, 1953, 1400, 3228,
	1955, 2668, 1118, 1536, 1093, 2873, 2817, 2360, 934, 934,
	934, 934, 2667, 934, 934, 934, 934, 934, 934, 934,
	934, 1101, 2033, 2634, 1809, 1984, 2625, 3738, 877, 2433,
	877, 2718, 2424, 1101, 2362, 2416, 2060, 2061, 2415, 934,
	934, 934, 934, 934, 934, 934, 934, 934, 2360, 1774,
	1773, 1805, 934, 1782, 1784, 3227, 2395, 2321, 2047, 2439,
	825, 876, 2106, 1093, 1054, 1487, 695, 1238, 2489, 2831,
	2204, 1118, 1447, 2203, 2064, 1810, 1811, 1061, 2016, 2034,
	1054, 2020, 2159, 1223, 2031, 1977, 3515, 2329, 2028, 2035,
	3005, 2022, 1048, 2017, 1960, 858, 934, 1118, 858, 858,
	2021, 2051, 1335, 1806, 2052, 2053, 1873, 3928, 1522, 1094,
	1314, 1059, 1313, 1726, 1726, 2152, 2412, 1095, 1275, 2720,
	2728, 2032, 2405, 2406, 2156, 1525, 1523, 1524, 1516, 1517,
	1518, 1519, 1521, 1522, 2405, 2406, 2631, 2405, 2406, 2137,
	2138, 1312, 1288, 1311, 2351, 1415, 3426, 2313, 1691, 1395,
	569, 2121, 2632, 2137, 2153, 2121, 2637, 1777, 1480, 1956,
	2383, 2285, 1235, 2598, 2133, 1796, 2394, 2013, 1094, 1052,
	1797, 2277, 1460, 3900, 2015, 564, 1095, 2008, 3568, 2199,
	1492, 1978, 2150, 2613, 2030, 1052, 2201, 1680, 3814, 3929,
	2299, 2202, 1118, 2117, 2205, 2583, 2206, 2207, 2221, 2221,
	2235, 1020, 2137, 3842, 2382, 2255, 2257, 1062, 873, 908,
	3190, 2261, 2276, 1974, 2441, 2371, 1908, 2430, 1760, 1729,
	2115, 3011, 1969, 2165, 2828, 2217, 2230, 1411, 1423, 2323,
	877, 2246, 2729, 2259, 615, 2440, 2442, 2033, 1079, 877,
	2284, 153, 2289, 877, 1118, 2295, 2296, 2429, 2278, 2282,
	2283, 2267, 2268, 1396, 2427, 2310, 1235, 1779, 1464, 2432,
	3010, 1678, 1096, 934, 3410, 934, 2103, 2363, 1798, 2129,
	816, 1423, 749, 1446, 1723, 2445, 2127, 2331, 3944, 3931,
	2577, 3917, 3570, 3181, 1800, 3916, 1401, 2605, 2606, 1778,
	2319, 2586, 3954, 870, 2612, 3514, 1717, 1717, 1633, 2031,
	2342, 1951, 2425, 2465, 697, 696, 2003, 2338, 2633, 3889,
	829, 829, 1049, 2413, 3309, 2374, 3308, 2635, 1891, 1625,
	1626, 1096, 1970, 2397, 829, 3400, 830, 829, 1049, 2001,
	614, 877, 2341, 2111, 2447, 2959, 1235, 1235, 3065, 1235,
	2345, 3843, 2398, 2960, 3967, 2112, 1802, 3202, 1277, 2113,
	692, 1235, 691, 2118, 3396, 2721, 2722, 2714, 2715, 2716,
	2717, 2719, 2720, 2407, 2409, 2410, 2411, 3062, 1818, 2385,
	2376, 2379, 817, 2366, 1971, 2393, 2012, 1223, 2885, 1844,
	2396, 2448, 2516, 2014, 1851, 3448, 642, 1822, 2361, 2519,
	1976, 2503, 1437, 2414, 3446, 645, 2585, 1920, 1951, 934,
	3397, 1951, 2567, 1951, 2568, 3937, 1050, 2959, 1334, 3699,
	2101, 2879, 1796, 2104, 2518, 1299, 1060, 1797, 2582, 1726,
	2446, 1829, 3841, 1299, 1274, 1812, 3408, 3757, 3715, 1388,
	2545, 2512, 3930, 1242, 2449, 1819, 2547, 1814, 2565, 3063,
	934, 2551, 2552, 2548, 1438, 3448, 934, 934, 2459, 1803,
	2557, 2558, 2559, 2165, 3446, 2469, 2520, 2830, 2530, 2100,
	1803, 618, 565, 2505, 1297, 3191, 1458, 724, 153, 826,
	3400, 2373, 2487, 2588, 1461, 2590, 2498, 1661, 2550, 1620,
	2562, 2553, 1850, 2554, 2863, 2509, 2867, 2510, 2389, 2511,
	2569, 3569, 2571, 2814, 2573, 1803, 3461, 2895, 2517, 3396,
	2584, 934, 934, 3389, 2861, 2114, 2521, 934, 3888, 3511,
	2581, 3305, 3527, 2532, 2116, 1798, 2865, 2421, 2627, 3387,
	934, 934, 2120, 566, 1373, 3391, 934, 934, 1823, 3870,
	818, 1800, 934, 1786, 1787, 3910, 616, 3871, 3789, 613,
	3718, 934, 934, 934, 2453, 3397, 2455, 934, 1572, 1661,
	2675, 1665, 2860, 1665, 2165, 3409, 2628, 934, 1397, 2362,
	1491, 567, 3392, 568, 1796, 623, 3393, 1459, 2658, 1797,
	2864, 2281, 3955, 2377, 934, 2147, 3755, 2294, 2604, 1462,
	750, 2595, 2594, 3390, 2593, 2494, 1824, 1825, 2494, 227,
	1668, 2372, 1668, 1802, 1973, 2047, 2599, 1799, 876, 1820,
	2347, 3078, 1717, 1968, 1663, 2102, 2279, 1410, 1412, 3756,
	3395, 3965, 3471, 2614, 2349, 3935, 3299, 3444, 1078, 3447,
	1666, 3162, 1666, 1665, 3398, 3510, 1074, 3310, 3721, 2216,
	2212, 3022, 2596, 1821, 2128, 1425, 3968, 629, 2649, 3840,
	934, 934, 934, 3652, 3243, 2350, 819, 3899, 1664, 934,
	934, 934, 3897, 1463, 934, 2626, 885, 3735, 3628, 1847,
	2348, 625, 1668, 3887, 934, 1054, 1118, 1798, 3462, 3260,
	934, 2774, 934, 3306, 2946, 1882, 1663, 1502, 2575, 3447,
	1054, 2766, 2767, 1800, 1658, 1831, 1072, 1067, 820, 1921,
	556, 3644, 1666, 1501, 2515, 3116, 1803, 3936, 1118, 2210,
	1845, 2653, 2654, 3645, 2050, 3026, 2657, 3392, 2664, 1813,
	1054, 3393, 1771, 1118, 3354, 2807, 2214, 2215, 2213, 3576,
	1664, 2788, 1812, 3960, 3575, 3555, 1826, 1729, 3938, 3646,
	3394, 1118, 3869, 2834, 3512, 3685, 3261, 1846, 3221, 1667,
	2564, 1667, 2812, 934, 3177, 1802, 2947, 1501, 2941, 2570,
	1768, 2572, 2842, 2574, 897, 3395, 3413, 934, 2778, 2838,
	1496, 2824, 2473, 3412, 2463, 3401, 620, 1902, 1729, 3398,
	1052, 1894, 2209, 2211, 2797, 1887, 1869, 877, 2826, 2591,
	3061, 3131, 1723, 1500, 934, 1052, 3648, 2776, 624, 2399,
	3023, 3767, 2832, 2777, 1827, 2801, 2009, 3722, 2786, 1764,
	2805, 3263, 3647, 2040, 2789, 2790, 2744, 2745, 2746, 2378,
	2802, 1667, 2794, 2749, 2760, 1052, 628, 1766, 2852, 3649,
	3484, 2857, 2858, 1723, 2460, 1118, 1502, 3797, 2775, 2768,
	1337, 3611, 3798, 622, 1235, 2773, 2839, 1500, 1572, 1399,
	1767, 816, 2835, 2836, 1799, 2787, 1235, 3117, 1803, 1211,
	2815, 3311, 1118, 3609, 2876, 3118, 3556, 636, 2853, 2851,
	1501, 2849, 2855, 1223, 870, 2809, 2810, 2811, 1235, 2792,
	619, 2793, 2878, 2848, 3355, 3394, 2619, 1584, 2597, 1235,
	1502, 1589, 1961, 3144, 2771, 1794, 2827, 2770, 1439, 3959,
	2904, 2843, 2318, 1054, 2317, 2316, 626, 2315, 2821, 2822,
	2886, 2823, 2940, 1801, 2273, 2955, 2833, 2467, 1703, 630,
	3401, 2898, 2041, 1049, 2901, 2893, 874, 3564, 2909, 2911,
	621, 1426, 1306, 3312, 2913, 3411, 1320, 1726, 1049, 2866,
	1801, 1235, 1235, 3692, 1307, 1048, 3453, 1048, 2872, 746,
	2400, 2401, 2964, 817, 2927, 1803, 2936, 2888, 2882, 2881,
	1500, 1318, 2883, 2935, 1226, 1226, 2884, 2942, 1049, 2916,
	3723, 2994, 1841, 738, 2912, 2902, 2894, 748, 1726, 1900,
	1841, 2275, 2907, 2975, 2918, 649, 2274, 3907, 2545, 2397,
	3607, 3553, 1839, 1118, 642, 3775, 1118, 2545, 2808, 3770,
	3693, 2956, 2920, 645, 2896, 3764, 1799, 3361, 1052, 1223,
	2948, 3501, 3133, 2938, 1838, 2172, 3794, 3565, 3909, 2987,
	2988, 2981, 3650, 2972, 2973, 2974, 934, 3651, 3554, 2977,
	3860, 2978, 934, 934, 1478, 1476, 934, 934, 934, 2961,
	934, 1834, 1455, 1453, 1223, 1436, 1223, 3001, 2970, 934,
	1729, 2979, 2980, 2976, 3706, 3533, 3017, 1434, 934, 3353,
	2963, 934, 2992, 153, 153, 1810, 1811, 1118, 3016, 3233,
	2996, 2741, 3500, 3038, 3771, 3694, 934, 2868, 2869, 3002,
	2706, 2870, 2638, 2464, 1118, 3007, 2423, 3008, 2391, 3009,
	2340, 1698, 3024, 1835, 1729, 1729, 934, 934, 3795, 934,
	934, 934, 2782, 3041, 1694, 1723, 1432, 1479, 1430, 2889,
	2890, 818, 1390, 2891, 1428, 3013, 2000, 934, 2742, 1420,
	1717, 934, 3019, 1729, 1729, 934, 934, 934, 934, 934,
	934, 934, 934, 934, 934, 934, 934, 934, 934, 934,
	934, 934, 934, 934, 3021, 934, 3018, 1319, 1496, 1723,
	1723, 1049, 934, 934, 1729, 1418, 1316, 877, 2579, 934,
	2578, 1717, 3050, 3051, 2556, 2029, 744, 745, 2011, 1981,
	934, 1866, 1317, 1753, 1604, 1394, 1292, 3046, 1723, 1723,
	2171, 1054, 1054, 2783, 3835, 934, 2897, 942, 747, 2887,
	736, 737, 3430, 3057, 3064, 3066, 3067, 3421, 3911, 1477,
	1475, 897, 650, 651, 3763, 897, 3073, 1454, 1452, 1723,
	1435, 827, 3482, 3435, 1118, 3385, 1951, 2060, 3081, 3080,
	1202, 3259, 1433, 3253, 1202, 3149, 3226, 819, 3197, 2781,
	225, 225, 225, 3195, 559, 560, 3093, 575, 559, 575,
	585, 590, 934, 3068, 606, 3120, 2060, 3096, 3095, 612,
	1726, 3090, 3176, 3091, 2785, 225, 3172, 934, 934, 1050,
	3088, 1050, 2939, 2954, 3089, 2931, 3087, 3121, 2514, 820,
	2490, 1431, 735, 1429, 2478, 2470, 225, 3124, 1999, 1427,
	2457, 3129, 934, 934, 1419, 1936, 1052, 1052, 3140, 3141,
	3885, 3137, 3138, 153, 1726, 1726, 3135, 1934, 1931, 1926,
	1924, 1922, 868, 934, 816, 1913, 1865, 1863, 1855, 1842,
	653, 652, 3152, 3151, 1828, 1815, 1804, 3058, 3128, 2951,
	1417, 1315, 3635, 1726, 1726, 2908, 1235, 870, 1705, 2617,
	1851, 1505, 3901, 3805, 3506, 2784, 3499, 3498, 1729, 3442,
	2546, 1790, 1271, 3637, 832, 834, 836, 2381, 3209, 3211,
	1029, 2362, 2362, 3271, 1726, 1812, 3014, 3222, 1473, 1474,
	1972, 654, 655, 1235, 3180, 2360, 2380, 3208, 869, 3196,
	934, 3198, 1899, 1358, 627, 1030, 559, 559, 1054, 934,
	1998, 3804, 1997, 1979, 225, 3415, 3437, 3249, 1416, 3273,
	1357, 3671, 3168, 1723, 3362, 1235, 1235, 1235, 3340, 2402,
	3281, 2397, 2384, 570, 3229, 1509, 817, 3903, 3895, 3236,
	2618, 1235, 3268, 1512, 1513, 3220, 3250, 1118, 3865, 3265,
	2456, 1761, 2428, 3225, 218, 1223, 1506, 2436, 1850, 1049,
	1049, 3264, 2435, 1717, 3251, 3219, 2418, 2386, 3762, 1118,
	3731, 3204, 934, 934, 3728, 2420, 1891, 3691, 934, 934,
	1729, 1358, 683, 934, 934, 581, 934, 723, 2419, 2503,
	934, 2843, 3216, 3297, 3254, 3267, 3266, 3269, 553, 1358,
	1031, 934, 1514, 3282, 3283, 3284, 3275, 1717, 1717, 3274,
	1512, 1513, 2388, 1052, 3285, 3604, 3252, 934, 3242, 3159,
	3279, 2545, 3932, 3280, 2497, 2387, 2260, 3288, 1756, 1710,
	3295, 3562, 2813, 3322, 3958, 1723, 1717, 1717, 3307, 1515,
	3797, 3313, 3286, 3287, 3625, 3798, 3291, 2712, 2713, 1512,
	1513, 3294, 3292, 2354, 2355, 2352, 2353, 3302, 3730, 3314,
	1404, 1244, 3332, 2167, 3913, 3164, 1403, 1717, 1726, 1514,
	2354, 2352, 2130, 2200, 1223, 1223, 1457, 1054, 3593, 1456,
	3438, 3434, 3433, 3328, 3257, 1054, 3163, 1584, 3069, 1118,
	2899, 1118, 1598, 1597, 818, 3946, 3918, 3682, 1054, 1048,
	3589, 3547, 3545, 3367, 3468, 3378, 3296, 3277, 1118, 3237,
	3235, 3193, 3188, 2971, 2945, 1048, 2944, 2561, 2560, 2507,
	2482, 2458, 2333, 2332, 2132, 1996, 1995, 934, 1994, 3352,
	1993, 1916, 1915, 1914, 1897, 1877, 1876, 1872, 1871, 1870,
	1868, 2242, 1867, 1472, 1471, 3326, 1345, 1223, 3407, 1344,
	1343, 3406, 1342, 1118, 1341, 1340, 1049, 1339, 1118, 1338,
	1336, 3418, 3419, 1331, 1330, 1329, 1328, 3373, 1327, 1287,
	3366, 3364, 3365, 1286, 1235, 1235, 1285, 1284, 3417, 3370,
	1726, 3369, 1052, 2801, 3363, 3374, 1202, 3384, 1283, 3359,
	1052, 1282, 3368, 1276, 1270, 1268, 1267, 3382, 3383, 3405,
	1118, 153, 1109, 1052, 3451, 1235, 1108, 1107, 867, 1106,
	819, 1077, 1076, 1012, 1762, 838, 3441, 824, 3416, 3567,
	3399, 1466, 81, 3298, 1278, 670, 3449, 76, 1848, 897,
	3428, 934, 2903, 3192, 3793, 1202, 1264, 3714, 678, 3429,
	3777, 2859, 2437, 1980, 1424, 1982, 1118, 3439, 3432, 3440,
	2796, 1717, 820, 1388, 3505, 3502, 2301, 3754, 934, 934,
	934, 3486, 3455, 3454, 3470, 3336, 2674, 3450, 3678, 3489,
	3475, 3473, 3526, 3485, 2170, 1602, 1118, 2753, 78, 1065,
	918, 934, 3487, 964, 934, 934, 3460, 3459, 3386, 3179,
	3480, 2535, 3457, 3456, 934, 1714, 1716, 1729, 884, 1121,
	1772, 924, 934, 934, 1788, 1781, 2334, 1075, 2220, 941,
	938, 1718, 1720, 3494, 606, 940, 939, 1118, 3513, 1719,
	1621, 937, 1713, 3256, 3255, 1049, 2466, 2501, 3518, 1323,
	1118, 801, 1776, 1049, 2126, 2154, 2663, 225, 934, 225,
	225, 1214, 1595, 225, 225, 934, 1049, 3529, 899, 920,
	3535, 2151, 1723, 934, 1070, 1729, 909, 225, 2779, 1246,
	2958, 3158, 934, 1717, 3490, 934, 2039, 686, 3549, 3523,
	2709, 934, 2157, 1063, 2243, 2236, 2232, 1202, 1118, 3541,
	3542, 2491, 1482, 3544, 1273, 1574, 2502, 1104, 2640, 2641,
	902, 2124, 1586, 2643, 3550, 2049, 3548, 1291, 2965, 1296,
	3588, 2799, 225, 225, 2327, 1214, 3801, 3077, 1881, 1028,
	1723, 3572, 3571, 1050, 1027, 225, 3598, 1026, 3783, 3780,
	3289, 2925, 1333, 1118, 2288, 1765, 1235, 3619, 2346, 1050,
	3590, 3610, 1564, 2932, 914, 225, 225, 225, 1222, 1214,
	225, 2764, 3595, 3624, 934, 934, 2995, 3586, 606, 1289,
	225, 225, 3636, 3608, 3603, 611, 3623, 934, 934, 1226,
	3580, 3581, 3540, 3463, 926, 735, 1563, 2444, 3655, 3656,
	3618, 2443, 3634, 3474, 934, 1729, 3688, 1091, 3578, 1090,
	3594, 1089, 3632, 3596, 3597, 3633, 2841, 3639, 3966, 3638,
	3189, 3653, 2927, 3493, 3631, 193, 3489, 1726, 934, 2611,
	1891, 934, 1503, 1495, 190, 192, 191, 3464, 2735, 2736,
	2737, 3863, 3695, 3630, 3206, 3666, 2917, 20, 19, 18,
	934, 98, 39, 3684, 3640, 17, 126, 225, 3676, 125,
	1723, 124, 123, 122, 3659, 128, 121, 120, 115, 2242,
	3683, 119, 225, 1235, 3701, 118, 117, 116, 114, 113,
	112, 111, 110, 3700, 109, 1726, 108, 934, 934, 107,
	106, 105, 3717, 104, 103, 102, 3670, 934, 101, 100,
	934, 99, 1235, 602, 599, 55, 54, 97, 96, 16,
	37, 3708, 1235, 1235, 3712, 14, 59, 3711, 3710, 60,
	13, 3732, 32, 33, 3734, 3725, 3726, 87, 3745, 1235,
	3729, 3724, 86, 31, 15, 3623, 30, 28, 11, 9,
	8, 34, 934, 934, 1682, 3737, 3667, 3668, 3741, 2242,
	2242, 3713, 3742, 3750, 12, 3751, 5, 158, 3736, 157,
	159, 156, 80, 155, 3743, 3744, 154, 3772, 3749, 79,
	26, 10, 3709, 3774, 1202, 934, 934, 150, 934, 3759,
	3620, 3748, 3247, 74, 152, 151, 149, 3773, 3782, 3785,
	148, 147, 75, 72, 146, 145, 73, 144, 3799, 24,
	6, 58, 7, 3806, 3508, 1726, 3003, 91, 92, 35,
	1717, 3787, 70, 69, 68, 3791, 23, 57, 3818, 22,
	3819, 183, 182, 181, 180, 175, 934, 934, 934, 2044,
	1048, 3820, 174, 179, 177, 176, 178, 3810, 173, 185,
	3813, 184, 3815, 187, 171, 1048, 167, 3847, 166, 934,
	170, 172, 169, 3852, 168, 165, 3834, 3831, 3832, 186,
	3833, 1202, 143, 65, 142, 141, 559, 140, 1717, 2242,
	2242, 2242, 3803, 139, 3850, 1048, 138, 137, 3872, 136,
	64, 21, 2, 3874, 3876, 1, 0, 225, 0, 225,
	0, 0, 3882, 225, 3881, 0, 0, 0, 934, 0,
	0, 3758, 0, 3873, 0, 1891, 1246, 1214, 225, 0,
	225, 3878, 3886, 0, 0, 225, 1246, 575, 1226, 0,
	225, 1246, 0, 0, 3892, 3893, 606, 3896, 3905, 3898,
	1202, 3902, 0, 3904, 3786, 3894, 0, 3790, 0, 0,
	3782, 0, 3906, 3785, 0, 3912, 934, 3921, 934, 3908,
	3915, 0, 3923, 3926, 3920, 3716, 1202, 3914, 3927, 3919,
	0, 0, 3925, 0, 0, 3862, 0, 2503, 2238, 0,
	3922, 0, 3924, 3879, 3880, 0, 0, 0, 3883, 0,
	3939, 0, 3941, 0, 0, 0, 0, 0, 1717, 0,
	0, 0, 0, 0, 0, 3950, 0, 3948, 0, 3953,
	3947, 0, 0, 934, 934, 0, 0, 0, 0, 0,
	3952, 934, 0, 934, 934, 0, 3962, 3956, 0, 0,
	3969, 3803, 0, 3970, 3972, 3034, 3035, 0, 0, 0,
	0, 0, 0, 0, 3971, 0, 0, 3973, 0, 0,
	0, 0, 3976, 3979, 0, 0, 3981, 0, 3980, 0,
	0, 1202, 3985, 3978, 3983, 3984, 3988, 934, 1048, 0,
	0, 0, 0, 0, 3993, 0, 0, 0, 0, 3989,
	0, 0, 3991, 0, 0, 0, 0, 0, 0, 3807,
	0, 0, 3808, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3097, 3098, 3099, 3100, 3101, 3102, 3103,
	3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113,
	3114, 3115, 0, 3119, 0, 0, 225, 0, 0, 0,
	225, 0, 0, 0, 1050, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 225, 0, 225, 0, 225, 0, 0,
	0, 559, 3963, 3964, 0, 1116, 0, 0, 0, 1217,
	0, 0, 0, 0, 0, 1917, 0, 0, 0, 1050,
	1512, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 1223, 0, 0, 0,
	0, 0, 1543, 0, 0, 0, 3990, 919, 95, 1515,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 0, 1214, 225, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 2242, 2242, 606, 1534,
	0, 0, 0, 0, 0, 225, 0, 1531, 0, 0,
	0, 0, 0, 0, 225, 225, 0, 225, 0, 225,
	0, 225, 0, 225, 0, 0, 0, 0, 0, 0,
	1226, 0, 0, 0, 0, 0, 0, 2005, 0, 0,
	2006, 95, 2007, 0, 0, 0, 0, 0, 0, 0,
	0, 3037, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 1538, 1539, 1540, 590, 1048, 1048, 0, 606,
	0, 1520, 0, 0, 2242, 2242, 2242, 2242, 2242, 2242,
	2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
	2242, 2242, 2242, 0, 2242, 0, 2601, 0, 0, 0,
	0, 859, 1050, 0, 0, 0, 0, 0, 0, 1542,
	1544, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1529, 1530, 1512, 1513, 0, 0, 0,
	0, 1555, 1556, 1557, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1543, 0, 0,
	1535, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 1561, 0, 0, 0, 0, 2238, 2238, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1534, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 0, 1541, 0, 0, 1202, 0, 225, 0, 559,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 225, 1536, 0, 0, 0, 1537, 1538, 1539, 1540,
	0, 0, 0, 0, 0, 0, 1520, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 2238, 2238, 2238, 0,
	0, 0, 1202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1552, 0, 0, 1562, 0,
	1202, 0, 0, 0, 1542, 1544, 0, 0, 0, 0,
	0, 575, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 1697, 0, 0, 0, 0, 897, 0, 1529, 1530,
	0, 0, 0, 0, 0, 0, 2712, 2713, 0, 2730,
	2731, 2732, 0, 0, 1550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2370, 1535, 0, 3319, 1660, 0,
	1050, 1050, 225, 0, 0, 0, 0, 0, 0, 0,
	1792, 1532, 1528, 225, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 1202, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 2727, 0, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 225, 2450, 0, 0,
	1048, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	1246, 0, 0, 225, 0, 0, 0, 1541, 0, 0,
	225, 0, 0, 0, 0, 0, 2486, 0, 0, 0,
	0, 0, 3532, 0, 0, 0, 2370, 1536, 559, 0,
	0, 2506, 0, 0, 0, 0, 0, 225, 0, 0,
	225, 0, 225, 0, 225, 0, 0, 2718, 0, 1214,
	1553, 225, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 2528, 735, 66, 2370, 2370, 3558, 0, 0, 0,
	0, 0, 1860, 0, 0, 0, 0, 0, 225, 67,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 225, 1214, 225, 0, 0, 1246,
	2733, 1246, 0, 0, 1214, 0, 1214, 0, 1214, 0,
	0, 0, 1202, 0, 0, 1202, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	225, 225, 225, 225, 1214, 225, 2728, 225, 1551, 95,
	0, 95, 0, 95, 0, 1554, 1532, 1528, 0, 1525,
	1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 93, 0, 225, 0, 0, 83,
	90, 0, 0, 0, 0, 0, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3675, 1202, 0, 0, 0, 0, 0, 1512,
	1513, 0, 0, 0, 0, 878, 95, 95, 0, 0,
	0, 0, 0, 2238, 2238, 95, 0, 0, 84, 0,
	0, 1543, 0, 95, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2729, 0,
	0, 0, 0, 2242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1246, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 0, 1050, 95, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 2242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238,
	2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238,
	0, 2238, 0, 1202, 0, 0, 0, 0, 0, 2063,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	1537, 1538, 1539, 1540, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 2724, 2725, 2726, 0, 0, 859, 0,
	2723, 2721, 2722, 2714, 2715, 2716, 2717, 2719, 2720, 0,
	0, 0, 225, 160, 88, 0, 89, 0, 1577, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 1542, 1544,
	0, 0, 559, 0, 0, 1582, 0, 559, 194, 1588,
	559, 0, 0, 559, 559, 0, 730, 0, 0, 559,
	127, 0, 0, 0, 0, 0, 2168, 225, 0, 0,
	0, 0, 0, 2242, 0, 0, 0, 0, 0, 1246,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 2370, 2370, 225,
	0, 0, 0, 2370, 164, 0, 2845, 0, 0, 0,
	0, 0, 195, 0, 2370, 2845, 0, 2370, 2845, 2845,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	189, 225, 225, 225, 0, 0, 2242, 2242, 0, 0,
	883, 2311, 0, 0, 883, 0, 0, 1674, 0, 1677,
	0, 95, 1378, 225, 1214, 0, 1202, 0, 0, 0,
	0, 1541, 0, 0, 0, 0, 2370, 0, 2900, 2370,
	1296, 0, 0, 2370, 2370, 0, 0, 0, 1202, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 1248,
	0, 1252, 0, 1258, 225, 2921, 0, 0, 2923, 2370,
	0, 0, 225, 0, 0, 0, 225, 0, 1296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2486, 0, 0, 1214, 0,
	225, 0, 0, 2370, 0, 559, 2357, 0, 0, 0,
	0, 0, 2370, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 1384, 225, 2486, 0, 0,
	2486, 0, 0, 1391, 67, 2712, 2713, 0, 2730, 2731,
	2732, 0, 0, 0, 0, 0, 0, 71, 1202, 0,
	1202, 0, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519,
	1521, 1522, 0, 0, 0, 0, 0, 1202, 3012, 0,
	0, 1214, 225, 0, 225, 0, 0, 0, 0, 1512,
	1513, 0, 77, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1543, 0, 0, 2727, 0, 0, 225, 1515, 0,
	0, 0, 1202, 0, 0, 0, 82, 1202, 0, 0,
	2712, 2713, 0, 2730, 2731, 2732, 0, 0, 0, 93,
	0, 0, 0, 0, 83, 90, 0, 0, 1514, 2712,
	2713, 0, 2730, 2731, 2732, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 1202,
	3318, 0, 0, 3075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 0, 84, 0, 0, 2718, 0, 0, 2727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3032, 0, 0, 0, 0, 1202, 1583, 0, 2727, 0,
	0, 0, 1596, 0, 0, 0, 0, 0, 2734, 0,
	1537, 1538, 1539, 1540, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 878, 1202, 878, 0, 0, 2733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 1542, 1544,
	0, 2718, 0, 0, 0, 2728, 1202, 0, 0, 0,
	559, 559, 0, 0, 0, 0, 0, 0, 0, 1202,
	2718, 0, 1529, 1530, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1246, 0, 1654, 1654, 1654, 0, 1535,
	2238, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1202, 160, 88,
	0, 89, 0, 2733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2728, 606, 859, 194, 2238, 859, 859, 0, 0, 0,
	0, 730, 0, 0, 0, 127, 0, 0, 0, 2728,
	0, 0, 1202, 0, 0, 0, 225, 2729, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 1541, 0, 0, 0, 0, 0, 0, 0, 225,
	2123, 0, 0, 0, 0, 129, 0, 225, 0, 0,
	0, 1536, 0, 0, 225, 0, 878, 0, 0, 164,
	0, 0, 0, 0, 0, 1582, 0, 195, 0, 1582,
	0, 0, 0, 0, 2370, 225, 0, 188, 0, 0,
	2765, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	2528, 2528, 2729, 0, 0, 0, 735, 735, 2370, 0,
	0, 2486, 2486, 0, 0, 735, 2370, 1376, 0, 0,
	0, 2729, 2791, 225, 0, 0, 0, 0, 0, 0,
	2238, 0, 2724, 2725, 2726, 0, 0, 2804, 0, 2723,
	2721, 2722, 2714, 2715, 2716, 2717, 2719, 2720, 0, 0,
	0, 1038, 0, 0, 0, 2819, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519,
	1521, 1522, 3337, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2724, 2725, 2726,
	0, 0, 0, 0, 2723, 2721, 2722, 2714, 2715, 2716,
	2717, 2719, 2720, 0, 0, 897, 2724, 2725, 2726, 0,
	0, 0, 0, 2723, 2721, 2722, 2714, 2715, 2716, 2717,
	2719, 2720, 0, 0, 225, 0, 0, 0, 0, 0,
	1246, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 2804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2370, 2370, 2370, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1246, 0, 0, 0, 0,
	0, 0, 0, 2370, 0, 2845, 0, 0, 1246, 1246,
	225, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 225, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2370, 0, 2370, 225, 0, 0, 0, 0,
	0, 95, 0, 95, 0, 0, 0, 0, 2370, 0,
	0, 0, 3466, 0, 2712, 2713, 0, 2730, 2731, 2732,
	0, 225, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 3043, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1217, 0, 0,
	1116, 1246, 0, 0, 0, 0, 0, 0, 0, 2038,
	0, 2042, 0, 0, 0, 95, 0, 0, 2056, 0,
	0, 0, 0, 2727, 0, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	0, 2105, 0, 2107, 2108, 2109, 2110, 0, 0, 0,
	0, 3054, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2134, 0, 0, 3070, 0,
	0, 0, 0, 2370, 0, 2845, 1583, 0, 3552, 0,
	2149, 0, 0, 943, 0, 2718, 225, 0, 0, 0,
	0, 0, 0, 0, 1512, 1513, 2179, 2182, 2185, 2188,
	0, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 0, 0,
	0, 606, 0, 0, 0, 0, 1543, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 226, 226, 226, 2234,
	0, 2245, 2247, 2252, 0, 0, 0, 0, 2733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3552,
	0, 226, 0, 1514, 0, 0, 0, 2370, 0, 0,
	0, 0, 2123, 1534, 0, 0, 0, 3627, 0, 0,
	0, 1531, 226, 0, 2728, 0, 0, 0, 0, 1246,
	0, 0, 0, 1582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3161, 0,
	0, 0, 225, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3075, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 3552, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1542, 1544, 0, 2729, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3466, 0, 0, 0, 1529, 1530, 0,
	0, 1512, 1513, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 1038, 0, 0, 2845, 0, 0, 0, 0,
	0, 0, 0, 1543, 1535, 0, 0, 1038, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1246, 2452, 1246, 2454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 3768, 0, 0,
	1534, 0, 0, 0, 1246, 0, 0, 225, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2724, 2725, 2726, 0, 0, 225, 2370, 2723, 2721,
	2722, 2714, 2715, 2716, 2717, 2719, 2720, 0, 0, 0,
	0, 0, 0, 225, 0, 0, 1541, 0, 0, 0,
	0, 0, 2629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 95, 1536, 0, 95, 3075,
	0, 0, 1537, 1538, 1539, 1540, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 1512, 1513, 0,
	1545, 1546, 1547, 1555, 1556, 1557, 95, 95, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 2576, 1548, 1543,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	1542, 1544, 2370, 1561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2712, 2713, 0, 2730, 2731,
	2732, 0, 0, 3552, 1529, 1530, 1514, 0, 0, 0,
	0, 0, 0, 0, 1565, 1566, 1534, 0, 0, 0,
	0, 0, 0, 0, 1531, 3372, 0, 0, 0, 0,
	1038, 1535, 0, 878, 1246, 0, 2370, 0, 0, 0,
	0, 0, 3380, 0, 0, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0,
	95, 95, 0, 0, 2727, 0, 0, 0, 0, 2623,
	2624, 0, 0, 0, 0, 2630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 1538,
	1539, 1540, 0, 0, 2644, 2645, 0, 0, 1520, 0,
	2149, 0, 0, 0, 0, 0, 0, 0, 0, 2652,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1541, 0, 2666, 0, 1552, 0, 0,
	1562, 0, 0, 2528, 0, 0, 1542, 1544, 0, 0,
	0, 0, 2678, 1536, 0, 2528, 2718, 0, 0, 0,
	0, 1558, 0, 1559, 0, 0, 0, 0, 0, 0,
	1529, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1550, 0, 0, 0,
	1116, 0, 0, 226, 1122, 226, 226, 1535, 1122, 226,
	226, 1122, 0, 0, 0, 0, 0, 0, 0, 2733,
	0, 0, 0, 226, 0, 0, 0, 0, 0, 0,
	3524, 0, 1560, 0, 0, 0, 0, 2252, 2252, 2252,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 1549,
	0, 0, 1654, 0, 0, 2728, 0, 0, 0, 0,
	2769, 0, 0, 0, 0, 0, 0, 1122, 226, 226,
	0, 3524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 1532, 1528, 2063, 1525, 1523, 1524, 1516, 1517,
	1518, 1519, 1521, 1522, 0, 0, 0, 0, 0, 1541,
	0, 226, 226, 226, 0, 0, 226, 1122, 0, 0,
	95, 1122, 0, 0, 0, 1122, 226, 226, 0, 1536,
	0, 0, 0, 0, 0, 1122, 0, 0, 1038, 1038,
	0, 883, 2063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1553, 0, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2729, 1122, 0,
	0, 0, 2862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528,
	0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522,
	0, 0, 135, 0, 2687, 0, 0, 0, 2688, 66,
	0, 43, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 130, 0, 0,
	0, 0, 2724, 2725, 2726, 0, 0, 0, 71, 2723,
	2721, 2722, 2714, 2715, 2716, 2717, 2719, 2720, 61, 0,
	0, 0, 0, 0, 0, 45, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 77, 0, 1038, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 62, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 82, 0, 0,
	95, 133, 0, 0, 0, 0, 0, 0, 46, 0,
	93, 220, 220, 555, 0, 83, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2056, 0, 49, 0, 0, 0,
	3029, 3030, 0, 0, 3033, 0, 0, 0, 3036, 0,
	0, 0, 0, 0, 84, 0, 0, 3040, 0, 226,
	0, 0, 0, 0, 0, 0, 3047, 0, 0, 2769,
	1122, 0, 0, 0, 226, 226, 226, 0, 0, 0,
	0, 226, 0, 0, 3059, 0, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 0, 0, 0, 3082, 3083, 0, 3084, 3085, 3086,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 1122,
	0, 0, 0, 0, 1038, 3092, 0, 0, 0, 3094,
	0, 0, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2712, 2713, 0, 2730, 2731, 2732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3122, 3123, 0, 0, 0, 3042, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 3134, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 53, 160,
	88, 0, 89, 2727, 0, 0, 51, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	95, 0, 0, 0, 194, 0, 0, 0, 0, 0,
	95, 0, 56, 0, 0, 0, 127, 0, 0, 0,
	3173, 0, 1122, 226, 0, 0, 131, 0, 0, 0,
	95, 1122, 0, 0, 0, 3182, 3185, 0, 0, 0,
	0, 0, 196, 0, 0, 1512, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3205, 0, 0, 0, 2718, 129, 1543, 0, 0,
	0, 0, 226, 0, 1515, 0, 226, 0, 0, 0,
	164, 226, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 226,
	0, 226, 0, 226, 1514, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 1534, 0, 0, 0, 2733, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 163, 0,
	0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 0, 0, 0, 1654, 0,
	0, 0, 0, 0, 2728, 0, 0, 3276, 0, 0,
	1122, 0, 1122, 0, 1122, 0, 2622, 0, 0, 0,
	0, 0, 0, 1122, 1122, 0, 0, 1122, 226, 0,
	0, 226, 0, 0, 0, 0, 1537, 1538, 1539, 1540,
	1122, 1122, 1122, 0, 0, 0, 1520, 0, 0, 0,
	0, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 226, 0, 226, 0, 226, 0, 226, 0, 226,
	3315, 3316, 0, 0, 0, 0, 3320, 3321, 0, 0,
	0, 3324, 3325, 0, 1542, 1544, 0, 0, 3329, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 3333,
	226, 0, 0, 2123, 0, 0, 716, 0, 1529, 1530,
	0, 0, 0, 0, 0, 3338, 2729, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 0, 0, 0,
	699, 0, 0, 0, 0, 1535, 0, 0, 224, 224,
	224, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	66, 0, 729, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 700, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 71,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 0, 1113, 0,
	1512, 1513, 0, 0, 1221, 0, 0, 0, 0, 0,
	721, 0, 95, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 1543, 0, 0, 3185, 0, 1541, 703, 1515,
	0, 2724, 2725, 2726, 0, 1122, 0, 0, 2723, 2721,
	2722, 2714, 2715, 2716, 2717, 2719, 2720, 1536, 82, 0,
	704, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 93, 0, 0, 0, 0, 83, 90, 0, 1534,
	705, 0, 0, 706, 0, 0, 1325, 1531, 0, 0,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 0, 0, 0, 1349, 1349, 1349, 0,
	0, 0, 0, 0, 1122, 0, 720, 0, 0, 0,
	0, 1382, 1383, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 0, 3185,
	1122, 0, 0, 0, 0, 0, 95, 0, 0, 95,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 3519, 3520, 3521, 0,
	0, 0, 0, 0, 0, 0, 1532, 1528, 0, 1525,
	1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 2056,
	0, 0, 3530, 3531, 0, 0, 0, 0, 1465, 1542,
	1544, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	3539, 0, 0, 0, 0, 0, 0, 0, 708, 0,
	0, 0, 0, 1529, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 0, 0, 724, 0,
	709, 0, 85, 0, 0, 0, 0, 0, 226, 0,
	1535, 0, 0, 3185, 0, 0, 0, 0, 0, 226,
	0, 3577, 0, 0, 0, 0, 0, 0, 0, 0,
	3584, 628, 226, 883, 0, 0, 0, 0, 710, 3591,
	160, 88, 711, 89, 0, 0, 226, 1122, 718, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 226, 0, 0, 194, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 713, 719, 0, 0, 0, 226,
	0, 0, 0, 714, 0, 0, 226, 0, 0, 0,
	0, 0, 1541, 196, 0, 0, 715, 0, 0, 0,
	0, 722, 3185, 3185, 0, 0, 0, 0, 0, 0,
	0, 0, 1536, 226, 630, 0, 226, 129, 226, 0,
	226, 0, 0, 0, 0, 717, 0, 226, 226, 1122,
	1122, 164, 1122, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 1122, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 226, 0, 3687, 189, 0, 3690,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 0, 226, 0, 0, 0, 0, 0, 3185, 727,
	0, 0, 0, 0, 1692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1701,
	0, 1221, 0, 0, 0, 0, 226, 226, 226, 226,
	0, 226, 0, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3185, 0, 0, 3185, 0,
	0, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 226, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2056, 0, 0, 0, 224, 0, 224, 224, 0,
	0, 224, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 3830, 3830, 3830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 224, 224, 0, 3851, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3830, 1879, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 0, 0, 1512,
	1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0, 0,
	0, 0, 0, 0, 1325, 0, 1905, 0, 1905, 1122,
	0, 1543, 0, 0, 0, 224, 0, 0, 1515, 0,
	0, 0, 0, 0, 3185, 1561, 3185, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 1221, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 1122, 0, 1534, 966,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 0, 0, 0,
	0, 3830, 3957, 1886, 0, 0, 1958, 0, 0, 3961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 1975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1985, 0, 1987, 0,
	1989, 0, 1991, 0, 1992, 0, 0, 0, 0, 0,
	1537, 1538, 1539, 1540, 0, 0, 0, 226, 226, 226,
	1520, 0, 0, 0, 0, 0, 226, 0, 0, 230,
	0, 0, 0, 0, 0, 2010, 0, 0, 0, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 1552,
	0, 0, 1562, 0, 0, 0, 0, 1122, 1542, 1544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	226, 0, 1529, 1530, 0, 0, 0, 0, 226, 0,
	0, 1122, 226, 0, 0, 0, 0, 635, 1550, 0,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 635, 0,
	0, 0, 0, 0, 0, 1676, 0, 1051, 0, 0,
	0, 224, 0, 0, 0, 0, 1055, 226, 226, 0,
	0, 0, 0, 0, 0, 0, 224, 1676, 224, 0,
	0, 0, 0, 643, 1122, 1122, 0, 0, 643, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1541, 0, 0, 0, 0, 1122, 0, 226, 1122,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	0, 0, 1551, 0, 0, 0, 1526, 1527, 1533, 1554,
	1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519,
	1521, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 224, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 224, 0, 224, 0, 0, 0, 0,
	0, 1221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1886, 0, 0, 0, 0, 0,
	0, 2477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 224, 0, 0, 0, 0, 2508, 0,
	0, 1349, 0, 1349, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 643, 224, 0, 224, 0, 224, 0, 224,
	0, 224, 226, 0, 0, 0, 0, 0, 0, 2555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 0, 2563, 226, 2566, 0, 0,
	0, 0, 224, 0, 0, 226, 0, 0, 0, 0,
	1055, 0, 0, 226, 1055, 0, 0, 1055, 0, 0,
	226, 0, 0, 0, 0, 0, 1122, 0, 0, 0,
	0, 2587, 1221, 2589, 1221, 0, 2592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 1122,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 0, 0, 1055, 1122, 0, 0, 2620, 0, 226,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 1122, 0, 1119, 0, 0, 1236, 0, 0,
	0, 0, 0, 1055, 0, 0, 0, 1055, 0, 0,
	0, 1055, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 0, 0, 0, 0, 0, 0, 0, 1236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 1236, 0, 0, 0, 1236, 0, 0,
	0, 1236, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 1236, 1122, 0, 1122, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, 226, 226, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 0, 0, 0, 0, 0, 1122, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 0, 0,
	0, 0, 0, 1122, 226, 0, 0, 0, 1122, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 1122,
	2837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 2875, 2877, 2477, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 224, 1055,
	0, 1055, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 0, 0, 0,
	1122, 0, 0, 0, 0, 224, 0, 0, 224, 0,
	224, 1730, 224, 1122, 0, 0, 0, 0, 0, 224,
	224, 0, 226, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 2933, 0, 0, 0, 2937, 0, 0,
	0, 0, 0, 0, 0, 1055, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 224, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1221, 1221, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 635, 224, 224,
	224, 224, 635, 224, 0, 224, 1122, 2991, 0, 1122,
	0, 0, 0, 0, 1236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 224, 0, 226, 226,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 3015, 0, 1221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 3027, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557,
	0, 0, 0, 226, 0, 0, 1122, 0, 0, 0,
	0, 0, 1548, 1543, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 1561, 0, 0,
	0, 0, 226, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 1122, 0, 1236, 0,
	1514, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	1534, 0, 1122, 0, 0, 0, 0, 0, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 0, 1055, 0,
	1055, 0, 0, 226, 0, 0, 0, 0, 0, 1055,
	1055, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 1055, 1055, 1055, 0,
	1051, 0, 1537, 1538, 1539, 1540, 0, 0, 0, 226,
	0, 0, 1520, 1120, 0, 1051, 0, 1120, 0, 0,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1552, 0, 0, 1562, 1676, 0, 0, 0, 0,
	1542, 1544, 1237, 0, 0, 0, 1236, 0, 1236, 0,
	1236, 0, 0, 0, 0, 1558, 0, 1559, 0, 1236,
	1236, 0, 0, 1236, 1529, 1530, 1237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1236, 1236, 1236, 0,
	1550, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 1535, 1730, 1730, 1055, 0, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1237, 0, 0, 0,
	1237, 0, 0, 0, 1237, 0, 1560, 0, 0, 224,
	224, 224, 0, 0, 1237, 0, 0, 0, 1676, 0,
	0, 2477, 0, 1549, 0, 0, 0, 0, 0, 0,
	3246, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 643, 1541, 1119, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3300, 0, 0, 0, 1051, 0,
	0, 0, 0, 0, 0, 0, 1553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	224, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 224, 0, 1551, 0, 0, 0, 1526, 1527,
	1533, 1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517,
	1518, 1519, 1521, 1522, 0, 0, 0, 0, 2145, 0,
	1119, 1055, 2146, 0, 0, 224, 0, 0, 0, 0,
	0, 1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 1055, 1548, 1543, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 1561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 3420, 0, 0, 0, 0, 0, 0, 0, 0,
	1534, 0, 2477, 1055, 0, 0, 0, 0, 1531, 0,
	0, 1236, 0, 0, 0, 1055, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 2477, 0, 0, 0, 0, 1237, 0, 3481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 1537, 1538, 1539, 1540, 1051, 1051, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 0, 1055, 1055, 0, 1055, 0,
	0, 0, 0, 0, 0, 1236, 0, 0, 0, 0,
	1055, 1552, 0, 0, 1562, 0, 0, 0, 0, 0,
	1542, 1544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1558, 0, 1559, 0, 0,
	0, 0, 0, 0, 1529, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1236, 1236, 3559, 1236, 0,
	0, 0, 0, 0, 0, 0, 1560, 0, 0, 0,
	1236, 1237, 0, 0, 224, 0, 0, 0, 0, 0,
	1120, 0, 0, 1549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3665, 1221, 0, 1553, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 1237, 0, 1237, 0, 0, 0, 0, 0, 0,
	0, 0, 1237, 1237, 0, 0, 1237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	1237, 1237, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1551, 0, 0, 0, 1526, 1527,
	1533, 1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517,
	1518, 1519, 1521, 1522, 0, 0, 0, 3733, 0, 0,
	0, 0, 3343, 0, 1055, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 1051, 0, 0, 0, 0, 0, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 1676, 0, 0, 0, 0, 0, 1055,
	0, 0, 1055, 0, 0, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 1730, 0, 3776, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3800, 224, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 224,
	224, 0, 0, 0, 3812, 0, 0, 1730, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 1119, 0, 1120, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 0,
	0, 1055, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 1120, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 0,
	0, 0, 0, 1236, 0, 0, 0, 0, 0, 0,
	1055, 1055, 0, 0, 0, 1236, 0, 0, 0, 0,
	0, 1119, 0, 0, 224, 0, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1236, 0, 0,
	0, 0, 0, 0, 1237, 0, 0, 0, 1236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1236, 1236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1730,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 0, 1237, 0,
	224, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 1055, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 1730, 1730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1730, 1730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 1513,
	0, 1545, 1546, 1547, 1555, 1556, 1557, 0, 1237, 1237,
	0, 1237, 0, 1730, 0, 224, 1119, 0, 0, 1548,
	1543, 0, 0, 1237, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 1119, 1561, 0, 0, 0, 0, 0,
	1055, 1055, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 0, 0,
	0, 0, 0, 1055, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1548, 1543, 0, 0, 0, 224, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 1561, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 1537,
	1538, 1539, 1540, 0, 0, 0, 0, 0, 1514, 1520,
	0, 224, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 1119, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1552, 0,
	0, 1562, 0, 0, 0, 1055, 0, 1542, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 1730, 0, 0,
	0, 0, 1558, 0, 1559, 0, 0, 0, 0, 0,
	0, 1529, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 0, 0, 1550, 0, 0,
	1537, 1538, 1539, 1540, 0, 0, 0, 1055, 1535, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 1055, 1055, 0, 0, 0,
	0, 0, 0, 1560, 0, 0, 0, 0, 0, 1552,
	1055, 0, 1562, 0, 0, 1236, 1055, 0, 1542, 1544,
	1549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1558, 0, 1559, 0, 0, 1055, 0,
	0, 0, 1529, 1530, 0, 0, 0, 0, 0, 1730,
	0, 0, 1236, 0, 0, 0, 0, 0, 1550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1535,
	1541, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 1236, 1236, 1236, 0, 0, 0,
	1536, 0, 0, 0, 1560, 0, 0, 0, 0, 0,
	1236, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	1120, 1549, 0, 1553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1120, 0, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 1055, 0,
	1055, 1541, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1551, 0, 0, 1553, 1526, 1527, 1533, 1554, 1532,
	1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521,
	1522, 0, 1055, 0, 0, 0, 0, 1055, 0, 3045,
	0, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
	0, 0, 0, 1055, 1055, 0, 1237, 0, 1119, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 1237, 0,
	0, 0, 0, 0, 1120, 0, 0, 1119, 0, 1055,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1237, 1551, 0, 0, 0, 1526, 1527, 1533, 1554,
	1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519,
	1521, 1522, 1119, 0, 0, 1055, 0, 1119, 0, 0,
	2690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1236, 1236, 0, 0, 0, 0, 0,
	0, 0, 0, 1237, 1237, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 1236, 0, 1730, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 1513, 0, 1545, 1546,
	1547, 1555, 1556, 1557, 0, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 1548, 1543, 1120, 1055,
	0, 0, 0, 0, 1515, 1119, 0, 0, 0, 0,
	0, 1561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 1534, 0, 0, 1055, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 1119,
	0, 0, 1055, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 1538, 1539, 1540,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 1730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1552, 0, 0, 1562, 0,
	0, 0, 0, 0, 1542, 1544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1558,
	0, 1559, 1119, 0, 0, 1236, 0, 0, 1529, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1550, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 1535, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1560, 1055, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 1055, 0, 0, 0, 0, 1549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1513, 0, 1545, 1546, 1547,
	1555, 1556, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 1548, 1543, 1541, 0, 0,
	0, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 1536, 1237, 0,
	0, 1236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1236, 1236, 1514, 0, 0, 0, 0, 0, 0,
	1553, 0, 0, 1534, 0, 0, 0, 0, 1236, 0,
	0, 1531, 0, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 1237, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1237, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 1551, 0,
	0, 1120, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525,
	1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0,
	0, 0, 0, 0, 1552, 0, 2689, 1562, 779, 0,
	816, 0, 0, 1542, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	1559, 0, 0, 786, 0, 0, 0, 1529, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 798,
	784, 0, 0, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 0, 0, 788,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 1560,
	0, 661, 795, 796, 0, 0, 0, 0, 809, 0,
	0, 1120, 0, 1120, 0, 0, 1549, 0, 0, 0,
	0, 0, 817, 790, 0, 0, 0, 0, 0, 0,
	1120, 0, 0, 0, 0, 662, 0, 680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	0, 663, 0, 0, 664, 0, 1541, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	1120, 687, 0, 0, 0, 0, 1536, 665, 0, 0,
	0, 0, 791, 0, 0, 0, 1237, 1237, 0, 685,
	783, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 793,
	0, 666, 1120, 0, 0, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 0, 800, 799, 0, 0, 0,
	0, 667, 0, 794, 668, 0, 806, 0, 0, 689,
	0, 0, 0, 629, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1551, 1120, 0,
	0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 688,
	0, 0, 0, 0, 789, 2686, 0, 0, 671, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1120,
	0, 787, 0, 0, 0, 813, 814, 0, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 672,
	0, 807, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 804, 0, 0, 781, 0, 819, 0, 0, 0,
	1120, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 782, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 802, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 659, 681, 0, 1120, 808, 0, 1237, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 675, 0, 0, 692, 812,
	691, 0, 0, 0, 676, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 677, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 693, 0, 690,
	0, 0, 0, 0, 0, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 1237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1237, 1237, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 1123, 240, 241, 1124, 1125,
	1126, 1237, 1127, 502, 1128, 1129, 1130, 1131, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 1132, 250, 251, 252, 253, 254, 1133, 1134, 0,
	255, 507, 508, 509, 1135, 256, 257, 510, 1136, 1203,
	1137, 258, 259, 260, 261, 262, 263, 264, 0, 1138,
	266, 267, 268, 265, 1139, 269, 0, 270, 271, 272,
	1140, 273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145,
	1146, 1147, 276, 277, 278, 279, 0, 280, 511, 512,
	1148, 284, 281, 282, 1149, 285, 283, 1150, 286, 287,
	1151, 1152, 288, 289, 290, 1153, 291, 292, 1154, 293,
	294, 1155, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 1156, 231, 1157,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 1158, 312, 1159, 1160, 997, 313, 314, 517,
	518, 315, 316, 1161, 317, 519, 1162, 520, 318, 1163,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 999,
	324, 325, 1164, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 1165, 998, 332, 524, 525, 1166,
	526, 1167, 334, 1000, 527, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 1168,
	345, 344, 1169, 346, 528, 1003, 347, 348, 1004, 1170,
	349, 350, 351, 1171, 1172, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 1173, 233, 1007, 375, 1174, 529, 376, 530,
	378, 379, 1175, 0, 380, 0, 1176, 1177, 382, 383,
	384, 1178, 1179, 385, 386, 531, 1008, 387, 1009, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	1180, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	1181, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 1182, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	1183, 422, 423, 424, 1010, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 1184, 443, 444, 442, 445, 446, 447, 1185, 448,
	432, 433, 449, 450, 1011, 451, 452, 539, 0, 453,
	1186, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 1187, 465, 466, 0, 464, 1188,
	467, 468, 469, 470, 471, 472, 302, 473, 1189, 474,
	542, 543, 544, 545, 1190, 481, 1191, 475, 476, 546,
	477, 547, 1192, 478, 479, 480, 0, 482, 483, 1193,
	1194, 484, 485, 486, 488, 489, 487, 490, 1195, 491,
	1196, 0, 492, 493, 494, 548, 549, 550, 1197, 496,
	495, 551, 1198, 1199, 1200, 1201, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 0, 0,
	0, 0, 0, 2286, 0, 0, 0, 0, 0, 0,
	0, 2287, 234, 235, 236, 237, 238, 239, 1123, 240,
	241, 1124, 1125, 1126, 0, 1127, 502, 1128, 1129, 1130,
	1131, 242, 243, 245, 244, 246, 247, 248, 503, 504,
	0, 505, 249, 506, 1132, 250, 251, 252, 253, 254,
	1133, 1134, 0, 255, 507, 508, 509, 1135, 256, 257,
	510, 1136, 1203, 1137, 258, 259, 260, 261, 262, 263,
	264, 0, 1138, 266, 267, 268, 265, 1139, 269, 0,
	270, 271, 272, 1140, 273, 996, 274, 275, 1141, 1142,
	1144, 1143, 1145, 1146, 1147, 276, 277, 278, 279, 0,
	280, 511, 512, 1148, 284, 281, 282, 1149, 285, 283,
	1150, 286, 287, 1151, 1152, 288, 289, 290, 1153, 291,
	292, 1154, 293, 294, 1155, 295, 296, 513, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 514, 515,
	1156, 231, 1157, 0, 0, 0, 0, 308, 309, 310,
	516, 0, 0, 0, 311, 1158, 312, 1159, 1160, 997,
	313, 314, 517, 518, 315, 316, 1161, 317, 519, 1162,
	520, 318, 1163, 319, 320, 321, 322, 323, 521, 522,
	523, 377, 999, 324, 325, 1164, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 1165, 998, 332,
	524, 525, 1166, 526, 1167, 334, 1000, 527, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 1168, 345, 344, 1169, 346, 528, 1003, 347,
	348, 1004, 1170, 349, 350, 351, 1171, 1172, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 1173, 233, 1007, 375, 1174,
	529, 376, 530, 378, 379, 1175, 0, 380, 0, 1176,
	1177, 382, 383, 384, 1178, 1179, 385, 386, 531, 1008,
	387, 1009, 532, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 1180, 397, 398, 533, 534, 535, 399,
	536, 400, 401, 1181, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 537, 411, 410, 412, 1182, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 1183, 422, 423, 424, 1010, 425, 426,
	427, 428, 538, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 1184, 443, 444, 442, 445, 446,
	447, 1185, 448, 432, 433, 449, 450, 1011, 451, 452,
	539, 0, 453, 1186, 454, 455, 456, 457, 434, 458,
	463, 540, 459, 460, 461, 462, 541, 1187, 465, 466,
	0, 464, 1188, 467, 468, 469, 470, 471, 472, 302,
	473, 1189, 474, 542, 543, 544, 545, 1190, 481, 1191,
	475, 476, 546, 477, 547, 1192, 478, 479, 480, 0,
	482, 483, 1193, 1194, 484, 485, 486, 488, 489, 487,
	490, 1195, 491, 1196, 0, 492, 493, 494, 548, 549,
	550, 1197, 496, 495, 551, 1198, 1199, 1200, 1201, 497,
	498, 552, 499, 500, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 3053, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3055, 234, 235, 236, 237, 238, 239, 1123,
	240, 241, 1124, 1125, 1126, 0, 1127, 502, 1128, 1129,
	1130, 1131, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 1132, 250, 251, 252, 253,
	254, 1133, 1134, 0, 255, 507, 508, 509, 1135, 256,
	257, 510, 1136, 1203, 1137, 258, 259, 260, 261, 262,
	263, 264, 0, 1138, 266, 267, 268, 265, 1139, 269,
	0, 270, 271, 272, 1140, 273, 996, 274, 275, 1141,
	1142, 1144, 1143, 1145, 1146, 1147, 276, 277, 278, 279,
	0, 280, 511, 512, 1148, 284, 281, 282, 1149, 285,
	283, 1150, 286, 287, 1151, 1152, 288, 289, 290, 1153,
	291, 292, 1154, 293, 294, 1155, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 1156, 231, 1157, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 1158, 312, 1159, 1160,
	997, 313, 314, 517, 518, 315, 316, 1161, 317, 519,
	1162, 520, 318, 1163, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 999, 324, 325, 1164, 326, 327, 328,
	329, 0, 0, 0, 232, 330, 331, 333, 1165, 998,
	332, 524, 525, 1166, 526, 1167, 334, 1000, 527, 1001,
	335, 336, 337, 1002, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 1168, 345, 344, 1169, 346, 528, 1003,
	347, 348, 1004, 1170, 349, 350, 351, 1171, 1172, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 1005, 368, 369,
	370, 373, 374, 372, 1006, 371, 1173, 233, 1007, 375,
	1174, 529, 376, 530, 378, 379, 1175, 0, 380, 0,
	1176, 1177, 382, 383, 384, 1178, 1179, 385, 386, 531,
	1008, 387, 1009, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 1180, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 1181, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 1182, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 1183, 422, 423, 424, 1010, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 1184, 443, 444, 442, 445,
	446, 447, 1185, 448, 432, 433, 449, 450, 1011, 451,
	452, 539, 0, 453, 1186, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 1187, 465,
	466, 0, 464, 1188, 467, 468, 469, 470, 471, 472,
	302, 473, 1189, 474, 542, 543, 544, 545, 1190, 481,
	1191, 475, 476, 546, 477, 547, 1192, 478, 479, 480,
	0, 482, 483, 1193, 1194, 484, 485, 486, 488, 489,
	487, 490, 1195, 491, 1196, 0, 492, 493, 494, 548,
	549, 550, 1197, 496, 495, 551, 1198, 1199, 1200, 1201,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3371, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3525, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3427, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3301, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3071, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2919, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2169, 234, 235,
	236, 237, 238, 239, 1123, 240, 241, 1124, 1125, 1126,
	0, 1127, 502, 1128, 1129, 1130, 1131, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	1132, 250, 251, 252, 253, 254, 1133, 1134, 0, 255,
	507, 508, 509, 1135, 256, 257, 510, 1136, 1203, 1137,
	258, 259, 260, 261, 262, 263, 264, 0, 1138, 266,
	267, 268, 265, 1139, 269, 0, 270, 271, 272, 1140,
	273, 996, 274, 275, 1141, 1142, 1144, 1143, 1145, 1146,
	1147, 276, 277, 278, 279, 0, 280, 511, 512, 1148,
	284, 281, 282, 1149, 285, 283, 1150, 286, 287, 1151,
	1152, 288, 289, 290, 1153, 291, 292, 1154, 293, 294,
	1155, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 1156, 231, 1157, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 1158, 312, 1159, 1160, 997, 313, 314, 517, 518,
	315, 316, 1161, 317, 519, 1162, 520, 318, 1163, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 999, 324,
	325, 1164, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 1165, 998, 332, 524, 525, 1166, 526,
	1167, 334, 1000, 527, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1168, 345,
	344, 1169, 346, 528, 1003, 347, 348, 1004, 1170, 349,
	350, 351, 1171, 1172, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 1173, 233, 1007, 375, 1174, 529, 376, 530, 378,
	379, 1175, 0, 380, 0, 1176, 1177, 382, 383, 384,
	1178, 1179, 385, 386, 531, 1008, 387, 1009, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 1180,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 1181,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 1182, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 1183,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	1184, 443, 444, 442, 445, 446, 447, 1185, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 1186,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 1187, 465, 466, 0, 464, 1188, 467,
	468, 469, 470, 471, 472, 302, 473, 1189, 474, 542,
	543, 544, 545, 1190, 481, 1191, 475, 476, 546, 477,
	547, 1192, 478, 479, 480, 0, 482, 483, 1193, 1194,
	484, 485, 486, 488, 489, 487, 490, 1195, 491, 1196,
	0, 492, 493, 494, 548, 549, 550, 1197, 496, 495,
	551, 1198, 1199, 1200, 1201, 497, 498, 552, 499, 500,
	501, 1215, 0, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1861, 0, 0,
	234, 235, 236, 237, 238, 239, 1123, 240, 241, 1124,
	1125, 1126, 0, 1127, 502, 1128, 1129, 1130, 1131, 242,
	243, 245, 244, 246, 247, 248, 503, 504, 0, 505,
	249, 506, 1132, 250, 251, 252, 253, 254, 1133, 1134,
	0, 255, 507, 508, 509, 1135, 256, 257, 510, 1136,
	1203, 1137, 258, 259, 260, 261, 262, 263, 264, 0,
	1138, 266, 267, 268, 265, 1139, 269, 0, 270, 271,
	272, 1140, 273, 996, 274, 275, 1141, 1142, 1144, 1143,
	1145, 1146, 1147, 276, 277, 278, 279, 0, 280, 511,
	512, 1148, 284, 281, 282, 1149, 285, 283, 1150, 286,
	287, 1151, 1152, 288, 289, 290, 1153, 291, 292, 1154,
	293, 294, 1155, 295, 296, 513, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 514, 515, 1156, 231,
	1157, 0, 0, 0, 0, 308, 309, 310, 516, 0,
	0, 0, 311, 1158, 312, 1159, 1160, 997, 313, 314,
	517, 518, 315, 316, 1161, 317, 519, 1162, 520, 318,
	1163, 319, 320, 321, 322, 323, 521, 522, 523, 377,
	999, 324, 325, 1164, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 1165, 998, 332, 524, 525,
	1166, 526, 1167, 334, 1000, 527, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	1168, 345, 344, 1169, 346, 528, 1003, 347, 348, 1004,
	1170, 349, 350, 351, 1171, 1172, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 1173, 233, 1007, 375, 1174, 529, 376,
	530, 378, 379, 1175, 0, 380, 0, 1176, 1177, 382,
	383, 384, 1178, 1179, 385, 386, 531, 1008, 387, 1009,
	532, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 1180, 397, 398, 533, 534, 535, 399, 536, 400,
	401, 1181, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 537, 411, 410, 412, 1182, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 1183, 422, 423, 424, 1010, 425, 426, 427, 428,
	538, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 1184, 443, 444, 442, 445, 446, 447, 1185,
	448, 432, 433, 449, 450, 1011, 451, 452, 539, 0,
	453, 1186, 454, 455, 456, 457, 434, 458, 463, 540,
	459, 460, 461, 462, 541, 1187, 465, 466, 0, 464,
	1188, 467, 468, 469, 470, 471, 472, 302, 473, 1189,
	474, 542, 543, 544, 545, 1190, 481, 1191, 475, 476,
	546, 477, 547, 1192, 478, 479, 480, 0, 482, 483,
	1193, 1194, 484, 485, 486, 488, 489, 487, 490, 1195,
	491, 1196, 0, 492, 493, 494, 548, 549, 550, 1197,
	496, 495, 551, 1198, 1199, 1200, 1201, 497, 498, 552,
	499, 500, 501, 1114, 0, 1117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 1123, 240,
	241, 1124, 1125, 1126, 0, 1127, 502, 1128, 1129, 1130,
	1131, 242, 243, 245, 244, 246, 247, 248, 503, 504,
	0, 505, 249, 506, 1132, 250, 251, 252, 253, 254,
	1133, 1134, 0, 255, 507, 508, 509, 1135, 256, 257,
	510, 1136, 1203, 1137, 258, 259, 260, 261, 262, 263,
	264, 0, 1138, 266, 267, 268, 265, 1139, 269, 0,
	270, 271, 272, 1140, 273, 996, 274, 275, 1141, 1142,
	1144, 1143, 1145, 1146, 1147, 276, 277, 278, 279, 0,
	280, 511, 512, 1148, 284, 281, 282, 1149, 285, 283,
	1150, 286, 287, 1151, 1152, 288, 289, 290, 1153, 291,
	292, 1154, 293, 294, 1155, 295, 296, 513, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 514, 515,
	1156, 231, 1157, 0, 0, 0, 0, 308, 309, 310,
	516, 0, 0, 0, 311, 1158, 312, 1159, 1160, 997,
	313, 314, 517, 518, 315, 316, 1161, 317, 519, 1162,
	520, 318, 1163, 319, 320, 321, 322, 323, 521, 522,
	523, 377, 999, 324, 325, 1164, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 1165, 998, 332,
	524, 525, 1166, 526, 1167, 334, 1000, 527, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 1168, 345, 344, 1169, 346, 528, 1003, 347,
	348, 1004, 1170, 349, 350, 351, 1171, 1172, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 1173, 233, 1007, 375, 1174,
	529, 376, 530, 378, 379, 1175, 0, 380, 0, 1176,
	1177, 382, 383, 384, 1178, 1179, 385, 386, 531, 1008,
	387, 1009, 532, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 1180, 397, 398, 533, 534, 535, 399,
	536, 400, 401, 1181, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 537, 411, 410, 412, 1182, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 1183, 422, 423, 424, 1010, 425, 426,
	427, 428, 538, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 1184, 443, 444, 442, 445, 446,
	447, 1185, 448, 432, 433, 449, 450, 1011, 451, 452,
	539, 0, 453, 1186, 454, 455, 456, 457, 434, 458,
	463, 540, 459, 460, 461, 462, 541, 1187, 465, 466,
	0, 464, 1188, 467, 468, 469, 470, 471, 472, 302,
	473, 1189, 474, 542, 543, 544, 545, 1190, 481, 1191,
	475, 476, 546, 477, 547, 1192, 478, 479, 480, 0,
	482, 483, 1193, 1194, 484, 485, 486, 488, 489, 487,
	490, 1195, 491, 1196, 0, 492, 493, 494, 548, 549,
	550, 1197, 496, 495, 551, 1198, 1199, 1200, 1201, 497,
	498, 552, 499, 500, 501, 1117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 1123, 240,
	241, 1124, 1125, 1126, 0, 1127, 502, 1128, 1129, 1130,
	1131, 242, 243, 245, 244, 246, 247, 248, 503, 504,
	0, 505, 249, 506, 1132, 250, 251, 252, 253, 254,
	1133, 1134, 0, 255, 507, 508, 509, 1135, 256, 257,
	510, 1136, 1203, 1137, 258, 259, 260, 261, 262, 263,
	264, 0, 1138, 266, 267, 268, 265, 1139, 269, 0,
	270, 271, 272, 1140, 273, 996, 274, 275, 1141, 1142,
	1144, 1143, 1145, 1146, 1147, 276, 277, 278, 279, 0,
	280, 511, 512, 1148, 284, 281, 282, 1149, 285, 283,
	1150, 286, 287, 1151, 1152, 288, 289, 290, 1153, 291,
	292, 1154, 293, 294, 1155, 295, 296, 513, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 514, 515,
	1156, 231, 1157, 0, 0, 0, 0, 308, 309, 310,
	516, 0, 0, 0, 311, 1158, 312, 1159, 1160, 997,
	313, 314, 517, 518, 315, 316, 1161, 317, 519, 1162,
	520, 318, 1163, 319, 320, 321, 322, 323, 521, 522,
	523, 377, 999, 324, 325, 1164, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 1165, 998, 332,
	524, 525, 1166, 526, 1167, 334, 1000, 527, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 1168, 345, 344, 1169, 346, 528, 1003, 347,
	348, 1004, 1170, 349, 350, 351, 1171, 1172, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 1173, 233, 1007, 375, 1174,
	529, 376, 530, 378, 379, 1175, 0, 380, 0, 1176,
	1177, 382, 383, 384, 1178, 1179, 385, 386, 531, 1008,
	387, 1009, 532, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 1180, 397, 398, 533, 534, 535, 399,
	536, 400, 401, 1181, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 537, 411, 410, 412, 1182, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 1183, 422, 423, 424, 1010, 425, 426,
	427, 428, 538, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 1184, 443, 444, 442, 445, 446,
	447, 1185, 448, 432, 433, 449, 450, 1011, 451, 452,
	539, 0, 453, 1186, 454, 455, 456, 457, 434, 458,
	463, 540, 459, 460, 461, 462, 541, 1187, 465, 466,
	0, 464, 1188, 467, 468, 469, 470, 471, 472, 302,
	473, 1189, 474, 542, 543, 544, 545, 1190, 481, 1191,
	475, 476, 546, 477, 547, 1192, 478, 479, 480, 0,
	482, 483, 1193, 1194, 484, 485, 486, 488, 489, 487,
	490, 1195, 491, 1196, 0, 492, 493, 494, 548, 549,
	550, 1197, 496, 495, 551, 1198, 1199, 1200, 1201, 497,
	498, 552, 499, 500, 501, 2144, 0, 933, 905, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	2141, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 2142, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 2140, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 2143, 0, 0, 0, 0, 0, 0,
	917, 2139, 0, 879, 915, 933, 905, 906, 907, 903,
	904, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 233, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 194, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 196, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 1374, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 188, 497,
	498, 552, 499, 500, 501, 892, 189, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 933, 905, 906, 907, 903, 904, 916, 1587, 1585,
	0, 0, 915, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	194, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 196, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 1374, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 188, 497, 498, 552, 499, 500,
	501, 892, 189, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 886, 887, 933, 905, 906,
	907, 903, 904, 916, 1587, 2642, 0, 0, 915, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 194, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 196, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	1374, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	188, 497, 498, 552, 499, 500, 501, 892, 189, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 933, 905, 906, 907, 903, 904, 916,
	1587, 1585, 0, 0, 915, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 2248, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 2253, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 2249, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 2250, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 2189,
	915, 933, 905, 906, 907, 903, 904, 916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 0, 497, 498, 552, 499, 500,
	501, 892, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 917, 2187, 0, 2186, 915, 933,
	905, 906, 907, 903, 904, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 271, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 280, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	322, 323, 958, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 360, 365, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 0, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 441, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 500, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 0, 0, 0, 0, 0,
	0, 0, 917, 2184, 0, 2183, 915, 933, 905, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 0, 0, 0, 0, 0, 0, 0,
	917, 2181, 0, 2180, 915, 933, 905, 906, 907, 903,
	904, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 233, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 548, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 0, 497,
	498, 552, 499, 500, 501, 892, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 0, 0, 0, 0, 0, 0, 0, 917, 2178,
	0, 1445, 915, 933, 905, 906, 907, 903, 904, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 1444, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 882,
	915, 933, 905, 906, 907, 903, 904, 916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 896, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 0, 497, 498, 552, 499, 500,
	501, 892, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 886, 887, 933, 905, 906,
	907, 903, 904, 916, 917, 0, 0, 0, 915, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 3788, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 896, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 933, 905, 906, 907, 903, 904, 916,
	917, 0, 0, 0, 915, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 2058, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 2057, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 933,
	905, 906, 907, 903, 904, 916, 917, 0, 0, 0,
	915, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 3587, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 280, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	322, 323, 958, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 360, 365, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 896, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 441, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 500, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 933, 905, 906, 907, 903,
	904, 916, 917, 0, 0, 0, 915, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 3270, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 548, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 0, 497,
	498, 552, 499, 500, 501, 892, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 1655, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 915, 933, 905, 906, 907, 903, 904, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 3049,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 933,
	905, 906, 907, 903, 904, 916, 917, 0, 0, 0,
	915, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 271, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 280, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	322, 323, 958, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 360, 365, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 896, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 441, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 500, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 933, 905, 906, 907, 903,
	904, 916, 917, 0, 0, 0, 915, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 233, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 548, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 0, 497,
	498, 552, 499, 500, 501, 892, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 1655, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 915, 933, 905, 906, 907, 903, 904, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 2253, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 933,
	905, 906, 907, 903, 904, 916, 917, 0, 0, 0,
	915, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 271, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 280, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	322, 323, 958, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 360, 365, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 0, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 441, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 500, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 0, 0, 0, 0, 0,
	0, 0, 917, 1585, 0, 2258, 915, 933, 905, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 2256, 915, 933, 905, 906, 907, 903,
	904, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 233, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 548, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 0, 497,
	498, 552, 499, 500, 501, 892, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 0, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 2244, 915, 933, 905, 906, 907, 903, 904, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 2233,
	915, 933, 905, 906, 907, 903, 904, 916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 0, 497, 498, 552, 499, 500,
	501, 892, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 2231, 915, 2222,
	2229, 906, 907, 903, 904, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 271, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 2225, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	2226, 323, 958, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 2227, 2224, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 0, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 2228, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 2223, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 2219, 915, 2222, 2229, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 2225, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 2226, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	2227, 2224, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 2228, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 2223, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 933, 905, 906, 907, 903, 904, 916,
	917, 0, 0, 0, 915, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 482, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 0,
	0, 0, 0, 0, 1593, 0, 917, 0, 0, 0,
	915, 933, 905, 906, 907, 903, 904, 916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 2037, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 0, 497, 498, 552, 499, 500,
	501, 892, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 1260, 915, 933,
	905, 906, 907, 903, 904, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 271, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 280, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	322, 323, 1259, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 360, 365, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 0, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 441, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 500, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 1254, 915, 933, 905, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	1253, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 1249, 915, 933, 905, 906, 907, 903,
	904, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 233, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 548, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 0, 497,
	498, 552, 499, 500, 501, 892, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 933, 905, 906, 907, 903, 904, 916, 917, 0,
	0, 0, 915, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 0, 497, 498, 552, 499, 500,
	501, 892, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 886, 887, 933, 905, 906,
	907, 903, 904, 916, 917, 0, 0, 0, 915, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 3829,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 3828, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 892, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 886, 887, 933, 905, 906, 907, 903, 904, 916,
	917, 0, 0, 0, 915, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 957, 921, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 3827, 970, 0, 977,
	249, 976, 0, 250, 251, 252, 253, 254, 923, 956,
	890, 255, 1015, 1016, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 3829, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 980, 280, 974,
	973, 894, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 965, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 900, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 912, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 972, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	985, 986, 315, 316, 0, 317, 994, 0, 922, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 967, 968,
	0, 928, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 891, 233, 1007, 375, 913, 961, 376,
	975, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 971, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	901, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 969, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 1014,
	459, 460, 461, 462, 991, 0, 465, 466, 889, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 981, 982, 983, 984, 0, 481, 0, 475, 476,
	992, 477, 993, 911, 478, 479, 480, 0, 3828, 483,
	0, 895, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 978, 1013, 0,
	496, 495, 551, 0, 0, 0, 0, 497, 498, 552,
	499, 500, 501, 892, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 886, 887, 933,
	905, 906, 907, 2609, 2610, 916, 917, 0, 0, 0,
	915, 0, 0, 0, 0, 0, 234, 235, 236, 237,
	238, 239, 0, 240, 241, 0, 0, 0, 0, 0,
	957, 921, 0, 0, 0, 242, 243, 245, 244, 246,
	247, 248, 503, 970, 0, 977, 249, 976, 0, 250,
	251, 252, 253, 254, 923, 956, 890, 255, 1015, 1016,
	509, 0, 256, 257, 963, 0, 944, 0, 258, 259,
	260, 261, 262, 263, 264, 0, 0, 266, 267, 268,
	265, 0, 269, 0, 270, 271, 272, 0, 273, 996,
	274, 275, 947, 945, 946, 953, 949, 948, 952, 276,
	277, 278, 279, 980, 280, 974, 973, 894, 284, 281,
	282, 0, 285, 283, 0, 286, 287, 0, 0, 288,
	965, 290, 0, 291, 292, 0, 293, 294, 0, 295,
	296, 900, 297, 298, 299, 301, 303, 300, 304, 305,
	306, 307, 987, 988, 912, 231, 0, 0, 0, 0,
	0, 308, 309, 310, 972, 0, 0, 0, 311, 0,
	312, 0, 0, 997, 313, 314, 985, 986, 315, 316,
	0, 317, 994, 0, 922, 318, 0, 319, 320, 321,
	322, 323, 958, 959, 962, 377, 999, 324, 325, 0,
	326, 327, 328, 329, 0, 0, 0, 232, 330, 331,
	333, 0, 998, 332, 967, 968, 0, 928, 0, 334,
	1000, 960, 1001, 335, 336, 337, 1002, 338, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 345, 344, 0,
	346, 995, 1003, 347, 348, 1004, 0, 349, 350, 351,
	951, 950, 352, 353, 354, 355, 0, 356, 357, 359,
	361, 358, 360, 365, 362, 363, 364, 367, 0, 366,
	1005, 368, 369, 370, 373, 374, 372, 1006, 371, 891,
	233, 1007, 375, 913, 961, 376, 975, 378, 379, 0,
	0, 380, 0, 0, 0, 382, 383, 384, 0, 0,
	385, 386, 531, 1008, 387, 1009, 989, 388, 389, 381,
	390, 391, 392, 393, 394, 395, 396, 0, 397, 398,
	533, 534, 990, 399, 536, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 971, 411, 410,
	412, 0, 0, 0, 0, 0, 0, 413, 0, 415,
	416, 417, 414, 418, 419, 420, 421, 0, 422, 423,
	424, 1010, 425, 426, 427, 428, 901, 429, 0, 430,
	435, 436, 431, 437, 438, 439, 440, 441, 0, 443,
	444, 442, 445, 446, 447, 954, 448, 432, 433, 449,
	450, 1011, 451, 452, 969, 0, 453, 0, 454, 455,
	456, 457, 434, 458, 463, 1014, 459, 460, 461, 462,
	991, 0, 465, 466, 889, 464, 0, 467, 468, 469,
	470, 471, 472, 302, 473, 0, 474, 981, 982, 983,
	984, 0, 481, 0, 475, 476, 992, 477, 993, 911,
	478, 479, 480, 0, 482, 483, 0, 895, 484, 485,
	486, 488, 489, 487, 490, 955, 491, 0, 0, 492,
	493, 494, 548, 978, 1013, 0, 496, 495, 551, 0,
	0, 0, 0, 497, 498, 552, 499, 500, 501, 892,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 886, 887, 933, 905, 906, 907, 2607,
	2608, 916, 917, 0, 0, 0, 915, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 0, 957, 921, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 970,
	0, 977, 249, 976, 0, 250, 251, 252, 253, 254,
	923, 956, 890, 255, 1015, 1016, 509, 0, 256, 257,
	963, 0, 944, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 996, 274, 275, 947, 945,
	946, 953, 949, 948, 952, 276, 277, 278, 279, 980,
	280, 974, 973, 894, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 965, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 900, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 987, 988,
	912, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	972, 0, 0, 0, 311, 0, 312, 0, 0, 997,
	313, 314, 985, 986, 315, 316, 0, 317, 994, 0,
	922, 318, 0, 319, 320, 321, 322, 323, 958, 959,
	962, 377, 999, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 998, 332,
	967, 968, 0, 928, 0, 334, 1000, 960, 1001, 335,
	336, 337, 1002, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 995, 1003, 347,
	348, 1004, 0, 349, 350, 351, 951, 950, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 1005, 368, 369, 370,
	373, 374, 372, 1006, 371, 891, 233, 1007, 375, 913,
	961, 376, 975, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 1008,
	387, 1009, 989, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 990, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 971, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 1010, 425, 426,
	427, 428, 901, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 954, 448, 432, 433, 449, 450, 1011, 451, 452,
	969, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 1014, 459, 460, 461, 462, 991, 0, 465, 466,
	889, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 981, 982, 983, 984, 0, 481, 0,
	475, 476, 992, 477, 993, 911, 478, 479, 480, 0,
	482, 483, 0, 895, 484, 485, 486, 488, 489, 487,
	490, 955, 491, 0, 0, 492, 493, 494, 548, 978,
	1013, 0, 496, 495, 551, 0, 0, 0, 0, 497,
	498, 552, 499, 500, 501, 892, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 886,
	887, 933, 905, 906, 907, 903, 904, 916, 917, 0,
	0, 0, 915, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 0, 957, 921, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 970, 0, 977, 249, 976,
	0, 250, 251, 252, 253, 254, 923, 956, 890, 255,
	1015, 1016, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 980, 280, 974, 973, 894,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 965, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 900, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 912, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 972, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 985, 986,
	315, 316, 0, 317, 994, 0, 922, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 967, 968, 0, 928,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 891, 233, 1007, 375, 913, 961, 376, 975, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 971,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 901, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 969, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 1014, 459, 460,
	461, 462, 991, 0, 465, 466, 889, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 981,
	982, 983, 984, 0, 481, 0, 475, 476, 992, 477,
	993, 911, 478, 479, 480, 0, 482, 483, 0, 895,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 978, 1013, 0, 496, 495,
	551, 0, 0, 0, 0, 497, 498, 552, 499, 500,
	501, 892, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 2045, 2046, 933, 905, 906,
	907, 903, 904, 916, 917, 0, 0, 0, 915, 0,
	0, 0, 0, 0, 234, 235, 236, 237, 238, 239,
	0, 240, 241, 0, 0, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 0, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 0, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 0, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 0, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 0, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 933, 905, 906,
	907, 903, 904, 916, 2241, 0, 0, 0, 0, 0,
	0, 2239, 2240, 0, 234, 235, 236, 237, 238, 239,
	917, 240, 241, 0, 915, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 0, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 0, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 0, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 2602, 2603, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 0, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 0, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 933, 905, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 1786, 1787, 0, 234, 235, 236, 237, 238, 239,
	917, 240, 241, 0, 915, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	0, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 923, 956, 890, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 3829,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 894, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 900,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 0, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 0, 960,
	0, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 0, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 891, 233, 0,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 0,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 889, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 3828, 483, 0, 895, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 0, 0,
	0, 497, 498, 552, 499, 500, 501, 933, 905, 906,
	907, 903, 904, 916, 0, 0, 0, 0, 0, 0,
	0, 886, 887, 0, 234, 235, 236, 237, 238, 239,
	917, 240, 241, 0, 915, 0, 0, 0, 957, 921,
	0, 0, 0, 242, 243, 245, 244, 246, 247, 248,
	503, 970, 0, 977, 249, 976, 0, 250, 251, 252,
	253, 254, 0, 956, 0, 255, 1015, 1016, 509, 0,
	256, 257, 963, 0, 944, 0, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 266, 267, 268, 265, 0,
	269, 0, 270, 271, 272, 0, 273, 996, 274, 275,
	947, 945, 946, 953, 949, 948, 952, 276, 277, 278,
	279, 980, 280, 974, 973, 0, 284, 281, 282, 0,
	285, 283, 0, 286, 287, 0, 0, 288, 965, 290,
	0, 291, 292, 0, 293, 294, 0, 295, 296, 513,
	297, 298, 299, 301, 303, 300, 304, 305, 306, 307,
	987, 988, 912, 231, 0, 0, 0, 0, 0, 308,
	309, 310, 972, 0, 0, 0, 311, 0, 312, 0,
	0, 997, 313, 314, 985, 986, 315, 316, 0, 317,
	994, 0, 922, 318, 0, 319, 320, 321, 322, 323,
	958, 959, 962, 377, 999, 324, 325, 0, 326, 327,
	328, 329, 0, 0, 0, 232, 330, 331, 333, 0,
	998, 332, 967, 968, 0, 928, 0, 334, 1000, 960,
	1001, 335, 336, 337, 1002, 338, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 345, 344, 0, 346, 995,
	1003, 347, 348, 1004, 0, 349, 350, 351, 951, 950,
	352, 353, 354, 355, 0, 356, 357, 359, 361, 358,
	360, 365, 362, 363, 364, 367, 0, 366, 1005, 368,
	369, 370, 373, 374, 372, 1006, 371, 0, 233, 1007,
	375, 913, 961, 376, 975, 378, 379, 0, 0, 380,
	0, 0, 0, 382, 383, 384, 0, 0, 385, 386,
	531, 1008, 387, 1009, 989, 388, 389, 381, 390, 391,
	392, 393, 394, 395, 396, 0, 397, 398, 533, 534,
	990, 399, 536, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 407, 408, 409, 971, 411, 410, 412, 0,
	0, 0, 0, 0, 0, 413, 0, 415, 416, 417,
	414, 418, 419, 420, 421, 0, 422, 423, 424, 1010,
	425, 426, 427, 428, 901, 429, 0, 430, 435, 436,
	431, 437, 438, 439, 440, 441, 0, 443, 444, 442,
	445, 446, 447, 954, 448, 432, 433, 449, 450, 1011,
	451, 452, 969, 0, 453, 0, 454, 455, 456, 457,
	434, 458, 463, 1014, 459, 460, 461, 462, 991, 0,
	465, 466, 0, 464, 0, 467, 468, 469, 470, 471,
	472, 302, 473, 0, 474, 981, 982, 983, 984, 0,
	481, 0, 475, 476, 992, 477, 993, 911, 478, 479,
	480, 0, 482, 483, 0, 0, 484, 485, 486, 488,
	489, 487, 490, 955, 491, 0, 0, 492, 493, 494,
	548, 978, 1013, 0, 496, 495, 551, 0, 879, 0,
	1053, 497, 498, 552, 499, 500, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	917, 957, 0, 0, 915, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 956, 0, 255, 507,
	508, 509, 0, 256, 257, 963, 0, 944, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	996, 274, 275, 947, 945, 946, 953, 949, 948, 952,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 987, 988, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 997, 313, 314, 517, 518, 315,
	316, 0, 317, 994, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 958, 959, 962, 377, 999, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 998, 332, 524, 525, 0, 526, 0,
	334, 1000, 960, 1001, 335, 336, 337, 1002, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 1039, 345, 344,
	0, 346, 995, 1003, 347, 348, 1004, 0, 349, 350,
	351, 951, 950, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 1005, 368, 369, 370, 373, 374, 372, 1006, 371,
	0, 233, 1007, 375, 0, 961, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 1045, 382, 383, 384, 0,
	0, 385, 386, 531, 1008, 387, 1009, 989, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 990, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 1010, 425, 426, 427, 428, 538, 1047, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 194,
	443, 444, 442, 445, 446, 447, 954, 448, 432, 433,
	449, 450, 1011, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 991, 0, 465, 466, 0, 464, 196, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 992, 477, 993,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 955, 491, 0, 0,
	492, 493, 494, 1374, 549, 550, 0, 496, 495, 551,
	0, 1053, 0, 188, 497, 498, 552, 499, 500, 501,
	0, 189, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 1043, 957, 1679, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	0, 250, 251, 252, 253, 254, 0, 956, 0, 255,
	507, 508, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 0, 280, 511, 512, 0,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 0, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 517, 518,
	315, 316, 0, 317, 994, 0, 520, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 524, 525, 0, 526,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1039, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 0, 233, 1007, 375, 0, 961, 376, 530, 378,
	379, 0, 0, 380, 0, 0, 1045, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 1047,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	194, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 991, 0, 465, 466, 0, 464, 196, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 542,
	543, 544, 545, 0, 481, 0, 475, 476, 992, 477,
	993, 0, 478, 479, 480, 0, 482, 483, 0, 0,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 1374, 549, 550, 0, 496, 495,
	551, 0, 0, 0, 188, 497, 498, 552, 499, 500,
	501, 0, 189, 0, 0, 0, 2762, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 0, 1679, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 956, 0, 255, 507, 508, 509,
	0, 256, 257, 963, 0, 944, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 996, 274,
	275, 947, 945, 946, 953, 949, 948, 952, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 987, 988, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 997, 313, 314, 517, 518, 315, 316, 0,
	317, 994, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 958, 959, 962, 377, 999, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 998, 332, 524, 525, 0, 526, 0, 334, 1000,
	960, 1001, 335, 336, 337, 1002, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 1039, 345, 344, 0, 346,
	995, 1003, 347, 348, 1004, 0, 349, 350, 351, 951,
	950, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 1005,
	368, 369, 370, 373, 374, 372, 1006, 371, 0, 233,
	1007, 375, 0, 961, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 1045, 382, 383, 384, 0, 0, 385,
	386, 531, 1008, 387, 1009, 989, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 990, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	1010, 425, 426, 427, 428, 538, 1047, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 954, 448, 432, 433, 449, 450,
	1011, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 991,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 992, 477, 993, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 955, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 0, 1035,
	0, 1053, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 1043,
	0, 1041, 957, 0, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	0, 250, 251, 252, 253, 254, 0, 956, 0, 255,
	507, 508, 509, 0, 256, 257, 963, 0, 944, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 996, 274, 275, 947, 945, 946, 953, 949, 948,
	952, 276, 277, 278, 279, 0, 280, 511, 512, 0,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 987, 988, 0, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 0, 312, 0, 0, 997, 313, 314, 517, 518,
	315, 316, 0, 317, 994, 0, 520, 318, 0, 319,
	320, 321, 322, 323, 958, 959, 962, 377, 999, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 998, 332, 524, 525, 0, 526,
	0, 334, 1000, 960, 1001, 335, 336, 337, 1002, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 1039, 345,
	344, 0, 346, 995, 1003, 347, 348, 1004, 0, 349,
	350, 351, 951, 950, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 1005, 368, 369, 370, 373, 374, 372, 1006,
	371, 0, 233, 1007, 375, 0, 961, 376, 530, 378,
	379, 0, 0, 380, 0, 0, 1045, 382, 383, 384,
	0, 0, 385, 386, 531, 1008, 387, 1009, 989, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 990, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 1010, 425, 426, 427, 428, 538, 1047,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 954, 448, 432,
	433, 449, 450, 1011, 451, 452, 539, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 991, 0, 465, 466, 0, 464, 0, 467,
	468, 469, 470, 471, 472, 302, 473, 0, 474, 542,
	543, 544, 545, 0, 481, 0, 475, 476, 992, 477,
	993, 0, 478, 479, 480, 0, 482, 483, 0, 0,
	484, 485, 486, 488, 489, 487, 490, 955, 491, 0,
	0, 492, 493, 494, 548, 549, 550, 0, 496, 495,
	551, 0, 1053, 0, 0, 497, 498, 552, 499, 500,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 1043, 957, 1041, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 956, 0,
	255, 507, 508, 509, 0, 256, 257, 963, 0, 944,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 996, 274, 275, 947, 945, 946, 953, 949,
	948, 952, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 987, 988, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 997, 313, 314, 517,
	518, 315, 316, 0, 317, 994, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 958, 959, 962, 377, 999,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 998, 332, 524, 525, 0,
	526, 0, 334, 1000, 960, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 1039,
	345, 344, 0, 346, 995, 1003, 347, 348, 1004, 0,
	349, 350, 351, 951, 950, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 0, 233, 1007, 375, 0, 961, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 1045, 382, 383,
	384, 0, 0, 385, 386, 531, 1008, 387, 1009, 989,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 990, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 1010, 425, 426, 427, 428, 538,
	1047, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 954, 448,
	432, 433, 449, 450, 1011, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 991, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 992,
	477, 993, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 955, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 0, 1053, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 1043, 957, 1041, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 504, 0, 505,
	249, 506, 0, 250, 251, 252, 253, 254, 0, 956,
	0, 255, 507, 508, 509, 0, 256, 257, 963, 0,
	944, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 947, 945, 946, 953,
	949, 948, 952, 276, 277, 278, 279, 0, 280, 511,
	512, 0, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 513, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 987, 988, 0, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 516, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	517, 518, 315, 316, 0, 317, 994, 0, 520, 318,
	0, 319, 320, 321, 322, 323, 958, 959, 962, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 232, 330, 331, 333, 0, 998, 332, 524, 525,
	0, 526, 0, 334, 1000, 960, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 995, 1003, 347, 348, 1004,
	0, 349, 350, 351, 951, 950, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 0, 233, 1007, 375, 0, 961, 376,
	530, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	989, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 990, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 537, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	538, 1047, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 0, 443, 444, 442, 445, 446, 447, 954,
	448, 432, 433, 449, 450, 1011, 451, 452, 539, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 540,
	459, 460, 461, 462, 991, 0, 465, 466, 0, 464,
	0, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 542, 543, 544, 545, 0, 481, 0, 475, 476,
	992, 477, 993, 0, 478, 479, 480, 0, 482, 483,
	0, 0, 484, 485, 486, 488, 489, 487, 490, 955,
	491, 0, 0, 492, 493, 494, 548, 549, 550, 0,
	496, 495, 551, 0, 879, 0, 1234, 497, 498, 552,
	499, 500, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 1578, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 1203, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 996, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	997, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 999, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 998,
	332, 524, 525, 0, 526, 0, 334, 1000, 527, 1001,
	335, 336, 337, 1002, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 1003,
	347, 348, 1004, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 1005, 368, 369,
	370, 373, 374, 372, 1006, 371, 0, 0, 1007, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	1008, 387, 1009, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 1010, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 194, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 1011, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 196, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 1374,
	549, 550, 0, 496, 495, 551, 0, 0, 0, 188,
	497, 498, 552, 499, 500, 501, 0, 189, 0, 0,
	0, 1371, 0, 1234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	234, 235, 236, 237, 238, 239, 0, 240, 241, 0,
	0, 0, 0, 0, 502, 0, 0, 0, 0, 242,
	243, 245, 244, 246, 247, 248, 503, 504, 0, 505,
	249, 506, 0, 250, 251, 252, 253, 254, 0, 0,
	0, 255, 507, 508, 509, 0, 256, 257, 510, 0,
	1203, 0, 258, 259, 260, 261, 262, 263, 264, 0,
	0, 266, 267, 268, 265, 0, 269, 0, 270, 271,
	272, 0, 273, 996, 274, 275, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 279, 0, 280, 511,
	512, 0, 284, 281, 282, 0, 285, 283, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 291, 292, 0,
	293, 294, 0, 295, 296, 513, 297, 298, 299, 301,
	303, 300, 304, 305, 306, 307, 514, 515, 0, 231,
	0, 0, 0, 0, 0, 308, 309, 310, 516, 0,
	0, 0, 311, 0, 312, 0, 0, 997, 313, 314,
	517, 518, 315, 316, 0, 317, 519, 0, 520, 318,
	0, 319, 320, 321, 322, 323, 521, 522, 523, 377,
	999, 324, 325, 0, 326, 327, 328, 329, 0, 0,
	0, 0, 330, 331, 333, 0, 998, 332, 524, 525,
	0, 526, 0, 334, 1000, 527, 1001, 335, 336, 337,
	1002, 338, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 345, 344, 0, 346, 528, 1003, 347, 348, 1004,
	0, 349, 350, 351, 0, 0, 352, 353, 354, 355,
	0, 356, 357, 359, 361, 358, 360, 365, 362, 363,
	364, 367, 0, 366, 1005, 368, 369, 370, 373, 374,
	372, 1006, 371, 0, 0, 1007, 375, 0, 529, 376,
	530, 378, 379, 0, 0, 380, 0, 0, 0, 382,
	383, 384, 0, 0, 385, 386, 531, 1008, 387, 1009,
	532, 388, 389, 381, 390, 391, 392, 393, 394, 395,
	396, 0, 397, 398, 533, 534, 535, 399, 536, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 407, 408,
	409, 537, 411, 410, 412, 0, 0, 0, 0, 0,
	0, 413, 0, 415, 416, 417, 414, 418, 419, 420,
	421, 0, 422, 423, 424, 1010, 425, 426, 427, 428,
	538, 429, 0, 430, 435, 436, 431, 437, 438, 439,
	440, 441, 194, 443, 444, 442, 445, 446, 447, 0,
	448, 432, 433, 449, 450, 1011, 451, 452, 539, 0,
	453, 0, 454, 455, 456, 457, 434, 458, 463, 540,
	459, 460, 461, 462, 541, 0, 465, 466, 0, 464,
	196, 467, 468, 469, 470, 471, 472, 302, 473, 0,
	474, 542, 543, 544, 545, 0, 481, 0, 475, 476,
	546, 477, 547, 0, 478, 479, 480, 0, 482, 483,
	0, 0, 484, 485, 486, 488, 489, 487, 490, 0,
	491, 0, 0, 492, 493, 494, 1374, 549, 550, 0,
	496, 495, 551, 0, 0, 0, 188, 497, 498, 552,
	499, 500, 501, 0, 189, 0, 0, 0, 0, 0,
	1234, 1233, 0, 0, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 1203, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	996, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 997, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 999, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 998, 332, 524, 525, 0, 526, 0,
	334, 1000, 527, 1001, 335, 336, 337, 1002, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 1003, 347, 348, 1004, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 1005, 368, 369, 370, 373, 374, 372, 1006, 371,
	0, 0, 1007, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 1008, 387, 1009, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 1010, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 1011, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	1234, 1233, 0, 0, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 1389, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 1203, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	996, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 997, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 999, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 998, 332, 524, 525, 0, 526, 0,
	334, 1000, 527, 1001, 335, 336, 337, 1002, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 1003, 347, 348, 1004, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 1005, 368, 369, 370, 373, 374, 372, 1006, 371,
	0, 0, 1007, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 1008, 387, 1009, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 1010, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 1011, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	1234, 1233, 0, 0, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 2986, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 1203, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	996, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 997, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 999, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 998, 332, 524, 525, 0, 526, 0,
	334, 1000, 527, 1001, 335, 336, 337, 1002, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 1003, 347, 348, 1004, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 1005, 368, 369, 370, 373, 374, 372, 1006, 371,
	0, 0, 1007, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 1008, 387, 1009, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 1010, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 1011, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	1053, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 957, 0, 1380, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 956, 0, 255, 507,
	508, 509, 0, 256, 257, 963, 0, 944, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	996, 274, 275, 947, 945, 946, 953, 949, 948, 952,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 987, 988, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 997, 313, 314, 517, 518, 315,
	316, 0, 317, 994, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 958, 959, 962, 377, 999, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 998, 332, 524, 525, 0, 526, 0,
	334, 1000, 960, 1001, 335, 336, 337, 1002, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 995, 1003, 347, 348, 1004, 0, 349, 350,
	351, 951, 950, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 1005, 368, 369, 370, 373, 374, 372, 1006, 371,
	0, 233, 1007, 375, 0, 961, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 1008, 387, 1009, 989, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 990, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 1010, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 954, 448, 432, 433,
	449, 450, 1011, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 991, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 992, 477, 993,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 955, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	879, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 194, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 196,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 1374, 549, 550, 0, 496,
	495, 551, 228, 0, 0, 188, 497, 498, 552, 499,
	500, 501, 0, 189, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 163, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 0, 1322, 0, 228, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 236, 237, 238, 239, 0, 240,
	241, 0, 0, 0, 0, 1693, 502, 0, 0, 0,
	0, 242, 243, 245, 244, 246, 247, 248, 503, 504,
	0, 505, 249, 506, 0, 250, 251, 252, 253, 254,
	0, 0, 0, 255, 507, 508, 509, 0, 256, 257,
	510, 0, 0, 0, 258, 259, 260, 261, 262, 263,
	264, 0, 0, 266, 267, 268, 265, 0, 269, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 279, 0,
	280, 511, 512, 0, 284, 281, 282, 0, 285, 283,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 291,
	292, 0, 293, 294, 0, 295, 296, 513, 297, 298,
	299, 301, 303, 300, 304, 305, 306, 307, 514, 515,
	0, 231, 0, 0, 0, 0, 0, 308, 309, 310,
	516, 0, 0, 0, 311, 0, 312, 0, 0, 0,
	313, 314, 517, 518, 315, 316, 0, 317, 519, 0,
	520, 318, 0, 319, 320, 321, 322, 323, 521, 522,
	523, 377, 0, 324, 325, 0, 326, 327, 328, 329,
	0, 0, 0, 232, 330, 331, 333, 0, 0, 332,
	524, 525, 0, 526, 0, 334, 0, 527, 0, 335,
	336, 337, 0, 338, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 345, 344, 0, 346, 528, 0, 347,
	348, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	354, 355, 0, 356, 357, 359, 361, 358, 360, 365,
	362, 363, 364, 367, 0, 366, 0, 368, 369, 370,
	373, 374, 372, 0, 371, 0, 233, 0, 375, 0,
	529, 376, 530, 378, 379, 0, 0, 380, 0, 0,
	0, 382, 383, 384, 0, 0, 385, 386, 531, 0,
	387, 0, 532, 388, 389, 381, 390, 391, 392, 393,
	394, 395, 396, 0, 397, 398, 533, 534, 535, 399,
	536, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	407, 408, 409, 537, 411, 410, 412, 0, 0, 0,
	0, 0, 0, 413, 0, 415, 416, 417, 414, 418,
	419, 420, 421, 0, 422, 423, 424, 0, 425, 426,
	427, 428, 538, 429, 0, 430, 435, 436, 431, 437,
	438, 439, 440, 441, 0, 443, 444, 442, 445, 446,
	447, 0, 448, 432, 433, 449, 450, 0, 451, 452,
	539, 0, 453, 0, 454, 455, 456, 457, 434, 458,
	463, 540, 459, 460, 461, 462, 541, 0, 465, 466,
	0, 464, 0, 467, 468, 469, 470, 471, 472, 302,
	473, 0, 474, 542, 543, 544, 545, 0, 481, 0,
	475, 476, 546, 477, 547, 0, 478, 479, 480, 0,
	482, 483, 0, 0, 484, 485, 486, 488, 489, 487,
	490, 0, 491, 0, 0, 492, 493, 494, 548, 549,
	550, 0, 496, 495, 551, 0, 228, 2529, 0, 497,
	498, 552, 499, 500, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 1326, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 228, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 3977,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 232, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 233, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 228, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 2934, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 1326, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 228, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 2504, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 228, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 3074, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 0, 743,
	0, 634, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	236, 237, 238, 239, 0, 240, 241, 0, 0, 0,
	0, 1947, 502, 0, 0, 0, 0, 242, 243, 245,
	244, 246, 247, 248, 503, 504, 0, 505, 249, 506,
	0, 250, 251, 252, 253, 254, 0, 0, 0, 255,
	507, 508, 509, 0, 256, 257, 510, 0, 0, 0,
	258, 259, 260, 261, 262, 263, 264, 0, 0, 266,
	267, 268, 265, 0, 269, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 641, 279, 0, 280, 511, 512, 0,
	284, 281, 282, 0, 285, 283, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 291, 292, 0, 293, 294,
	0, 295, 296, 513, 297, 298, 299, 301, 303, 300,
	304, 305, 306, 307, 514, 515, 0, 231, 0, 0,
	0, 0, 0, 308, 309, 310, 516, 0, 0, 0,
	311, 0, 312, 0, 741, 0, 313, 314, 517, 518,
	315, 316, 0, 317, 519, 0, 520, 318, 0, 319,
	320, 321, 322, 323, 521, 522, 523, 377, 0, 324,
	325, 0, 326, 327, 328, 329, 0, 0, 0, 232,
	330, 331, 333, 0, 0, 332, 524, 525, 0, 526,
	0, 334, 0, 527, 0, 335, 336, 337, 0, 338,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 345,
	344, 0, 346, 528, 0, 347, 348, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 354, 355, 0, 356,
	357, 359, 361, 358, 360, 365, 362, 363, 364, 367,
	0, 366, 0, 368, 369, 370, 373, 374, 372, 0,
	371, 0, 233, 0, 375, 0, 529, 376, 530, 378,
	379, 0, 0, 380, 0, 0, 0, 382, 383, 384,
	0, 0, 385, 386, 531, 0, 387, 0, 532, 388,
	389, 381, 390, 391, 392, 393, 394, 395, 396, 0,
	397, 398, 533, 534, 535, 399, 536, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 407, 408, 409, 537,
	411, 410, 412, 0, 0, 0, 0, 0, 0, 413,
	0, 415, 416, 417, 414, 418, 419, 420, 421, 0,
	422, 423, 424, 0, 425, 426, 427, 428, 538, 429,
	0, 430, 435, 436, 431, 437, 438, 439, 440, 441,
	0, 443, 444, 442, 445, 446, 447, 0, 448, 432,
	433, 449, 450, 0, 451, 452, 539, 0, 453, 0,
	454, 455, 456, 457, 434, 458, 463, 540, 459, 460,
	461, 462, 541, 0, 465, 466, 0, 464, 639, 467,
	468, 469, 470, 640, 472, 302, 473, 0, 474, 542,
	543, 544, 545, 0, 481, 0, 475, 476, 546, 477,
	547, 0, 478, 479, 480, 0, 482, 483, 0, 0,
	484, 485, 486, 488, 489, 487, 490, 0, 491, 0,
	0, 492, 493, 494, 548, 549, 550, 0, 496, 495,
	551, 0, 632, 0, 634, 497, 498, 552, 499, 500,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 644, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 641, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 232, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 233, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 639, 467, 468, 469, 470, 640, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	634, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	644, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 641, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 639, 467, 468,
	469, 470, 640, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 634, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 644, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 641, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 232, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 233, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 1983,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 639, 467, 468, 469, 470, 640, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 1728, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 644, 0, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 0, 1734, 0, 1724, 249,
	1740, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 1749, 1750, 0, 0, 256, 257, 0, 0, 1203,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 996, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 980, 280, 1738, 1737,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 965, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 0, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 1736, 0, 0,
	0, 311, 0, 312, 0, 0, 997, 313, 314, 1745,
	1746, 315, 316, 0, 317, 0, 0, 0, 318, 0,
	319, 320, 321, 322, 323, 0, 0, 0, 377, 999,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 998, 332, 1731, 1732, 0,
	1727, 0, 334, 1000, 0, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 0, 1003, 347, 348, 1004, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 0, 0, 1007, 375, 0, 0, 376, 1739,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 0, 1008, 387, 1009, 0,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 1721, 1722, 0, 399, 0, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	1735, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 1010, 425, 426, 427, 428, 0,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 1011, 451, 452, 1733, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 1748, 459,
	460, 461, 462, 0, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	1741, 1742, 1743, 1744, 0, 481, 0, 475, 476, 0,
	477, 0, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 0, 1725, 1747, 0, 496,
	495, 0, 0, 0, 0, 0, 497, 498, 0, 499,
	500, 501, 1234, 1233, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 1715,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 1203,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 996, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 997, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 999,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 998, 332, 524, 525, 0,
	526, 0, 334, 1000, 527, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 1003, 347, 348, 1004, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 0, 0, 1007, 375, 3230, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 1008, 387, 1009, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 1010, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 1011, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 1234, 1233, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 1203,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 996, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 997, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 999,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 998, 332, 524, 525, 0,
	526, 0, 334, 1000, 527, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 1003, 347, 348, 1004, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 0, 0, 1007, 375, 2914, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 1008, 387, 1009, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 1010, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 1011, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 1234, 1233, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 1203,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 996, 274, 275, 0, 0, 0, 0, 0,
	0, 2905, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 997, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 999,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 998, 332, 524, 525, 0,
	526, 0, 334, 1000, 527, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 1003, 347, 348, 1004, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 0, 0, 1007, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 1008, 387, 1009, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 1010, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 2906, 448,
	432, 433, 449, 450, 1011, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 233,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 1409, 0,
	1234, 1233, 0, 0, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 644, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 1203, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	996, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 1408, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 997, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 999, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 998, 332, 524, 525, 0, 526, 0,
	334, 1000, 527, 1001, 335, 336, 337, 1002, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 1003, 347, 348, 1004, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 1005, 368, 369, 370, 373, 374, 372, 1006, 371,
	0, 0, 1007, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 1008, 387, 1009, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 1407, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 1010, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 1406, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 1011, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	1368, 0, 1234, 1233, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 1203,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 996, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 997, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 1367, 522, 523, 377, 999,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 998, 332, 524, 525, 0,
	526, 0, 334, 1000, 527, 1001, 335, 336, 337, 1002,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 1003, 347, 348, 1004, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 1005, 368, 369, 370, 373, 374, 372,
	1006, 371, 0, 0, 1007, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 1008, 387, 1009, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 1010, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 1011, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 1302, 0, 1234, 1233, 0, 0, 0, 0,
	1231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 1203, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 996, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 997, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 1301, 522, 523,
	377, 999, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 998, 332, 524,
	525, 0, 526, 0, 334, 1000, 527, 1001, 335, 336,
	337, 1002, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 1003, 347, 348,
	1004, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 1005, 368, 369, 370, 373,
	374, 372, 1006, 371, 0, 0, 1007, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 1008, 387,
	1009, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 1010, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 1011, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 1265, 0, 1234, 1233, 0, 0,
	0, 0, 1231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 1203, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 996, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	997, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 999, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 998,
	332, 524, 525, 0, 526, 0, 334, 1000, 527, 1001,
	335, 336, 337, 1002, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 1003,
	347, 348, 1004, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 1005, 368, 369,
	370, 373, 374, 372, 1006, 371, 0, 0, 1007, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	1008, 387, 1009, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 1010, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 1011, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 1229, 0, 1234, 1233,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 1203, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 996, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 997, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 1228, 522, 523, 377, 999, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 998, 332, 524, 525, 0, 526, 0, 334, 1000,
	527, 1001, 335, 336, 337, 1002, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 1003, 347, 348, 1004, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 1005,
	368, 369, 370, 373, 374, 372, 1006, 371, 0, 0,
	1007, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 1008, 387, 1009, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	1010, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	1011, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 1234, 1233,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 1203, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 996, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 997, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 999, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 998, 332, 524, 525, 0, 526, 0, 334, 1000,
	527, 1001, 335, 336, 337, 1002, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 1003, 347, 348, 1004, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 1005,
	368, 369, 370, 373, 374, 372, 1006, 371, 0, 0,
	1007, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 1008, 387, 1009, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	1010, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	1011, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 1234, 1233,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 1203, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 996, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 1759, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 997, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 999, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 998, 332, 524, 525, 0, 526, 0, 334, 1000,
	527, 1001, 335, 336, 337, 1002, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 1003, 347, 348, 1004, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 1005,
	368, 369, 370, 373, 374, 372, 1006, 371, 0, 0,
	1007, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 1008, 387, 1009, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	1010, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	1011, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 1234, 1233,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 1203, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 996, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 997, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 999, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 998, 332, 524, 525, 0, 526, 0, 334, 1000,
	527, 1001, 335, 336, 337, 1002, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 1003, 347, 348, 1004, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 1005,
	368, 369, 370, 373, 374, 372, 1006, 371, 0, 0,
	1007, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 1008, 387, 1009, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	1010, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	1011, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 1234, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 1203, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 996, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 997, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 999, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 998, 332, 524,
	525, 0, 526, 0, 334, 1000, 527, 1001, 335, 336,
	337, 1002, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 1003, 347, 348,
	1004, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 1005, 368, 369, 370, 373,
	374, 372, 1006, 371, 0, 0, 1007, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 1008, 387,
	1009, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 1010, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 1011, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 2371, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 2368, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	2375, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 2542, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 2374, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 2539, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	2541, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 2538, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 2373, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 2540, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 2371, 256,
	257, 510, 0, 0, 2365, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 2368, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 2375, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 2374, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 2364,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 2373, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 2372, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 1467, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 233,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 1470, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 1468, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 1469, 495, 551, 1207, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 1209, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 1045, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	1204, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 1206, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 1045, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 1110, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 1112, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 232, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 233, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 1045,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 584, 0, 228, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 583, 238, 239, 573,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 576, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 577, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 578, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 572, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 573, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 576, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 577,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 578, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 228, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 232, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 2880, 371, 0, 233, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 1045, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	2476, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 2475, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 1959, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 232, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 233, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 1885, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	1890, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 1889, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 1878, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 1880, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 232, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 233, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 1364, 0, 228, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 1363,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 232, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 233, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 1355, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 1354, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 233,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 1352, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 1351, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	1348, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 1347, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 1304, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	231, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 232, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 233, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 1225, 0, 228, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 232, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 233, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 1218, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 1220, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 233,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 554, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	219, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 233,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 228, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 576, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 577, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 578, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 1990, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 231, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 232, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 233, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 1988, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 231, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 232, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 233, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 228, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 1986, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 231, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	232, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 233, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 231, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 1928, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 232, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 233,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 734, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 733,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 732, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 2542, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 3458, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 563, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 562, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 561, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 228, 2529,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 228, 3467,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 228, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 3207, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 2292, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	228, 2529, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 2526, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 1967,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 1957, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 604, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 1084, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 1082, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	605, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 601, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 1085, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 600, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	604, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 594, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 605, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 601, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 1379, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	600, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 1361, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 1360, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 1310, 0, 228, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 1309,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 1295, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 1294, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 1290, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	1212, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 604, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 1084, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 1082, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 605, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 601, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 1085, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 600, 543, 544, 545, 0, 481, 0, 475,
	1083, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 1066, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 610,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 0, 496, 495, 551, 604, 0, 228, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 594, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 592, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 593, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 605, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 595, 429, 0, 430, 435,
	436, 431, 601, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 596, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 600, 543, 544, 545,
	0, 481, 0, 475, 598, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 0, 496, 495, 551, 588, 0,
	228, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 589, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 0, 496, 495, 551,
	586, 0, 228, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 0, 496,
	495, 551, 580, 0, 228, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 558, 0, 228, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 521,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 228, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 521, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 2949, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 228, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 2910, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 2856, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 448, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 2854,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 228, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 2840, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 2484, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 411, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 228, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	318, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 392, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 407,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 429, 0, 430, 589, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	228, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 0, 0, 0, 234, 235, 236,
	237, 238, 239, 0, 240, 241, 0, 0, 0, 0,
	0, 502, 0, 1910, 0, 0, 242, 243, 245, 244,
	246, 247, 248, 503, 504, 0, 505, 249, 506, 0,
	250, 251, 252, 253, 254, 0, 0, 0, 255, 507,
	508, 509, 0, 256, 257, 510, 0, 0, 0, 258,
	259, 260, 261, 262, 263, 264, 0, 0, 266, 267,
	268, 265, 0, 269, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 279, 0, 280, 511, 512, 0, 284,
	281, 282, 0, 285, 283, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 291, 292, 0, 293, 294, 0,
	295, 296, 513, 297, 298, 299, 301, 303, 300, 304,
	305, 306, 307, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 308, 309, 310, 516, 0, 0, 0, 311,
	0, 312, 0, 0, 0, 313, 314, 517, 518, 315,
	316, 0, 317, 519, 0, 520, 318, 0, 319, 320,
	321, 322, 323, 521, 522, 523, 377, 0, 324, 325,
	0, 326, 327, 328, 329, 0, 0, 0, 0, 330,
	331, 333, 0, 0, 332, 524, 525, 0, 526, 0,
	334, 0, 527, 0, 335, 336, 337, 0, 338, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 345, 344,
	0, 346, 528, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 354, 355, 0, 356, 357,
	359, 361, 358, 360, 365, 362, 363, 364, 367, 0,
	366, 0, 368, 369, 370, 373, 374, 372, 0, 371,
	0, 0, 0, 375, 0, 529, 376, 530, 378, 379,
	0, 0, 380, 0, 0, 0, 382, 383, 384, 0,
	0, 385, 386, 531, 0, 387, 0, 532, 388, 389,
	381, 390, 391, 392, 393, 394, 395, 396, 0, 397,
	398, 533, 534, 535, 399, 536, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 407, 408, 409, 537, 411,
	410, 412, 0, 0, 0, 0, 0, 0, 413, 0,
	415, 416, 417, 414, 418, 419, 420, 421, 0, 422,
	423, 424, 0, 425, 426, 427, 428, 538, 429, 0,
	430, 435, 436, 431, 437, 438, 439, 440, 441, 0,
	443, 444, 442, 445, 446, 447, 0, 0, 432, 433,
	449, 450, 0, 451, 452, 539, 0, 453, 0, 454,
	455, 456, 457, 434, 458, 463, 540, 459, 460, 461,
	462, 541, 0, 465, 466, 0, 464, 0, 467, 468,
	469, 470, 471, 472, 302, 473, 0, 474, 542, 543,
	544, 545, 0, 481, 0, 475, 476, 546, 477, 547,
	0, 478, 479, 480, 0, 482, 483, 0, 0, 484,
	485, 486, 488, 489, 487, 490, 0, 491, 0, 0,
	492, 493, 494, 548, 549, 550, 228, 496, 495, 551,
	0, 0, 0, 0, 497, 498, 552, 499, 500, 501,
	0, 0, 0, 234, 235, 236, 237, 238, 239, 0,
	240, 241, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 242, 243, 245, 244, 246, 247, 248, 503,
	504, 0, 505, 249, 506, 0, 250, 251, 252, 253,
	254, 0, 0, 0, 255, 507, 508, 509, 0, 256,
	257, 510, 0, 0, 0, 258, 259, 260, 261, 262,
	263, 264, 0, 0, 266, 267, 268, 265, 0, 269,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 279,
	0, 280, 511, 512, 0, 284, 281, 282, 0, 285,
	283, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	291, 292, 0, 293, 294, 0, 295, 296, 513, 297,
	298, 299, 301, 303, 300, 304, 305, 306, 307, 514,
	515, 0, 0, 0, 0, 0, 0, 0, 308, 309,
	310, 516, 0, 0, 0, 311, 0, 312, 0, 0,
	0, 313, 314, 517, 518, 315, 316, 0, 317, 519,
	0, 520, 318, 0, 319, 320, 321, 322, 323, 1332,
	522, 523, 377, 0, 324, 325, 0, 326, 327, 328,
	329, 0, 0, 0, 0, 330, 331, 333, 0, 0,
	332, 524, 525, 0, 526, 0, 334, 0, 527, 0,
	335, 336, 337, 0, 338, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 345, 344, 0, 346, 528, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 354, 355, 0, 356, 357, 359, 361, 358, 360,
	365, 362, 363, 364, 367, 0, 366, 0, 368, 369,
	370, 373, 374, 372, 0, 371, 0, 0, 0, 375,
	0, 529, 376, 530, 378, 379, 0, 0, 380, 0,
	0, 0, 382, 383, 384, 0, 0, 385, 386, 531,
	0, 387, 0, 532, 388, 389, 381, 390, 391, 392,
	393, 394, 395, 396, 0, 397, 398, 533, 534, 535,
	399, 536, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 407, 408, 409, 537, 411, 410, 412, 0, 0,
	0, 0, 0, 0, 413, 0, 415, 416, 417, 414,
	418, 419, 420, 421, 0, 422, 423, 424, 0, 425,
	426, 427, 428, 538, 429, 0, 430, 435, 436, 431,
	437, 438, 439, 440, 441, 0, 443, 444, 442, 445,
	446, 447, 0, 448, 432, 433, 449, 450, 0, 451,
	452, 539, 0, 453, 0, 454, 455, 456, 457, 434,
	458, 463, 540, 459, 460, 461, 462, 541, 0, 465,
	466, 0, 464, 0, 467, 468, 469, 470, 471, 472,
	302, 473, 0, 474, 542, 543, 544, 545, 0, 481,
	0, 475, 476, 546, 477, 547, 0, 478, 479, 480,
	0, 482, 483, 0, 0, 484, 485, 486, 488, 489,
	487, 490, 0, 491, 0, 0, 492, 493, 494, 548,
	549, 550, 228, 496, 495, 551, 0, 0, 0, 0,
	497, 498, 552, 499, 500, 501, 0, 0, 0, 234,
	235, 236, 237, 238, 239, 0, 240, 241, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 242, 243,
	245, 244, 246, 247, 248, 503, 504, 0, 505, 249,
	506, 0, 250, 251, 252, 253, 254, 0, 0, 0,
	255, 507, 508, 509, 0, 256, 257, 510, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 0, 0,
	266, 267, 268, 265, 0, 269, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 278, 279, 0, 280, 511, 512,
	0, 284, 281, 282, 0, 285, 283, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 291, 292, 0, 293,
	294, 0, 295, 296, 513, 297, 298, 299, 301, 303,
	300, 304, 305, 306, 307, 514, 515, 0, 0, 0,
	0, 0, 0, 0, 308, 309, 310, 516, 0, 0,
	0, 311, 0, 312, 0, 0, 0, 313, 314, 517,
	518, 315, 316, 0, 317, 519, 0, 520, 318, 0,
	319, 320, 321, 322, 323, 1272, 522, 523, 377, 0,
	324, 325, 0, 326, 327, 328, 329, 0, 0, 0,
	0, 330, 331, 333, 0, 0, 332, 524, 525, 0,
	526, 0, 334, 0, 527, 0, 335, 336, 337, 0,
	338, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	345, 344, 0, 346, 528, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 354, 355, 0,
	356, 357, 359, 361, 358, 360, 365, 362, 363, 364,
	367, 0, 366, 0, 368, 369, 370, 373, 374, 372,
	0, 371, 0, 0, 0, 375, 0, 529, 376, 530,
	378, 379, 0, 0, 380, 0, 0, 0, 382, 383,
	384, 0, 0, 385, 386, 531, 0, 387, 0, 532,
	388, 389, 381, 390, 391, 392, 393, 394, 395, 396,
	0, 397, 398, 533, 534, 535, 399, 536, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 407, 408, 409,
	537, 411, 410, 412, 0, 0, 0, 0, 0, 0,
	413, 0, 415, 416, 417, 414, 418, 419, 420, 421,
	0, 422, 423, 424, 0, 425, 426, 427, 428, 538,
	429, 0, 430, 435, 436, 431, 437, 438, 439, 440,
	441, 0, 443, 444, 442, 445, 446, 447, 0, 448,
	432, 433, 449, 450, 0, 451, 452, 539, 0, 453,
	0, 454, 455, 456, 457, 434, 458, 463, 540, 459,
	460, 461, 462, 541, 0, 465, 466, 0, 464, 0,
	467, 468, 469, 470, 471, 472, 302, 473, 0, 474,
	542, 543, 544, 545, 0, 481, 0, 475, 476, 546,
	477, 547, 0, 478, 479, 480, 0, 482, 483, 0,
	0, 484, 485, 486, 488, 489, 487, 490, 0, 491,
	0, 0, 492, 493, 494, 548, 549, 550, 228, 496,
	495, 551, 0, 0, 0, 0, 497, 498, 552, 499,
	500, 501, 0, 0, 0, 234, 235, 236, 237, 238,
	239, 0, 240, 241, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 242, 243, 245, 244, 246, 247,
	248, 503, 504, 0, 505, 249, 506, 0, 250, 251,
	252, 253, 254, 0, 0, 0, 255, 507, 508, 509,
	0, 256, 257, 510, 0, 0, 0, 258, 259, 260,
	261, 262, 263, 264, 0, 0, 266, 267, 268, 265,
	0, 269, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 279, 0, 280, 511, 512, 0, 284, 281, 282,
	0, 285, 283, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 291, 292, 0, 293, 294, 0, 295, 296,
	513, 297, 298, 299, 301, 303, 300, 304, 305, 306,
	307, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 310, 516, 0, 0, 0, 311, 0, 312,
	0, 0, 0, 313, 314, 517, 518, 315, 316, 0,
	317, 519, 0, 520, 318, 0, 319, 320, 321, 322,
	323, 521, 522, 523, 377, 0, 324, 325, 0, 326,
	327, 328, 329, 0, 0, 0, 0, 330, 331, 333,
	0, 0, 332, 524, 525, 0, 526, 0, 334, 0,
	527, 0, 335, 336, 337, 0, 338, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 345, 344, 0, 346,
	528, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 354, 355, 0, 356, 357, 359, 361,
	358, 360, 365, 362, 363, 364, 367, 0, 366, 0,
	368, 369, 370, 373, 374, 372, 0, 371, 0, 0,
	0, 375, 0, 529, 376, 530, 378, 379, 0, 0,
	380, 0, 0, 0, 382, 383, 384, 0, 0, 385,
	386, 531, 0, 387, 0, 532, 388, 389, 381, 390,
	391, 392, 393, 394, 395, 396, 0, 397, 398, 533,
	534, 535, 399, 536, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 407, 408, 409, 537, 1018, 410, 412,
	0, 0, 0, 0, 0, 0, 413, 0, 415, 416,
	417, 414, 418, 419, 420, 421, 0, 422, 423, 424,
	0, 425, 426, 427, 428, 538, 429, 0, 430, 435,
	436, 431, 437, 438, 439, 440, 441, 0, 443, 444,
	442, 445, 446, 447, 0, 448, 432, 433, 449, 450,
	0, 451, 452, 539, 0, 453, 0, 454, 455, 456,
	457, 434, 458, 463, 540, 459, 460, 461, 462, 541,
	0, 465, 466, 0, 464, 0, 467, 468, 469, 470,
	471, 472, 302, 473, 0, 474, 542, 543, 544, 545,
	0, 481, 0, 475, 476, 546, 477, 547, 0, 478,
	479, 480, 0, 482, 483, 0, 0, 484, 485, 486,
	488, 489, 487, 490, 0, 491, 0, 0, 492, 493,
	494, 548, 549, 550, 228, 496, 495, 551, 0, 0,
	0, 0, 497, 498, 552, 499, 500, 501, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 0, 240, 241,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	242, 243, 245, 244, 246, 247, 248, 503, 504, 0,
	505, 249, 506, 0, 250, 251, 252, 253, 254, 0,
	0, 0, 255, 507, 508, 509, 0, 256, 257, 510,
	0, 0, 0, 258, 259, 260, 261, 262, 263, 264,
	0, 0, 266, 267, 268, 265, 0, 269, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 278, 279, 0, 280,
	511, 512, 0, 284, 281, 282, 0, 285, 283, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 291, 292,
	0, 293, 294, 0, 295, 296, 513, 297, 298, 299,
	301, 303, 300, 304, 305, 306, 307, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 308, 309, 310, 516,
	0, 0, 0, 311, 0, 312, 0, 0, 0, 313,
	314, 517, 518, 315, 316, 0, 317, 519, 0, 520,
	0, 0, 319, 320, 321, 322, 323, 521, 522, 523,
	377, 0, 324, 325, 0, 326, 327, 328, 329, 0,
	0, 0, 0, 330, 331, 333, 0, 0, 332, 524,
	525, 0, 526, 0, 334, 0, 527, 0, 335, 336,
	337, 0, 338, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 345, 344, 0, 346, 528, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 354,
	355, 0, 356, 357, 359, 361, 358, 360, 365, 362,
	363, 364, 367, 0, 366, 0, 368, 369, 370, 373,
	374, 372, 0, 371, 0, 0, 0, 375, 0, 529,
	376, 530, 378, 379, 0, 0, 380, 0, 0, 0,
	382, 383, 384, 0, 0, 385, 386, 531, 0, 387,
	0, 532, 388, 389, 381, 390, 391, 0, 393, 394,
	395, 396, 0, 397, 398, 533, 534, 535, 399, 536,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 0,
	408, 409, 537, 411, 410, 412, 0, 0, 0, 0,
	0, 0, 413, 0, 415, 416, 417, 414, 418, 419,
	420, 421, 0, 422, 423, 424, 0, 425, 426, 427,
	428, 538, 0, 0, 430, 435, 436, 431, 437, 438,
	439, 440, 441, 0, 443, 444, 442, 445, 446, 447,
	0, 448, 432, 433, 449, 450, 0, 451, 452, 539,
	0, 453, 0, 454, 455, 456, 457, 434, 458, 463,
	540, 459, 460, 461, 462, 541, 0, 465, 466, 0,
	464, 0, 467, 468, 469, 470, 471, 472, 302, 473,
	0, 474, 542, 543, 544, 545, 0, 481, 0, 475,
	476, 546, 477, 547, 0, 478, 479, 480, 0, 482,
	483, 0, 0, 484, 485, 486, 488, 489, 487, 490,
	0, 491, 0, 0, 492, 493, 494, 548, 549, 550,
	0, 496, 495, 551, 0, 0, 0, 0, 497, 498,
	552, 499, 500, 501, 1512, 1513, 0, 1545, 1546, 1547,
	1555, 1556, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1548, 1543, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 1512, 1513,
	0, 1545, 1546, 1547, 1555, 1556, 1557, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 1548,
	1543, 0, 0, 1534, 0, 0, 0, 1515, 0, 0,
	0, 1531, 0, 0, 1561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1552, 0, 0, 1562, 0, 1537,
	1538, 1539, 1540, 1542, 1544, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	1559, 0, 0, 0, 0, 0, 0, 1529, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1552, 0,
	0, 1562, 0, 1550, 0, 0, 0, 1542, 1544, 0,
	0, 0, 0, 0, 1535, 0, 0, 0, 0, 0,
	0, 0, 1558, 0, 1559, 0, 0, 0, 0, 0,
	0, 1529, 1530, 0, 0, 0, 0, 0, 0, 1560,
	0, 0, 0, 0, 0, 0, 0, 1550, 0, 0,
	0, 0, 0, 0, 0, 0, 1549, 0, 1535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1549, 0, 0, 0, 0, 0, 1541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1536, 0, 0, 0,
	0, 1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	1541, 0, 1548, 1543, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 1561, 0, 0,
	1536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 1553, 0, 0, 0, 0, 0, 0,
	1534, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1551, 0, 0,
	0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0,
	0, 0, 0, 0, 0, 2685, 0, 0, 0, 0,
	0, 0, 1537, 1538, 1539, 1540, 0, 0, 0, 0,
	0, 1551, 1520, 0, 0, 1526, 1527, 1533, 1554, 1532,
	1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521,
	1522, 0, 0, 0, 0, 0, 0, 0, 0, 2684,
	0, 1552, 0, 0, 1562, 0, 0, 0, 0, 0,
	1542, 1544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1558, 0, 1559, 0, 0,
	0, 0, 0, 0, 1529, 1530, 0, 0, 0, 0,
	0, 1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557,
	1550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1535, 1548, 1543, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 1561, 0, 0,
	0, 0, 0, 0, 0, 0, 1560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 1549, 0, 0, 0, 0, 0, 0,
	1534, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 1537, 1538, 1539, 1540, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 1553, 1512, 1513, 0,
	1545, 1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1548, 1543,
	0, 1552, 0, 0, 1562, 0, 1515, 0, 0, 0,
	1542, 1544, 0, 1561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1558, 0, 1559, 0, 0,
	0, 0, 0, 0, 1529, 1530, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1534, 0, 0, 0,
	1550, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 1535, 0, 0, 1551, 0, 0, 0, 1526, 1527,
	1533, 1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517,
	1518, 1519, 1521, 1522, 0, 0, 1560, 0, 0, 0,
	0, 0, 2146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 1538,
	1539, 1540, 0, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 1512, 1513, 0, 1545, 1546, 1547,
	1555, 1556, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1541, 0, 1548, 1543, 1552, 0, 0,
	1562, 0, 0, 1515, 0, 0, 1542, 1544, 0, 0,
	1561, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	0, 1558, 0, 1559, 0, 0, 0, 0, 0, 0,
	1529, 1530, 0, 1514, 0, 0, 1553, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 1550, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 1551, 1520, 0, 0, 1526, 1527,
	1533, 1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517,
	1518, 1519, 1521, 1522, 0, 0, 0, 0, 3769, 1541,
	0, 0, 0, 0, 1552, 0, 0, 1562, 0, 0,
	0, 0, 0, 1542, 1544, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	1559, 0, 0, 0, 0, 0, 0, 1529, 1530, 0,
	0, 0, 1553, 0, 1512, 1513, 0, 1545, 1546, 1547,
	1555, 1556, 1557, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 1548, 1543, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 1560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 1549, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528,
	0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522,
	0, 0, 0, 0, 3765, 0, 1541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1536, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 1553,
	1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1548, 1543, 0, 1552, 0, 0, 1562, 0, 1515,
	0, 0, 0, 1542, 1544, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	1559, 0, 0, 0, 0, 0, 0, 1529, 1530, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 0, 1550, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 1535, 0, 0, 1551, 0, 0,
	0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 1560,
	0, 3674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 1512, 1513, 0,
	1545, 1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1541, 0, 1548, 1543,
	1552, 0, 0, 1562, 0, 0, 1515, 0, 0, 1542,
	1544, 0, 0, 1561, 0, 0, 1536, 0, 0, 0,
	0, 0, 0, 0, 1558, 0, 1559, 0, 0, 0,
	0, 0, 0, 1529, 1530, 0, 1514, 0, 0, 1553,
	0, 0, 0, 0, 0, 0, 1534, 0, 0, 1550,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 1538,
	1539, 1540, 0, 0, 0, 0, 0, 1551, 1520, 0,
	0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0,
	0, 3673, 1541, 0, 0, 0, 0, 1552, 0, 0,
	1562, 0, 0, 0, 0, 0, 1542, 1544, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 1558, 0, 1559, 0, 0, 0, 0, 0, 0,
	1529, 1530, 0, 0, 0, 1553, 0, 1512, 1513, 0,
	1545, 1546, 1547, 1555, 1556, 1557, 1550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1535, 1548, 1543,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	0, 0, 0, 1561, 0, 0, 0, 0, 0, 0,
	0, 0, 1560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 0, 0, 1549,
	0, 0, 0, 0, 0, 0, 1534, 0, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 1526, 1527, 1533,
	1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 0, 0, 0, 3528, 0, 1541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 1538,
	1539, 1540, 0, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 1553, 1512, 1513, 0, 1545, 1546, 1547, 1555,
	1556, 1557, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1548, 1543, 0, 1552, 0, 0,
	1562, 0, 1515, 0, 0, 0, 1542, 1544, 0, 1561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1558, 0, 1559, 0, 0, 0, 0, 0, 0,
	1529, 1530, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1534, 0, 0, 0, 1550, 0, 0, 0,
	1531, 0, 0, 0, 0, 0, 0, 1535, 0, 0,
	1551, 0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528,
	0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522,
	0, 0, 1560, 0, 3402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1537, 1538, 1539, 1540, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 1548, 1543, 1552, 0, 0, 1562, 0, 0, 1515,
	0, 0, 1542, 1544, 0, 0, 1561, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 1558, 0, 1559,
	0, 0, 0, 0, 0, 0, 1529, 1530, 0, 1514,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 1550, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 1535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 0,
	1551, 1520, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528,
	0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522,
	0, 0, 0, 0, 3348, 1541, 0, 0, 0, 0,
	1552, 0, 0, 1562, 0, 0, 0, 0, 0, 1542,
	1544, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 1558, 0, 1559, 0, 0, 0,
	0, 0, 0, 1529, 1530, 0, 0, 0, 1553, 0,
	1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 1550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1535, 1548, 1543, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 1560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 1549, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 0, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 0,
	1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523, 1524,
	1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0, 0,
	3347, 0, 1541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 1553, 1512, 1513, 0, 1545,
	1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1548, 1543, 0,
	1552, 0, 0, 1562, 0, 1515, 0, 0, 0, 1542,
	1544, 0, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1558, 0, 1559, 0, 0, 0,
	0, 0, 0, 1529, 1530, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1534, 0, 0, 0, 1550,
	0, 0, 0, 1531, 0, 0, 0, 0, 0, 0,
	1535, 0, 0, 1551, 0, 0, 0, 1526, 1527, 1533,
	1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 0, 1560, 0, 3346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 1538, 1539,
	1540, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 1512, 1513, 0, 1545, 1546, 1547, 1555,
	1556, 1557, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1541, 0, 1548, 1543, 1552, 0, 0, 1562,
	0, 0, 1515, 0, 0, 1542, 1544, 0, 0, 1561,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 1559, 0, 0, 0, 0, 0, 0, 1529,
	1530, 0, 1514, 0, 0, 1553, 0, 0, 0, 0,
	0, 0, 1534, 0, 0, 1550, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 0, 1535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1537, 1538, 1539, 1540, 0, 0,
	0, 0, 0, 1551, 1520, 0, 0, 1526, 1527, 1533,
	1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 0, 0, 0, 3079, 1541, 0,
	0, 0, 0, 1552, 0, 0, 1562, 0, 0, 0,
	0, 0, 1542, 1544, 0, 0, 0, 0, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 1558, 0, 1559,
	0, 0, 0, 0, 0, 0, 1529, 1530, 0, 0,
	0, 1553, 0, 1512, 1513, 0, 1545, 1546, 1547, 1555,
	1556, 1557, 1550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1535, 1548, 1543, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 1561,
	0, 0, 0, 0, 0, 0, 0, 0, 1560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 1549, 0, 0, 0, 0,
	0, 0, 1534, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528, 0,
	1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0,
	0, 0, 0, 2682, 0, 1541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 1537, 1538, 1539, 1540, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 1553, 1512,
	1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1548, 1543, 0, 1552, 0, 0, 1562, 0, 1515, 0,
	0, 0, 1542, 1544, 0, 1561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1558, 0, 1559,
	0, 0, 0, 0, 0, 0, 1529, 1530, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 1550, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 1535, 0, 0, 1551, 0, 0, 0,
	1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523, 1524,
	1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 1560, 0,
	2681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1537, 1538, 1539, 1540, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 1512, 1513, 0, 1545,
	1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1541, 0, 1548, 1543, 1552,
	0, 0, 1562, 0, 0, 1515, 0, 0, 1542, 1544,
	0, 0, 1561, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 1558, 0, 1559, 0, 0, 0, 0,
	0, 0, 1529, 1530, 0, 1514, 0, 0, 1553, 0,
	0, 0, 0, 0, 0, 1534, 0, 0, 1550, 0,
	0, 0, 0, 1531, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 1538, 1539,
	1540, 0, 0, 0, 0, 0, 1551, 1520, 0, 0,
	1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523, 1524,
	1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0, 0,
	2680, 1541, 0, 0, 0, 0, 1552, 0, 0, 1562,
	0, 0, 0, 0, 0, 1542, 1544, 0, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 1559, 0, 0, 0, 0, 0, 0, 1529,
	1530, 0, 0, 0, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1551, 0, 0, 0, 1526, 1527, 1533, 1554,
	1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519,
	1521, 1522, 0, 0, 0, 0, 2679, 0, 1541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 1513, 1536, 1545,
	1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1548, 1543, 0,
	0, 1553, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1534, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 1512, 1513, 0, 1545, 1546,
	1547, 1555, 1556, 1557, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1548, 1543, 0, 0,
	0, 0, 2617, 0, 1515, 0, 0, 0, 0, 1551,
	0, 1561, 0, 1526, 1527, 1533, 1554, 1532, 1528, 0,
	1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0,
	0, 2646, 0, 0, 1514, 0, 0, 1537, 1538, 1539,
	1540, 0, 0, 0, 1534, 0, 0, 1520, 3891, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1552, 0, 0, 1562,
	0, 0, 0, 2618, 0, 1542, 1544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 1559, 0, 0, 0, 0, 0, 0, 1529,
	1530, 0, 0, 0, 0, 0, 1537, 1538, 1539, 1540,
	0, 0, 0, 0, 0, 1550, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1552, 0, 0, 1562, 0,
	0, 1560, 0, 0, 1542, 1544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1549, 1558,
	0, 1559, 0, 0, 0, 0, 0, 0, 1529, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3890, 1550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1560, 0, 0, 0, 0, 0, 0, 0, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 1549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1553, 0, 0, 0, 0, 0, 0, 0, 1512,
	1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1548, 1543, 0, 0, 0, 0, 0, 1541, 1515, 0,
	0, 0, 0, 0, 0, 1561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	1553, 0, 0, 0, 0, 0, 1531, 0, 0, 1551,
	0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528, 0,
	1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1537, 1538, 1539, 1540, 0, 0, 0, 0, 0, 0,
	1520, 0, 2742, 0, 0, 2741, 0, 0, 1551, 0,
	0, 0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525,
	1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 1552,
	0, 0, 1562, 0, 0, 0, 0, 0, 1542, 1544,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1558, 0, 1559, 0, 0, 0, 0,
	0, 0, 1529, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2266, 0, 0, 0,
	0, 0, 0, 1512, 1513, 0, 1545, 1546, 1547, 1555,
	1556, 1557, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1548, 1543, 0, 0, 0, 2265,
	0, 1541, 1515, 0, 0, 0, 0, 0, 0, 1561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1534, 0, 1553, 0, 0, 0, 0, 0,
	1531, 0, 1512, 1513, 0, 1545, 1546, 1547, 1555, 1556,
	1557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1548, 1543, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 1537, 1538, 1539, 1540, 0, 0,
	0, 1534, 0, 0, 1520, 0, 0, 0, 0, 1531,
	0, 0, 1551, 0, 0, 0, 1526, 1527, 1533, 1554,
	1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518, 1519,
	1521, 1522, 0, 1552, 0, 0, 1562, 0, 0, 0,
	0, 0, 1542, 1544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1558, 0, 1559,
	0, 0, 0, 0, 0, 0, 1529, 1530, 0, 0,
	0, 0, 0, 1537, 1538, 1539, 1540, 0, 0, 0,
	0, 0, 1550, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1552, 0, 0, 1562, 0, 0, 1560, 0,
	0, 1542, 1544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1549, 1558, 0, 1559, 0,
	0, 0, 0, 0, 0, 1529, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1560, 0, 0,
	0, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 1549, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 0, 0, 0, 0, 1512, 1513, 0, 1545,
	1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1548, 1543, 0,
	0, 0, 0, 0, 1541, 1515, 0, 0, 0, 0,
	0, 0, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1534, 0, 1553, 0, 0,
	0, 0, 0, 1531, 0, 0, 1551, 0, 0, 0,
	1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523, 1524,
	1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 1538, 1539,
	1540, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 1551, 0, 0, 0, 1526,
	1527, 1533, 1554, 1532, 1528, 0, 1525, 1523, 1524, 1516,
	1517, 1518, 1519, 1521, 1522, 0, 1552, 0, 0, 1562,
	0, 0, 0, 0, 0, 1542, 1544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 1559, 0, 0, 0, 0, 0, 0, 1529,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1548, 1543, 0, 0, 0, 0, 0, 1541, 1515,
	0, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	0, 1553, 0, 0, 0, 0, 0, 1531, 0, 0,
	1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1548, 1543, 0, 0, 3060, 2743, 0, 0, 1515,
	0, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 1534,
	0, 1520, 0, 0, 0, 0, 2748, 1531, 0, 1551,
	0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528, 0,
	1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522, 0,
	1552, 0, 0, 1562, 0, 0, 0, 0, 0, 1542,
	1544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1558, 0, 1559, 0, 0, 0,
	0, 0, 0, 1529, 1530, 0, 0, 0, 0, 0,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 1550,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 1562, 0, 1560, 0, 0, 0, 1542,
	1544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 1558, 0, 1559, 0, 0, 0,
	0, 0, 0, 1529, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1560, 0, 0, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1553, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1513, 0, 1545, 1546, 1547,
	1555, 1556, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1548, 1543, 0, 0, 0,
	0, 0, 1541, 1515, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1534, 0, 1553, 0, 0, 0, 0,
	0, 1531, 0, 1551, 0, 0, 0, 1526, 1527, 1533,
	1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 1526, 1527, 1533,
	1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 1552, 0, 0, 1562, 0, 0,
	0, 0, 0, 1542, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	1559, 0, 0, 0, 0, 0, 0, 1529, 1530, 0,
	0, 0, 0, 0, 1512, 1513, 0, 1545, 1546, 1547,
	1555, 1556, 1557, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 1548, 1543, 0, 0, 0,
	2683, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 1560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 1549, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 2710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1536, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1538, 1539, 1540, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 1553,
	1512, 1513, 0, 1545, 1546, 1547, 1555, 1556, 1557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1548, 1543, 0, 1552, 0, 0, 1562, 0, 1515,
	0, 0, 0, 1542, 1544, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	1559, 0, 0, 0, 0, 0, 0, 1529, 1530, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 0, 1550, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 1535, 0, 0, 1551, 0, 0,
	0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 1560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 1538, 1539, 1540, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 1512, 1513, 0,
	1545, 1546, 1547, 1555, 1556, 1557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1541, 0, 1548, 1543,
	1552, 0, 0, 1562, 0, 0, 1515, 0, 0, 1542,
	1544, 0, 0, 1561, 0, 0, 1536, 0, 0, 0,
	0, 0, 0, 0, 1558, 0, 1559, 0, 0, 0,
	0, 0, 0, 1529, 1530, 0, 1514, 0, 0, 1553,
	0, 0, 0, 0, 0, 0, 1534, 0, 0, 1550,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 1538,
	1539, 1540, 0, 0, 0, 0, 0, 1551, 1520, 0,
	0, 1526, 1527, 1533, 1554, 1532, 1528, 0, 1525, 1523,
	1524, 1516, 1517, 1518, 1519, 1521, 1522, 0, 0, 0,
	0, 0, 1541, 0, 0, 0, 0, 1552, 0, 0,
	1562, 0, 0, 0, 0, 0, 1542, 1544, 0, 0,
	0, 0, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 1558, 0, 1559, 0, 0, 0, 0, 0, 0,
	1529, 1530, 0, 0, 0, 1553, 1512, 1513, 0, 1545,
	1546, 1547, 1555, 1556, 1557, 0, 1550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1535, 1543, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1534, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 1526, 1527, 1533,
	1554, 1532, 1528, 0, 1525, 1523, 1524, 1516, 1517, 1518,
	1519, 1521, 1522, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 1537, 1538, 1539,
	1540, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1552, 0, 0, 1562,
	0, 0, 0, 0, 0, 1542, 1544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 1559, 0, 0, 0, 0, 0, 0, 1529,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1535, 0, 0, 0,
	1551, 0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528,
	0, 1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522,
	0, 1560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1553, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	0, 0, 0, 1526, 1527, 1533, 1554, 1532, 1528, 0,
	1525, 1523, 1524, 1516, 1517, 1518, 1519, 1521, 1522,
}

var sqlPact = [...]int{
	7021, -1000, -1000, -1000, -1000, 282, -1000, -1000, 278, 277,
	275, 266, 265, 264, 263, 248, -1000, -1000, -1000, -1000,
	-1000, -1000, 247, -1000, -1000, 246, -1000, 244, 243, 236,
	230, -1000, 227, 225, 223, -1000, -1000, -1000, -1000, 222,
	220, 219, 67838, 67376, 68294, 2002, 82082, 71954, 1748, 60464,
	81620, 60002, 81158, 80696, 217, -1000, 80234, 215, 214, 209,
	-1000, 79772, -1000, 1728, -1000, 208, 2059, 49350, 207, 201,
	200, 2573, 198, -1000, 197, 190, -1000, 12405, 1458, -1000,
	173, -1000, 7644, 7662, 71036, 2561, 172, 171, 48887, 2537,
	2565, -1000, -1000, 1810, -1000, -1000, 168, 164, 163, 158,
	157, 156, 152, 150, 147, -1000, 145, 143, 142, 139,
	138, 135, 134, -1000, 126, 122, 119, 118, 116, 114,
	112, 108, 103, 100, 97, 96, -1000, 12346, 95, 1658,
	1497, 1496, 1494, 1481, 1480, 919, 91, 89, 88, 87,
	85, 84, 83, 82, -1000, 81, 80, 79, 74, 73,
	69, 65, 63, 179, 60, 59, 58, 51, 50, 48,
	2890, -1000, 1367, 778, 24007, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 87554, 82538,
	46, -154, 45, -1000, 2938, 993, 40547, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 355, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 512, 1605, 717, -1000, -1000,
	-1000, 79316, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1999, -15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 715,
	-1000, 1998, 187, 1935, -1000, -1000, -1000, -1000, -1000, 82538,
	-1000, -1000, 3270, 3269, 1836, 714, 78860, -1000, 1445, -1000,
	850, 26935, -1000, 1141, -1000, 26935, 351, -1000, -1000, -1000,
	-1000, -1000, -1000, 3267, 3265, 3264, 3260, -1000, -1000, 59540,
	18121, 59078, 58616, 78398, 17649, 66914, 66452, 54934, -1000, -1000,
	-1000, 1241, -1000, -1000, -1000, -1000, -1000, -1000, 22, 52574,
	3113, 82538, -1000, 350, -1000, -1000, -1000, -1000, -1000, -1000,
	33871, 664, 33373, 539, 32875, 491, -1000, -1000, -1000, 54462,
	-1000, 3254, 3253, 1038, 3252, 2843, 87098, 1613, 3251, 1602,
	1148, 962, 3249, 3246, 3235, 3234, 3231, 3227, 1331, 77936,
	2602, 77474, 1690, 53990, 65990, 68294, 2320, 77012, 1328, 1297,
	-1000, -1000, -1000, -1000, 2744, 2549, 2524, 45671, -1000, 3226,
	3224, 3223, 3222, 3221, 86642, 1597, 3218, 2201, 3217, 3215,
	3213, 3212, 3210, 3208, 3207, 3204, -1000, 65528, 65066, 64604,
	2978, 76550, 64142, 53518, -1000, -1000, -1000, 42409, 5280, 4695,
	76088, 43826, 68294, 68294, -1000, -1000, 34357, 52, -1000, -1000,
	-1000, 42886, 2535, -1000, 34357, 52, -1000, 82538, -1000, 2601,
	1747, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2437, 1434, 3118, 53046, 1825, 1272, 2910, 2743, 2707,
	1361, 2233, 2702, 2696, 2694, 2645, 2633, 1665, 2268, 254,
	23509, 1444, 1404, 2631, 2630, 3134, 1738, 1770, 1856, 58154,
	3202, 3201, 2866, 2623, 2622, 2530, -1000, -1000, -1000, -1000,
	1285, -1000, -1000, -1000, 61376, -1000, -1000, 1107, -1000, -1000,
	1107, -1000, -1000, -1000, -1000, -1000, 1239, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1367, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1866, -1000, 1778,
	-1000, -1000, 2196, 2894, 2894, 2894, 2940, 492, 487, -1000,
	179, -1000, -1000, 93979, -1000, -1000, 34357, 34357, 34357, 34357,
	34357, 34357, 34357, 1848, -1000, 713, -1000, -1000, 754, -1000,
	710, 602, -1000, -1000, -1000, -1000, -1000, -1000, 709, -1000,
	-1000, -1000, -1000, -1000, -1000, 3113, -1000, 20533, -1000, -1000,
	-1000, 564, 708, 34357, -1000, -1000, 3148, 3147, 946, -1000,
	338, 894, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2600, 706, 705, -1000, 704, 702,
	701, 700, 699, -1000, -1000, -1000, 697, 696, 694, 690,
	689, 688, 683, 681, -1000, 1760, -1000, -1000, -1000, -1000,
	-1000, -1000, 651, 649, 649, 649, -1000, 943, -1000, -1000,
	-1000, 401, 647, 398, 646, 645, 643, 680, 679, 676,
	675, 671, 669, 668, 667, 666, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 942, -1000, -1000, -1000, -1000, 20, 82538, -1000,
	512, 20, -1000, -1000, 663, -1000, 27421, 27421, 27421, -1000,
	-1000, 1996, 34357, -1000, 2055, -1000, 28, 28, 836, 41469,
	-1000, 39607, 836, 238, 760, 45208, -1000, 2527, -1000, -1000,
	662, 331, -1000, -1000, -1000, -1000, 18591, 2514, 82538, 82538,
	68294, 68294, 68294, 2797, 34357, -1000, -1000, 49806, 82538, 68750,
	3052, 50718, 49806, 82538, 2599, -1000, -1000, -1000, 82538, -1000,
	34357, -1000, 3051, 1386, 55864, 2969, 11, -1000, -1000, -1000,
	-1000, -1000, -1000, 2160, 2167, 1040, 2030, 1645, -1000, 26935,
	2835, -1000, -1000, -1000, 330, 18591, -1000, -1000, -1000, -1000,
	-1000, 2141, 2770, 1258, -1000, 2027, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1693, 2769, -1000, 1931, 2768,
	1677, -1000, -1000, 1941, -1000, -1000, 2861, -1000, -1000, 2238,
	2763, 32, -1000, -1000, 1956, -1000, -1000, 911, 2762, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42886, 52574,
	15, -1000, -1000, -1000, -1000, 0, -1000, 17177, 93979, -1000,
	-1000, -1000, 93979, 872, -1000, -1000, 2761, -1000, 93979, 855,
	-1000, -1000, 2760, -1000, 2597, -1000, -1000, -1000, -1000, 3200,
	-1000, 3198, 2102, 3197, 3196, 3195, -1000, 1537, 1743, 3194,
	-1000, 3193, -1000, -1000, -1000, -1000, -1000, -1000, 63680, 1987,
	-1000, -1000, 62756, -1000, 2101, -1000, -1000, 63218, 952, -1000,
	911, 2097, -1000, 949, -1000, 3192, 2960, 2367, 911, 2093,
	-1000, -1000, -1000, -1000, -1000, 47048, -1000, 47048, -1000, 47048,
	-1000, 1435, -1000, 86186, 28, 28, 3113, -1000, -1000, -1000,
	-1000, -1000, 2759, 3191, 3190, 3189, -1000, 82538, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 184, 2755, -1000, -1000,
	184, 2754, -1000, 184, 2753, -1000, 70574, -1000, -1000, 1939,
	2752, -1000, 181, 2751, -1000, -1000, -46, 2739, -1000, -1000,
	-1, -1000, -1000, -1000, 993, -1000, 41932, -1000, 41932, 75626,
	55404, 899, 733, 48424, 93979, -1000, -141, -1000, -1000, 55404,
	42886, 93979, -1000, 55404, 62756, -1000, 75164, 62300, -1000, -1000,
	1283, 2260, -1000, -1000, -1000, 899, 55404, 55404, 55404, -1000,
	74702, -1000, -1000, 1820, 1595, 2867, 1811, 68294, -1000, 1579,
	-1000, -1000, -1000, 2899, 2595, -1000, 50262, 70118, -1000, 69662,
	-1000, 69206, -1000, 68294, -1000, 68294, -1000, 3188, 3186, 3184,
	-1000, 3183, 2893, 93979, 2891, -1000, 2704, 1500, 1477, 82538,
	-1000, -1000, 82538, -1000, 82538, -1000, -1000, -1000, 1381, -1000,
	-1000, 2157, -1000, -1000, -1000, -1000, 68294, -1000, -1000, -1000,
	-1000, -1000, -1000, 2594, -1000, 1565, -1000, 1572, -1000, 1282,
	-1000, -1000, 192, -1000, -1000, 11, -1000, 85730, -1000, 2196,
	-1000, 82538, -1000, 2142, 2574, 2591, 1453, 1993, 2309, -1000,
	32377, 2245, 36787, 2022, 179, -1000, -1000, 179, 179, 24979,
	-1000, -1000, 50718, 50718, 18591, 1252, 34357, 34357, 34357, 34357,
	34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357,
	34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357,
	34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357,
	34357, 1819, 34357, 1236, 34357, 34357, 34357, 34357, 1671, -1000,
	-1000, 1716, 542, 1842, -1000, 3098, 3098, 3098, 845, 845,
	94355, 94355, 633, 3182, 754, -1000, 34357, -1000, 52, 34357,
	19063, -1000, 487, 9750, 2138, -1000, 484, 19561, -1000, -1000,
	-1000, 20533, 602, 31879, 34357, 929, 93979, -1000, -1000, 1210,
	3115, 16707, 2613, 2427, 661, 806, 677, 23011, 22513, 22015,
	21517, 597, 34357, 34357, 34357, 34357, 34357, 34357, 34357, 34357,
	-1000, -1000, 3125, -1000, 3115, -1000, -1000, -1000, -1000, 3115,
	1251, 1248, 3115, -1000, 3115, 3115, 2057, 2057, 31393, 30895,
	30397, 37273, 29899, 34357, 21019, 29401, 28903, -1000, 82538, 20,
	3049, 34357, 129, -1000, 92532, -1000, 129, 129, 660, -2,
	93979, 2322, 2322, 41008, 1985, 1873, 1873, 1873, -1000, 836,
	12918, 836, 73786, 1882, 836, 836, 324, 328, 483, 39146,
	2055, 73786, 725, 657, 43, 40, 38, -1000, -1000, 36,
	35, -1000, -1000, 68294, 656, 19063, 18591, 318, 1349, -3,
	2282, 2280, 2279, -1000, 2277, 1528, -12, 1231, -169, -1000,
	213, -13, -1000, 1192, 314, 3115, -1000, -1000, -1000, -1000,
	-1000, 3181, 3180, -1000, 941, 655, 653, 309, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 651, 649, 649, 649,
	-1000, 401, 647, 398, 646, 645, 643, -1000, -1000, -1000,
	-1000, 2513, 0, 68750, 834, -19, 1041, 11, -1000, -1000,
	-1000, 55864, 1107, -1000, 1869, -1000, -1000, -1000, -1000, -1000,
	-1000, 1336, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 946,
	-1000, -1000, -1000, -1000, -1000, -1000, 3107, 3105, 19, -1000,
	-1000, 18591, -1000, 10, 1562, -1000, 57692, 2087, 2870, 2851,
	1423, -1000, 1364, 2937, 61376, 2987, 3045, 544, -1000, 2511,
	-1000, -1000, 849, 1564, 1230, 61376, 1931, -1000, 50718, -1000,
	2285, 2934, 1234, 1246, 1234, 1234, 1249, -1000, 61376, 1212,
	-1000, 1209, -1000, 8, 2986, 3008, 202, -1000, 2509, 1206,
	-1000, -1000, 68294, 18591, 1398, 1391, 1491, 1203, 18, -1000,
	2981, 2976, -1000, 1566, -1000, 55404, 810, 15, 52574, 82538,
	313, -1000, 34357, 52, 34357, 52, 2966, -1000, -1000, 2734,
	-1000, -1000, -1000, 3179, 1682, 2195, -1000, -1000, -1000, 640,
	2090, 2506, 82538, 2294, 14, 68294, -1000, 2729, 1931, 2088,
	-1000, -1000, 61838, -1000, 2728, 693, 3178, -1000, 85274, -1000,
	2882, 1254, 2724, 999, 505, 3047, -1000, 505, 47504, -1000,
	82538, -1000, -1000, 82538, -1000, -1000, -1000, 3177, -1000, 68294,
	-1000, -1000, 68294, -1000, 68294, -1000, 68294, 180, 2722, -1000,
	-1000, 82538, -1000, 68294, 68294, 55404, 55404, 548, 56780, -26,
	-27, 480, -1000, 74246, 82538, 998, 57236, 82538, 2825, 899,
	42886, -1000, -28, -141, 899, 899, 810, -1000, 810, -1000,
	68294, 2590, -1000, 899, 899, 899, -1000, -1000, -1000, -1000,
	3176, 3175, -1000, -1000, -1000, 907, 68294, 82538, 68294, -1000,
	-1000, 82538, -1000, 82538, -1000, 907, 82538, 907, 82538, 907,
	82538, -1000, -1000, -1000, -1000, -1000, -1000, 52, 34357, 1502,
	-1000, 2586, -1000, 2584, -1000, 72, -1000, -1000, -1000, -1000,
	-1000, 1689, 68294, 68294, 68294, 68294, 82538, 68294, -1000, 61376,
	-1000, 2142, 2574, -1000, -1000, -1000, -1000, -1000, -1000, 1238,
	1943, -1000, 2252, -1000, 1379, -1000, -1000, -1000, 93979, 37743,
	-1000, -1000, 93979, 1526, -1000, 36301, 35815, -1000, -1000, 1506,
	68294, 2305, -1000, 2305, -149, -1000, 91924, 2250, 68294, -1000,
	-1000, -1000, -1000, -1000, 848, 691, 691, 1215, 1215, 1215,
	1215, 3059, 281, 928, 621, 4324, 4324, 4858, 4858, 4858,
	4858, 4858, 4324, 1240, 845, 845, 1240, 1240, 1240, 1240,
	1240, 845, 845, 845, 4324, 4324, 4324, 94355, 94136, 7424,
	34357, 34357, 1200, 1712, 542, 6390, 34357, 7729, 7729, 7729,
	7729, -1000, 1474, -1000, -1000, -1000, -1000, 2505, 639, 37273,
	37273, -1000, -1000, -1000, -1000, 20047, 34357, -1000, -1000, -1000,
	-1000, 28405, -1000, -1000, 91495, -269, 479, -136, -18, -1000,
	34357, 34357, 34357, 478, -1000, 312, 34357, 82538, -1000, 88830,
	724, -219, -1000, -29, 1260, -1000, 34357, -1000, -1000, 1186,
	-1000, 1175, 1164, 1147, -1000, 637, 477, -1000, 310, -1000,
	1851, 635, 627, 34357, -1000, -1000, -1000, -1000, -1000, 91338,
	-1000, -1000, 91182, -1000, -1000, 90962, -1000, -1000, 90805, -1000,
	-1000, -1000, 93823, 88517, 88473, 12153, 6546, 11844, 11298, -40,
	476, -41, 475, 847, 839, 473, 472, 469, -43, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -48, 467, -1000,
	2503, -136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	466, -1000, 465, -1000, 93603, -136, 462, 5314, -1000, 37273,
	37273, 37273, -1000, 458, -1000, 92228, -1000, 93299, 27919, 27919,
	27919, 456, 93219, 34357, -136, -49, -1000, -50, -1000, -1000,
	554, -51, 920, 27421, 40084, 18591, -1000, 920, 920, 34357,
	-1000, 34357, 2266, -1000, -1000, -1000, 2263, 1983, 2322, 41008,
	-1000, -1000, -1000, -1000, 73786, -1000, 3113, 2654, -1000, 73786,
	-1000, -1000, 82538, 512, -1000, 73786, 73786, 18591, 836, -1000,
	836, 73786, 549, -1000, -1000, -1000, -1000, -1000, 455, 44286,
	-18, 306, 18591, 899, -1000, 2310, 2310, 2310, 2310, -1000,
	-1000, 82538, 3068, -1000, 1780, -1000, 50718, -1000, 739, 1110,
	18591, -1000, -1000, -1000, 626, -1000, 3115, 3115, -1000, 3115,
	82538, 107, 26935, -1000, 1107, -1000, -1000, 1384, -1000, 1726,
	-1000, 1247, -1000, -1000, -1000, -1000, 26935, -1000, 1989, 82538,
	82538, 68294, -1000, -1000, 2085, 84818, 2078, 50718, 82538, -1000,
	-1000, 623, 620, 2247, 2235, 992, 82538, 82538, 2232, 84362,
	83906, 82538, 1821, 34357, 1841, 1742, 52, 52, -1000, -1000,
	52, 619, 1153, 68294, 68294, 68294, 1667, -1000, -1000, -1000,
	-1000, -1000, 60920, -1000, -1000, 3123, 3122, -1000, 1234, -1000,
	-1000, -1000, 1234, 1931, 1634, 68294, 82538, 1788, 52, 52,
	-1000, -1000, 52, 618, 18591, 1753, -1000, 2589, 82538, 3145,
	82538, 82538, 82538, 52118, 2892, 83450, 82538, 1566, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51658, 1005, 911, 2376, -1000,
	-1000, 16237, 93979, -1000, 93979, -1000, 49806, 82538, -1000, 950,
	82538, 57236, 881, 2719, 46592, 0, 899, 55404, 68294, 14,
	82538, -1000, 1931, 2716, 512, 2074, -1000, -1000, 55404, 608,
	3174, 3172, -1000, 1986, 2072, -1000, -1000, 82994, 2781, 797,
	82538, 920, 41008, 1655, -1000, 44748, 969, 82538, 1583, 99,
	-1000, -1000, -1000, 57, 82538, -1000, 3171, -1000, -1000, 184,
	184, 184, -1000, 68294, 68294, 1939, -1000, 181, -1000, -46,
	-1000, -1000, 548, 548, 899, -191, 607, -1000, 829, 827,
	43356, 55404, -56, -1000, -1000, -1000, -1000, -1000, 68294, 82538,
	747, 2359, 82538, -58, -1000, 303, 604, -1000, -1000, -1000,
	899, 2502, -1000, -1000, 917, -1000, 1279, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 27, 0, 0, -1000,
	907, -1000, 907, -1000, 907, -1000, 93979, -1000, 1482, 1443,
	82538, -1000, 18591, 82538, 68294, 18591, 68294, 2572, 2548, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1014, -1000, 1526,
	1942, -1000, 602, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2143, -1000, 12, 24979, 2025, -1000, -1000, 68294,
	25, 34357, 34357, 6173, 5358, 34357, 37273, 37273, -1000, 34357,
	4109, -1000, -1000, -1000, -1000, -1000, 2496, 601, 34357, 50718,
	7293, 6013, -1000, 449, 11207, 1240, -1000, 34357, -1000, 440,
	26449, -1000, 92611, -42, -63, -1000, 13401, -136, -64, -1000,
	-1000, 738, -1000, 2777, -1000, 34357, 92915, 2122, 1782, 1681,
	1451, 3115, 3143, 15767, -1000, 47964, 921, 1907, 90649, -1000,
	-1000, -1000, -1000, 50718, 50718, 34357, 34357, -1000, 34357, 34357,
	34357, -1000, -1000, -1000, 3115, 857, -1000, -1000, -1000, 857,
	-1000, -1000, 1234, -1000, 1234, -1000, 34357, -1000, -1000, 2494,
	34357, -1000, 50718, 50718, 37273, 37273, 37273, 37273, 37273, 37273,
	37273, 37273, 37273, 37273, 37273, 37273, 37273, 37273, 37273, 37273,
	37273, 37273, 37273, 2173, 37273, 3096, 3096, 3096, -1000, 2544,
	2494, 34357, 34357, 50718, 439, 437, 433, -1000, 34357, -136,
	-1000, -1000, 548, 600, -1000, 2128, -1000, 2424, -1000, 34357,
	-1000, -159, -1000, 2055, -1000, -1000, 2424, 2424, -66, 93979,
	41008, 41008, -1000, 596, 34357, 2262, -1000, -1000, 723, -267,
	-1000, 823, -1000, -1000, -1000, -1000, -1000, 512, -1000, -1000,
	-1000, 301, 73786, 73786, 722, -1000, -71, -1000, -1000, -72,
	-1000, 3042, 432, 18591, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 0, 1930, 3141, -1000, 3117, 737, 721, 300,
	3115, 429, 428, 425, 0, 82538, -1000, 11, -1000, -1000,
	-1000, 34357, -1000, -1000, 2869, 1083, 1082, -1000, 2706, -1000,
	2070, -1000, 974, -1000, 1749, -1000, 34357, 34357, 595, 591,
	3170, 1684, 3169, 997, 2687, 1939, 2682, 1939, -1000, -1000,
	859, -1000, 93979, 590, 585, -1000, 10, 1521, 916, -1000,
	-1000, 34357, 34357, 73330, -1000, 427, 2861, 24, -1000, 1081,
	-1000, -1000, -1000, -1000, 1931, 1079, -1000, -1000, -1000, 913,
	-1000, -1000, 34357, -1000, 8, 1078, 2980, 2064, 68294, 1067,
	-1000, 1058, -1000, -1000, -1000, -1000, -1000, -1000, 2971, 1939,
	2680, 1218, -1000, -1000, -1000, 51188, -1000, 906, 2492, -1000,
	1051, 3168, 68294, 3167, 416, -74, 2, 50718, 3041, 1958,
	636, 68294, 851, -1000, 3113, -1000, -1000, -1000, -1000, 68294,
	3039, 2677, 911, 3139, -1000, -1000, 68294, 2675, 1981, 2062,
	2168, 797, 56324, -1000, 911, 1904, -24, -1000, 1583, 25951,
	2858, -85, -1000, -1000, -1000, 920, 47504, 41008, 34357, 3165,
	-88, -1000, -1000, -1000, -1000, -1000, 180, -1000, -1000, -1000,
	-1000, -1000, 72414, 72414, 55404, 55404, 55404, 899, 82538, 82538,
	57236, -1000, 581, 82538, 82538, 579, -1000, 82538, 82538, 3164,
	55404, -1000, 52, -1000, 1924, 68294, 15297, -1000, -1000, -1000,
	-1000, -1000, 907, -1000, -1000, 1804, 1991, 1804, 1555, 1553,
	-1000, 1938, -1000, -1000, -1000, -1000, 2293, 2881, 18591, 2992,
	7729, 34357, 34357, 267, 5418, 4545, 7729, 34357, 34357, 50718,
	8408, -93, 34357, 34357, -1000, 34357, 720, 93979, 3138, 34357,
	413, 412, -1000, -1000, -1000, 3114, -1000, -1000, -1000, 93979,
	34357, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 411, -1000,
	299, -1000, -1000, -1000, 88010, -1000, 34357, 410, 2933, -1000,
	408, 407, 10250, 353, 90429, 90272, 90116, 406, -1000, -1000,
	405, 403, 93979, 2544, 93979, -1000, -1000, 854, 854, 1226,
	1226, 1226, 1226, 3096, 807, 453, 1469, 304, 304, 304,
	868, 908, 908, 304, 304, 304, 2482, 2192, 572, 6594,
	-1000, -1000, 93979, 93979, 396, -1000, -1000, -1000, -136, 388,
	548, -1000, 2416, 2929, 93979, -1000, 41008, 2416, 2416, -1000,
	-1000, 1983, 82538, 93979, 41008, -1000, 2654, -1000, 13882, -1000,
	18591, -1000, -1000, -1000, -1000, 3113, -1000, 44286, -1000, 569,
	-1000, 289, -1000, -1000, 719, 3163, 734, 18591, 386, -1000,
	-1000, -1000, 0, 93979, 82538, 82538, 82538, 2669, -1000, 2033,
	-1000, 992, 89896, -94, -1000, 91924, 34357, 82538, -1000, -1000,
	1752, 2251, 1028, -1000, 2902, 82538, -1000, 82538, -1000, -1000,
	82538, 82538, 68294, 2644, -95, 93979, -4, -1000, 822, -1000,
	1256, -1000, 14827, 68294, 68294, 2639, -100, 18591, -1000, 3137,
	3136, 2667, 2906, 3135, 82538, -1000, 82538, 68294, 2824, -1000,
	-1000, -1000, 1925, 55404, 42886, -1000, 512, -1000, 2331, -1000,
	71492, 1946, 52, -1000, 72874, 3162, 567, -1000, 1920, -1000,
	692, 1931, 52, 68294, -1000, 385, -14, -1000, 982, 18591,
	68294, 2666, 2188, 797, 56324, -1000, 1254, 2309, -1000, -22,
	-1000, 589, 52, 1904, -1000, -24, 93979, -1000, 812, -1000,
	-1000, -101, -1000, -1000, 377, -1000, 2822, 2821, -1000, 2466,
	34357, 566, 563, 82538, 2819, -1000, -1000, -108, -1000, 2023,
	-1000, -1000, -1000, -1000, -1000, 18591, 1484, -1000, 559, 558,
	-1000, -1000, -1000, -1000, 2881, 7729, 7729, 34357, 34357, 34357,
	7729, 8408, -110, -1000, 7729, 7729, -136, -1000, -1000, 92611,
	-1000, -1000, -1000, 93979, -1000, 14357, 1805, -1000, 89739, -1000,
	24979, -1000, -1000, 34357, 34357, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 37273, 2478, 557, 50718, -1000, -1000, 376,
	909, 34357, 34357, 2055, 909, 909, -1000, -111, -1000, -1000,
	-1000, 3113, 289, -1000, -1000, 3160, 18591, 727, -1000, 3159,
	-1000, -1000, -1000, -1000, -1000, 82538, -1000, 82538, -1000, 18591,
	82538, 2431, 2047, -1000, -1000, 2230, 556, 37273, 68294, 570,
	-1000, 3062, 2401, 1687, 34357, 2025, -122, -123, 2046, -1000,
	-1000, 2041, 34357, -1000, 50718, 555, 1939, 1939, -124, -125,
	-1000, 34357, 1049, 82538, 25465, -1000, 3158, 2861, -1000, -1000,
	34357, 1048, -1000, -1000, -1000, 3133, 1939, 18591, -1000, 1939,
	1939, 2906, 1025, -25, 552, -1000, 804, -1000, -1000, -46,
	906, 3038, 1788, 2386, -1000, -1000, -1000, -1000, 2227, -1000,
	-1000, 82538, 2205, 901, -139, -1000, 803, 801, -1000, 57236,
	881, 889, -1000, -1000, -1000, 512, -1000, 3099, 547, 82538,
	1970, 546, 18591, -1000, 797, 56324, -1000, 2781, 1583, -1000,
	2789, 82538, 2847, -1000, 2309, 542, -1000, 899, 541, 538,
	2216, 2216, -142, 34357, 34357, -153, 537, 899, -86, -1000,
	844, 842, -1000, -1000, 68294, 68294, 34357, 34357, -1000, 7729,
	7729, 7729, -1000, 370, -1000, -1000, 1904, 2926, -1000, -107,
	89583, 89363, 5399, 37273, 50718, -162, -1000, -1000, 82538, 93979,
	-136, -1000, -1000, -1000, 550, -1000, 3155, -1000, -1000, 1888,
	-1000, -1000, -1000, 82538, 2061, -1000, 985, 34357, 6594, 535,
	34357, -1000, 3000, -1000, 2327, 2473, 2331, 534, -1000, -1000,
	-1000, -1000, -1000, 977, 1673, -1000, -1000, 93979, 2906, 34357,
	-1000, -1000, 528, 527, 93979, 523, 783, 2477, -1000, -1000,
	-1000, 93979, 520, 2980, -1000, -1000, -1000, -1000, 1939, 68294,
	1865, 1865, 55404, 1694, 52, 881, -1000, 1835, 1946, 516,
	-1000, -1000, 1940, 2292, -1000, 72874, 38683, 38683, 364, 2997,
	889, -1000, 3109, -1000, 2993, -1000, 34357, -1000, 68294, 34357,
	1969, 56324, -1000, 2168, -1000, 1181, -164, 82538, 1583, -1000,
	-1000, 55404, 55404, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 977, -170, -171, -1000, 55404, -1000,
	2023, -1000, 82538, -1000, 82538, -1000, -1000, -172, -173, -1000,
	1847, 34357, 24979, -1000, -1000, 5399, -178, -1000, -121, -1000,
	2991, -1000, -1000, -1000, -1000, 2658, 2413, 89206, 2139, 82538,
	89050, -1000, 2472, -1000, -1000, 1788, 82538, 2331, 2403, 68294,
	983, -179, 1804, 1804, 34357, 24493, 1833, 34357, -1000, -1000,
	2906, -1000, -180, -1000, 2438, 2422, -1000, 1940, 68294, 82538,
	-1000, 2895, -1000, 2818, -1000, -1000, -1000, 2331, 52, -1000,
	-1000, 52, -189, 982, -190, 68294, -1000, 2188, 1407, -1000,
	920, -1000, -1000, -192, -199, 1687, 977, 920, -201, -1000,
	-207, -208, -1000, -1000, 354, 35329, 35329, 35329, -136, -149,
	-1000, 82538, 515, 2624, 905, -1000, 1951, 1635, 109, 989,
	-1000, -1000, 2401, -213, -1000, 904, 512, -1000, 34357, 977,
	-214, -1000, 968, -216, -1000, 967, -227, -1000, 2453, -1000,
	-229, 1939, -1000, 903, 2964, -1000, -1000, -1000, -1000, -1000,
	507, -230, -1000, -1000, 2011, -1000, 1788, 901, -1000, 977,
	506, 1687, 503, -1000, 47504, -1000, 899, 899, 2331, 1687,
	-1000, 899, -1000, -1000, -1000, 2746, -1000, 38213, 1945, 1548,
	91845, 2746, 2746, -1000, -1000, 82538, 2947, -1000, 1964, 1959,
	1327, -1000, -1000, -1000, -1000, -1000, -1000, 920, -1000, 2946,
	2139, 93979, 2331, -1000, 1804, 2383, -1000, 1804, 2441, -1000,
	1830, -1000, -1000, -1000, 2649, 3095, 82538, -1000, 82538, 1523,
	1519, 3154, 881, 1940, 1687, 34357, 2331, 34357, -221, -1000,
	-1000, 1788, 2331, -1000, -1000, 1611, 3050, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 781, -1000, 2804, -1000, 1012,
	1947, 1947, -1000, 779, 1951, -1000, -1000, 502, -1000, 496,
	-1000, 1511, -1000, -1000, -235, -1000, -1000, 3153, -1000, 1940,
	-1000, 2331, -237, 1788, -238, -1000, 920, 1788, 1531, -1000,
	-1000, 1876, 34843, 34357, -1000, 3072, -1000, -1000, 2211, -1000,
	34357, 2401, 34357, 34357, 1919, 1886, -1000, -1000, 1788, 977,
	920, 1687, -1000, 920, -1000, -1000, -1000, 93979, -1000, -1000,
	-1000, 93979, -1000, -240, -243, 46132, -1000, -1000, -1000, 920,
	1687, -1000, 2331, -1000, 1788, 1047, -191, 72414, -1000, 2331,
	1788, -1000, 495, -249, 1788, 920, 34357, -1000, 920, -1000,
	-255, -1000, 1788, -1000,
}

var sqlPgo = [...]int{
	0, 3815, 3812, 3811, 3810, 3809, 3807, 3806, 3803, 3797,
	3795, 3794, 3793, 3792, 3789, 3785, 3784, 3782, 3781, 3780,
	3778, 3776, 3774, 3773, 3771, 3769, 3768, 3766, 3765, 3764,
	3763, 3762, 3755, 3754, 3753, 3752, 3751, 3749, 3747, 3746,
	3744, 3743, 3742, 3739, 3738, 3737, 3736, 3734, 37, 3732,
	3731, 3730, 3729, 3727, 3726, 3725, 3724, 3723, 3722, 3721,
	3720, 3716, 3715, 3714, 3713, 3712, 3710, 39, 3707, 226,
	3701, 3700, 3699, 3696, 3693, 3692, 3691, 3690, 3689, 3687,
	3686, 224, 3684, 118, 3674, 3671, 3670, 3669, 3668, 223,
	3667, 3666, 3664, 3663, 3662, 3657, 3653, 3652, 92, 206,
	3650, 280, 3649, 3646, 3645, 3640, 3639, 3638, 3637, 3636,
	3635, 3634, 207, 3633, 221, 3631, 3629, 3628, 3625, 3624,
	3623, 3621, 3620, 3619, 3616, 3614, 3612, 3611, 3610, 3609,
	3608, 3607, 3606, 3605, 3601, 3598, 3597, 3596, 3595, 3593,
	3592, 3591, 3589, 3586, 228, 148, 3585, 3582, 220, 218,
	3581, 3579, 3578, 3577, 3576, 100, 6, 86, 3574, 3571,
	63, 46, 42, 113, 45, 3567, 16, 251, 196, 4147,
	190, 3566, 3565, 3564, 210, 158, 3563, 192, 3562, 3559,
	3555, 3550, 73, 65, 147, 143, 129, 140, 103, 3548,
	3546, 75, 57, 41, 32, 3541, 3539, 3537, 2777, 117,
	3536, 219, 193, 126, 3531, 3527, 3526, 1809, 3524, 34,
	3515, 362, 90, 112, 82, 91, 3509, 120, 29, 3506,
	152, 40, 3501, 122, 72, 64, 7635, 7118, 3498, 84,
	48, 76, 620, 136, 127, 163, 132, 175, 174, 146,
	105, 3494, 232, 3493, 3014, 59, 128, 3492, 3488, 3485,
	60, 166, 77, 3481, 3480, 49, 10, 5, 1, 144,
	15, 80, 17, 3479, 21, 3478, 3477, 3474, 3469, 27,
	133, 3468, 233, 3467, 99, 36, 24, 3466, 20, 178,
	3464, 194, 98, 3461, 3458, 208, 169, 162, 3455, 159,
	188, 3453, 3452, 3451, 3450, 3447, 97, 26, 102, 3446,
	3445, 114, 201, 160, 3442, 43, 3441, 142, 79, 106,
	227, 104, 182, 88, 183, 149, 186, 3436, 3435, 3434,
	157, 3433, 3432, 179, 115, 3430, 3427, 171, 234, 33,
	61, 191, 54, 156, 134, 3426, 168, 3424, 3421, 3420,
	231, 141, 177, 3, 2, 70, 96, 31, 13, 189,
	119, 240, 94, 3418, 4578, 1328, 2256, 38, 3416, 116,
	95, 51, 93, 121, 217, 53, 3414, 3411, 1559, 3409,
	3408, 3402, 3396, 153, 3395, 3394, 3392, 110, 108, 170,
	3391, 66, 67, 11, 107, 254, 229, 87, 181, 164,
	245, 3389, 150, 3387, 44, 124, 3386, 167, 212, 3384,
	3383, 123, 3382, 125, 383, 47, 154, 3381, 180, 3380,
	3379, 3376, 3375, 3372, 3371, 3370, 200, 187, 3369, 3368,
	3366, 138, 155, 3365, 215, 161, 139, 71, 35, 3364,
	83, 3484, 3361, 55, 185, 56, 3360, 78, 52, 0,
	9292, 8489, 6173, 8579, 3359, 2189, 3358, 3356, 3355, 176,
	109, 3353, 3352, 3351, 81, 3349, 58, 3348, 3347, 50,
	3346, 12, 7, 8, 18, 19, 1495, 248, 3343, 3340,
	85, 101, 130, 3338, 222, 184, 3337, 3335, 3334, 3332,
	74, 3328, 28, 3326, 23, 3325, 3317, 30, 14, 22,
	3316, 3310, 198, 3305, 205, 3304, 135, 3303, 2993, 111,
	3302, 3301, 213, 62, 3300, 211, 3298, 2964, 3297, 3296,
	9, 3294, 145, 172, 3293, 3292, 3288, 137, 3287, 3285,
	3284, 209, 3282, 3281, 25, 3280, 4, 3279, 3277, 173,
	2801, 3275, 3274, 69, 3273, 151,
}

var sqlR1 = [...]int{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 11,
	11, 7, 7, 8, 8, 8, 36, 36, 9, 9,
	9, 10, 10, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 15, 15, 26, 26, 16, 16, 28, 28,
	17, 17, 29, 29, 502, 502, 20, 31, 21, 32,
	14, 503, 503, 503, 503, 25, 22, 33, 23, 23,
	23, 23, 23, 158, 158, 158, 158, 19, 19, 27,
	27, 185, 185, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 501, 501, 187, 187, 186,
	181, 181, 504, 504, 188, 188, 188, 190, 190, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 405, 405,
	405, 515, 515, 515, 516, 516, 517, 517, 517, 517,
	517, 37, 37, 496, 496, 160, 160, 160, 162, 162,
	161, 161, 161, 58, 58, 509, 509, 510, 510, 508,
	508, 511, 511, 511, 159, 159, 159, 97, 97, 97,
	98, 98, 99, 99, 163, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 85, 85, 437, 437, 438, 438,
	154, 154, 155, 155, 155, 155, 156, 156, 157, 157,
	157, 51, 39, 39, 39, 39, 39, 39, 39, 40,
	40, 40, 40, 41, 41, 41, 41, 41, 41, 42,
	42, 42, 42, 42, 42, 49, 49, 49, 49, 145,
	145, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	518, 518, 518, 518, 518, 518, 518, 518, 518, 518,
	518, 518, 518, 518, 518, 518, 518, 518, 518, 518,
	519, 519, 520, 520, 521, 521, 522, 522, 522, 522,
	522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
	522, 522, 522, 522, 522, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 64, 64, 271, 271, 243, 243, 65,
	65, 65, 66, 66, 67, 67, 53, 53, 494, 494,
	286, 286, 396, 396, 69, 69, 306, 306, 70, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 78, 78, 78, 79, 79, 79, 76, 76, 76,
	74, 74, 74, 73, 73, 73, 77, 77, 77, 235,
	235, 75, 75, 75, 287, 287, 80, 80, 80, 80,
	244, 81, 81, 81, 81, 81, 81, 81, 81, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 398, 398, 82, 82, 82, 366,
	366, 86, 86, 86, 321, 321, 87, 87, 87, 87,
	87, 88, 88, 88, 88, 100, 100, 100, 100, 498,
	498, 279, 279, 201, 201, 201, 201, 93, 93, 93,
	93, 94, 94, 94, 95, 95, 150, 150, 106, 106,
	106, 106, 106, 105, 105, 105, 105, 105, 105, 43,
	43, 43, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 48, 48, 48, 108, 108, 512, 512, 110,
	107, 107, 107, 109, 109, 109, 109, 111, 112, 112,
	112, 112, 112, 112, 112, 112, 113, 113, 430, 430,
	295, 295, 428, 428, 446, 446, 429, 429, 248, 248,
	248, 248, 248, 249, 249, 249, 436, 436, 436, 436,
	436, 436, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 151, 151,
	152, 153, 153, 153, 153, 133, 133, 133, 144, 144,
	144, 144, 144, 144, 144, 136, 136, 136, 123, 123,
	115, 115, 115, 115, 115, 119, 119, 119, 119, 119,
	119, 119, 119, 116, 116, 125, 125, 125, 125, 125,
	120, 120, 122, 122, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 117, 117, 117, 117, 127, 127, 127,
	127, 328, 328, 328, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 140, 140, 140, 140, 140, 140,
	380, 380, 134, 134, 134, 134, 139, 139, 139, 139,
	311, 311, 131, 131, 131, 132, 132, 132, 137, 137,
	138, 135, 135, 141, 141, 141, 141, 118, 118, 118,
	523, 523, 523, 142, 142, 130, 130, 143, 143, 143,
	143, 143, 143, 143, 143, 129, 129, 129, 128, 128,
	128, 128, 121, 495, 495, 492, 492, 492, 492, 492,
	492, 492, 492, 493, 493, 497, 497, 91, 91, 91,
	59, 59, 59, 60, 60, 166, 166, 166, 166, 256,
	256, 256, 256, 164, 164, 165, 165, 61, 61, 524,
	524, 524, 505, 505, 505, 506, 506, 506, 506, 506,
	506, 250, 250, 251, 251, 346, 346, 346, 346, 346,
	254, 254, 254, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 257, 257, 189, 189, 189, 260, 261, 261,
	258, 258, 259, 259, 259, 263, 263, 262, 265, 265,
	264, 345, 455, 455, 457, 457, 457, 457, 457, 457,
	457, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 525, 525, 453, 453, 453, 454, 449, 449,
	450, 450, 450, 450, 450, 252, 252, 253, 253, 253,
	253, 451, 452, 277, 277, 383, 456, 456, 458, 458,
	460, 526, 526, 526, 526, 526, 526, 527, 527, 527,
	344, 344, 343, 343, 269, 269, 461, 461, 461, 461,
	462, 462, 462, 462, 462, 465, 464, 463, 463, 463,
	463, 463, 63, 63, 63, 308, 308, 307, 307, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 147, 147, 204, 204, 57, 57,
	57, 12, 12, 12, 507, 507, 507, 62, 62, 62,
	62, 203, 203, 203, 203, 203, 203, 500, 500, 499,
	499, 205, 205, 529, 529, 68, 68, 68, 68, 68,
	68, 68, 399, 399, 400, 400, 56, 56, 56, 56,
	56, 329, 329, 327, 327, 326, 326, 276, 276, 382,
	209, 209, 182, 182, 182, 24, 18, 18, 34, 34,
	35, 35, 30, 30, 513, 513, 514, 514, 92, 92,
	96, 96, 96, 104, 104, 146, 146, 146, 146, 146,
	146, 146, 38, 38, 38, 38, 50, 50, 50, 50,
	102, 531, 531, 531, 103, 103, 103, 530, 530, 202,
	202, 340, 340, 341, 341, 532, 532, 342, 342, 342,
	342, 196, 195, 197, 197, 55, 55, 55, 191, 191,
	192, 192, 193, 193, 194, 194, 533, 533, 89, 89,
	89, 149, 149, 242, 242, 242, 336, 336, 336, 270,
	270, 215, 215, 339, 339, 337, 337, 337, 337, 305,
	305, 305, 148, 148, 284, 284, 297, 297, 298, 298,
	393, 393, 299, 101, 101, 169, 169, 167, 167, 167,
	167, 167, 167, 167, 167, 174, 174, 175, 175, 176,
	176, 177, 178, 178, 178, 178, 288, 288, 179, 179,
	179, 168, 168, 168, 170, 170, 170, 170, 170, 170,
	170, 173, 173, 173, 173, 180, 180, 180, 172, 172,
	472, 472, 472, 474, 474, 476, 476, 475, 475, 471,
	471, 473, 473, 528, 528, 310, 310, 310, 267, 268,
	266, 266, 274, 274, 272, 273, 273, 275, 275, 381,
	381, 381, 183, 183, 183, 302, 302, 302, 302, 303,
	303, 332, 332, 330, 330, 330, 330, 331, 331, 333,
	333, 333, 334, 334, 335, 335, 301, 301, 362, 362,
	171, 171, 171, 281, 281, 281, 282, 282, 352, 352,
	352, 352, 352, 352, 353, 353, 351, 351, 351, 351,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 385,
	386, 386, 283, 283, 387, 338, 338, 490, 490, 490,
	491, 491, 379, 379, 388, 388, 388, 388, 388, 388,
	377, 377, 378, 378, 394, 395, 395, 314, 314, 314,
	314, 312, 312, 315, 315, 315, 315, 313, 313, 389,
	389, 389, 389, 304, 304, 390, 390, 390, 390, 391,
	347, 348, 348, 401, 401, 401, 401, 403, 280, 280,
	280, 280, 280, 448, 447, 447, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 417, 417, 417, 417, 417,
	417, 417, 417, 418, 418, 418, 418, 418, 418, 404,
	404, 404, 404, 404, 408, 408, 408, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 409, 409,
	414, 414, 415, 415, 415, 410, 411, 416, 416, 416,
	416, 534, 534, 420, 420, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 406, 406, 406, 413, 413, 413,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 322, 322, 324, 324, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 356, 356, 356, 356, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 466, 466, 466, 466, 466, 466, 466,
	466, 358, 358, 469, 469, 470, 470, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 477, 477, 478, 478,
	480, 480, 481, 481, 482, 483, 483, 483, 484, 485,
	485, 479, 479, 486, 486, 486, 486, 487, 487, 488,
	488, 488, 488, 488, 489, 489, 489, 489, 489, 368,
	368, 369, 369, 375, 375, 375, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 206, 206, 206, 206, 206, 293, 293, 291,
	291, 291, 294, 294, 292, 292, 290, 290, 289, 289,
	365, 365, 363, 363, 367, 367, 316, 316, 419, 419,
	419, 419, 419, 419, 419, 419, 317, 317, 317, 325,
	318, 318, 319, 319, 319, 319, 319, 359, 360, 320,
	320, 320, 361, 361, 370, 374, 374, 373, 372, 372,
	371, 371, 349, 349, 350, 350, 300, 300, 535, 535,
	296, 296, 392, 392, 392, 392, 246, 246, 285, 285,
	245, 245, 237, 237, 238, 238, 238, 238, 278, 278,
	376, 376, 421, 421, 422, 422, 423, 423, 424, 424,
	425, 426, 427, 364, 364, 225, 224, 212, 213, 223,
	222, 221, 211, 214, 218, 219, 220, 216, 217, 231,
	230, 229, 236, 227, 228, 397, 210, 239, 239, 240,
	240, 240, 241, 241, 241, 241, 207, 207, 208, 208,
	232, 232, 233, 234, 234, 226, 226, 226, 198, 198,
	198, 199, 199, 200, 200, 435, 435, 432, 432, 432,
	433, 433, 433, 434, 434, 434, 434, 431, 431, 431,
	431, 431, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 440, 440, 441, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	442, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 445, 445,
}

var sqlR2 = [...]int{
	0, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 9, 6, 9,
	6, 5, 6, 5, 1, 1, 5, 5, 6, 6,
	4, 4, 4, 4, 3, 4, 4, 4, 7, 7,
	9, 8, 9, 5, 3, 5, 7, 4, 12, 4,
	12, 1, 3, 5, 5, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 10, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 0, 7,
	10, 8, 6, 6, 6, 9, 4, 3, 2, 2,
	0, 1, 1, 1, 1, 3, 6, 4, 6, 7,
	9, 7, 2, 0, 1, 2, 5, 0, 1, 3,
	3, 1, 1, 12, 3, 1, 0, 1, 1, 2,
	2, 3, 3, 0, 5, 7, 0, 5, 6, 2,
	1, 3, 1, 3, 1, 6, 4, 9, 7, 12,
	12, 12, 9, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 6, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 6, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	3, 3, 4, 3, 4, 7, 4, 4, 4, 3,
	5, 7, 4, 3, 3, 4, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 2, 1,
	2, 1, 2, 7, 3, 2, 0, 1, 3, 3,
	1, 0, 1, 2, 2, 1, 6, 5, 1, 2,
	1, 3, 2, 0, 9, 3, 2, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	5, 7, 3, 4, 6, 3, 4, 6, 3, 1,
	3, 3, 5, 3, 1, 3, 2, 2, 2, 2,
	1, 2, 2, 5, 3, 3, 6, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 3, 3, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 2,
	1, 3, 3, 3, 3, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	4, 5, 5, 5, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 4, 3, 3, 3, 3, 4, 3,
	1, 1, 1, 2, 3, 2, 3, 6, 6, 7,
	9, 7, 9, 3, 4, 10, 10, 3, 5, 5,
	5, 3, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	3, 6, 3, 11, 14, 0, 2, 4, 3, 0,
	4, 5, 4, 3, 3, 1, 3, 10, 13, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 8, 4, 2, 5, 5,
	5, 2, 1, 3, 10, 11, 7, 5, 3, 1,
	5, 9, 7, 11, 3, 3, 0, 2, 4, 3,
	3, 1, 5, 1, 3, 1, 2, 0, 1, 2,
	2, 0, 1, 3, 3, 2, 2, 1, 1, 1,
	4, 0, 6, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 5, 8, 4, 1, 0, 1, 2, 2,
	1, 2, 3, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 1, 4, 2, 2, 2, 4, 7,
	3, 4, 6, 3, 1, 1, 1, 8, 10, 11,
	5, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 3, 0, 1, 8, 3, 6, 6, 5,
	3, 4, 1, 0, 1, 3, 16, 19, 15, 18,
	4, 2, 0, 1, 0, 1, 0, 1, 3, 3,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 4, 2, 1, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 3, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 4,
	4, 2, 3, 5, 5, 1, 3, 1, 0, 1,
	2, 3, 2, 4, 2, 3, 0, 2, 0, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 1, 2, 6, 7, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 3, 5, 1, 3, 3,
	4, 5, 2, 2, 0, 2, 2, 1, 1, 1,
	0, 1, 0, 2, 2, 5, 4, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 1, 1, 1, 3, 2, 4, 4, 0,
	4, 4, 3, 4, 1, 5, 3, 4, 5, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 5, 6, 4, 6, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 2, 4,
	3, 5, 0, 1, 3, 5, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 6, 6, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 3, 0,
	5, 4, 1, 2, 1, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 2, 5, 1, 4,
	2, 5, 1, 4, 3, 3, 0, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 1, 1, 1, 1, 1, 1,
	2, 1, 5, 5, 6, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 2, 2, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 3, 3, 3, 0, 1, 4, 2,
	2, 2, 2, 2, 3, 2, 2, 3, 0, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 1, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 1, 1, 1, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var sqlChk = [...]int{
	-1000, -1, -2, 500, -83, -80, -51, -49, -86, -87,
	-70, -88, -82, -100, -104, -92, -106, -146, -151, -152,
	-153, -3, -37, -39, -52, -69, -71, -81, -90, -89,
	-91, -93, -97, -96, -85, -43, -101, -105, -114, -147,
	-148, -149, 31, 30, 90, 74, 137, 114, 121, 175,
	320, 355, 365, 347, -109, -110, 381, -38, -50, -103,
	-102, 67, 115, 342, -4, -12, 28, 44, -40, -41,
	-42, 57, -57, -54, -64, -58, -518, 92, -473, -72,
	-75, -522, 126, 144, 193, 310, -94, -95, 349, 351,
	145, -45, -44, 139, -167, -169, -107, -108, -150, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -127, -128, -129, -130, -135, -131, -132, -133, -134,
	-136, -137, -139, -140, -141, -142, -143, 385, -138, 435,
	46, 395, 76, 130, 359, 21, -5, -6, -7, -8,
	-9, -10, -11, -13, -53, -55, -56, -59, -60, -61,
	-68, -62, -63, -472, -73, -74, -76, -78, -79, -77,
	348, -170, -168, 497, 449, -15, -20, -21, -16, -17,
	-19, -22, -18, -26, -31, -32, -28, -29, -27, -30,
	-33, -34, -35, -36, -24, -25, -14, -23, 467, 475,
	-173, -171, -172, -180, 373, 457, 411, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, -244, 2,
	-227, -232, -233, -234, -226, -198, -442, -445, 4, -439,
	-443, 150, 202, 275, 21, 22, 23, 24, 25, 26,
	28, 29, 40, 41, 43, 42, 44, 45, 46, 51,
	54, 55, 56, 57, 58, 62, 67, 68, 73, 74,
	75, 76, 77, 78, 79, 85, 82, 83, 84, 87,
	89, 90, 91, 93, 95, 96, 104, 105, 106, 107,
	109, 114, 115, 118, 113, 117, 120, 121, 124, 125,
	126, 128, 129, 131, 132, 134, 135, 137, 138, 139,
	142, 140, 418, 141, 143, 144, 145, 146, 156, 157,
	158, 163, 165, 169, 170, 173, 174, 176, 180, 182,
	183, 184, 185, 186, 192, 193, 195, 196, 197, 198,
	203, 204, 208, 205, 214, 218, 219, 220, 222, 226,
	227, 228, 229, 230, 233, 232, 235, 238, 239, 242,
	243, 244, 247, 248, 249, 250, 252, 253, 256, 254,
	257, 255, 259, 260, 261, 258, 264, 262, 266, 267,
	268, 273, 271, 269, 270, 277, 280, 190, 282, 283,
	286, 304, 290, 291, 292, 295, 296, 299, 302, 303,
	305, 306, 307, 308, 309, 310, 311, 313, 314, 318,
	320, 321, 323, 325, 326, 327, 328, 329, 330, 331,
	334, 333, 335, 342, 347, 344, 345, 346, 348, 349,
	350, 351, 353, 354, 355, 357, 358, 359, 360, 362,
	364, 367, 382, 383, 397, 365, 366, 368, 369, 370,
	371, 372, 376, 374, 375, 377, 378, 379, 381, 384,
	385, 387, 388, 391, 393, 394, 395, 396, 398, 401,
	402, 403, 404, 399, 410, 407, 408, 412, 413, 414,
	415, 416, 417, 419, 421, 429, 430, 432, 435, 436,
	437, 427, 439, 440, 443, 444, 445, 448, 446, 447,
	449, 451, 454, 455, 456, 462, 461, 468, 469, 471,
	472, 473, 35, 47, 48, 50, 52, 63, 64, 65,
	69, 110, 111, 136, 147, 148, 159, 171, 172, 177,
	179, 187, 188, 189, 209, 210, 212, 216, 236, 279,
	281, 297, 301, 315, 316, 317, 319, 332, 361, 389,
	400, 405, 422, 423, 424, 425, 431, 433, 457, 458,
	459, 463, 470, -244, 2, -227, 288, -220, 2, -198,
	-198, 320, 27, 2, 27, 314, 375, 413, 415, 2,
	-498, -279, 2, 27, -201, -198, 92, 175, 373, -220,
	2, -498, -279, 24, 2, -198, 2, -202, 2, 365,
	-198, 500, 87, 244, 68, 361, 378, -112, 430, -111,
	422, 368, -113, -430, 2, 264, -198, 500, 500, 500,
	27, -210, -198, 411, 202, 106, 408, 500, 2, 411,
	307, 461, 374, 106, 329, 202, 437, -507, 357, 178,
	450, -496, 2, -492, 4, -443, -439, -238, -237, 411,
	416, 106, -234, -226, 490, -233, 500, 500, 500, 2,
	219, 220, 328, 327, 378, 379, 500, 500, 500, 367,
	2, 26, 60, 86, 89, 112, 146, 166, 169, 293,
	-519, 253, 304, 326, 377, 410, 419, 432, -506, 396,
	62, 368, -505, -507, 437, 124, -326, 106, 244, 174,
	444, 415, 413, 442, 118, 208, 447, 446, 500, 26,
	60, 71, 89, 124, 146, 166, 169, -521, 304, 326,
	364, 368, 377, 410, 419, 432, 2, 461, 374, 411,
	202, 106, 437, -507, 324, -83, 2, 497, 31, 30,
	381, -163, 411, 213, 2, -198, 219, 220, 2, 500,
	500, 167, -492, 2, 219, 220, 2, 213, 2, 62,
	370, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 2,
	-144, 378, 396, 184, 44, 68, 27, 325, 73, 308,
	107, 176, 202, 203, 227, 86, 87, -328, 43, 220,
	219, -380, 412, 369, 375, 407, 230, 365, 430, 92,
	451, 358, 473, 329, 330, 140, 4, 106, 264, 380,
	422, 244, 78, 500, -528, 2, 411, -530, 2, 430,
	430, 2, -530, 2, -530, 2, -530, 2, -531, 430,
	470, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, -168, -170, -169,
	500, 500, 500, 500, 500, 500, -144, 378, 2, 68,
	27, -272, -274, 441, 211, 133, 294, -167, -169, 2,
	-472, -428, 2, -354, -446, -356, 488, 489, 481, 409,
	61, 274, 474, -368, 112, 442, 288, -445, -357, -370,
	136, 361, -294, 8, 9, 5, 6, 7, -207, -358,
	-364, 434, 149, 278, -241, 501, 10, 497, -469, -169,
	-369, 36, 179, 59, -432, -240, -208, -404, 212, -239,
	-226, -466, -467, 4, -439, -440, -433, -407, -415, -411,
	-412, -418, -198, -442, 71, 98, 99, 97, 102, 101,
	246, 245, 103, 100, 380, 450, 60, 35, 187, 188,
	216, 279, 189, 69, -468, 125, -441, 209, 210, 389,
	48, 332, 159, 111, 110, 281, 52, 50, 458, -416,
	108, 422, 423, 424, 425, 171, 172, 147, 148, 301,
	317, 405, 431, 433, 177, 236, 94, 168, 207, 191,
	215, 217, 221, 237, 240, 265, 272, 276, 298, 300,
	356, 386, -534, 459, 400, 63, 64, -474, 333, -475,
	-220, -474, 500, 500, 502, 500, -266, -267, -268, 2,
	27, 122, 497, 2, -384, 2, -385, -389, -169, 231,
	-388, 497, -386, 495, -227, 289, -470, 362, -466, -467,
	-207, -226, -240, 4, -439, -441, 499, -269, 497, 106,
	411, 72, 202, -321, 497, -198, 27, 288, 426, 502,
	-366, 497, 288, 167, 291, -198, 2, 2, 382, 2,
	497, -112, 65, 430, 42, 378, -341, 2, -342, -195,
	-196, -197, -394, 218, 323, 331, 476, 473, -428, -512,
	167, 480, 426, -428, -295, 499, 2, 2, 2, 2,
	2, -389, 187, -227, 2, -224, -431, 4, -439, -443,
	-440, -444, -442, 27, 30, 31, 32, 34, 36, 37,
	38, 39, 53, 59, 60, 66, 70, 72, 81, 86,
	92, 97, 98, 100, 99, 101, 102, 103, 112, 116,
	119, 122, 123, 127, 130, 133, 149, 151, 164, 166,
	167, 175, 178, 181, 194, 206, 211, 213, 231, 234,
	241, 245, 246, 274, 278, 284, 288, 289, 293, 294,
	312, 322, 336, 352, 373, 380, 392, 406, 411, 420,
	426, 428, 434, 441, 442, 450, 452, 460, 464, 465,
	466, 467, -445, 71, 2, -389, 187, 2, -229, 187,
	-389, -232, 2, -211, -198, 2, -223, -431, 2, -245,
	187, -227, -228, -232, -230, 2, -232, -437, 187, 2,
	-435, 10, -434, 5, 4, -439, -443, -440, 426, 502,
	-285, -237, -238, -427, 8, -278, -198, 499, -354, 2,
	-101, 2, -354, 187, 2, -101, 187, 2, -354, 187,
	2, -101, 187, 2, -509, 2, -437, 2, 2, 432,
	2, 89, 187, -198, 411, 105, 2, 346, -520, 364,
	436, 461, 2, 2, 2, 2, 2, 2, 411, -216,
	2, -198, 164, -236, 187, 2, -198, 374, -529, 333,
	-437, 187, 2, -230, 2, -230, 202, 214, -211, 187,
	2, 415, 413, 415, 413, 167, 2, 213, 2, 213,
	2, -390, 2, -391, -385, -227, 495, 2, 2, 2,
	2, 2, 187, -198, 411, 105, 2, 229, 2, 2,
	2, 2, 2, 2, 2, 2, -287, 187, 2, -227,
	-287, 187, 2, -287, 187, 2, -327, 2, 81, -211,
	187, 2, -235, 187, 2, -230, -438, 187, 2, -437,
	-398, 2, -397, -434, 457, -83, 497, -83, 497, 378,
	497, -437, -227, -227, -354, -101, -99, -98, -437, 497,
	167, -354, -101, -163, 164, 2, 106, 411, -144, 2,
	164, 452, 2, 8, 2, -437, 369, 330, 156, 2,
	382, 2, 383, 68, -328, 473, 68, 167, 2, 167,
	2, -311, 2, 467, -495, 2, 288, 167, 2, 167,
	2, 167, 2, 167, 2, 167, 2, 327, 379, 220,
	2, -101, 464, -354, 464, 2, 429, 228, 141, 167,
	-311, 2, 167, 2, 167, 2, 5, 2, 328, 397,
	2, 218, 323, 397, 2, -227, -523, 2, 411, 461,
	374, 2, 2, 82, 83, 167, 2, 167, 2, 167,
	473, 2, -304, -389, -340, -341, -340, 426, -272, -274,
	-144, 382, 2, -174, -302, -176, 164, -330, -331, -177,
	241, 151, 284, -178, -310, 27, 122, -310, -310, 55,
	498, 498, 11, 12, 70, 40, 488, 489, 490, 491,
	162, 492, 493, 486, 487, 485, 478, 479, 483, 224,
	225, 88, 482, 480, 80, 251, 363, 152, 153, 154,
	155, 343, 200, 33, 201, 14, 15, 16, 32, 293,
	240, 474, 191, 386, 481, 17, 18, 19, 215, 217,
	276, 47, 194, -206, -247, -354, -354, -354, -354, -354,
	-354, -354, 300, 497, -300, -349, 495, -169, 497, 497,
	497, -427, -169, -354, -368, 498, -292, 497, -169, -368,
	-363, 497, 361, 495, 497, -371, -354, 5, 5, 5,
	497, 499, -477, 468, 164, 497, 497, 497, 497, 497,
	497, 497, 497, 497, 497, 497, 497, 497, 497, 497,
	319, -409, 497, -408, 497, -408, -408, 462, -406, 497,
	475, 469, 497, -406, 497, 497, 497, 497, 497, 497,
	497, 497, 497, 497, 497, 497, 497, 462, 502, -474,
	-269, 497, -296, -392, -354, 490, -296, -296, 288, -289,
	-354, 94, -314, 221, 265, 168, 237, 356, 207, -351,
	501, -351, -379, 475, -169, -386, -226, -169, -388, 497,
	-384, -379, -84, -427, -69, -81, -89, -101, -114, -148,
	-149, 490, -227, 497, 167, 497, 499, -431, 167, -278,
	-211, -227, -239, -240, -245, 121, -289, -492, -278, -201,
	37, -365, -401, -402, -448, 501, -447, -404, -414, -410,
	-413, 315, 316, -433, 50, 458, -416, 212, 4, -439,
	-441, 209, 210, 389, 48, 332, 159, 111, 110, 281,
	52, 422, 423, 424, 425, 171, 172, 459, 400, 63,
	64, -492, -278, 164, -430, -289, 37, -341, 2, 112,
	-435, 42, -532, 502, 239, -249, 250, 273, 183, 289,
	471, 282, -436, 5, 4, -364, -376, 112, 244, 212,
	-421, -423, 8, -422, 9, -424, 488, 489, -429, -428,
	96, 499, -431, -185, 344, -184, 23, 28, 126, 455,
	142, -259, 204, 307, 136, 393, 445, -502, -503, 366,
	417, 418, 84, 282, 344, 136, -307, -309, 37, 104,
	268, 302, 56, 197, 255, 256, 395, 463, 136, 344,
	-503, 344, -503, -187, 393, 445, -502, -503, 366, 344,
	-186, -259, 136, 501, 23, 344, 381, 303, -516, -517,
	126, 28, -499, -471, 467, 136, -98, -285, 502, 502,
	-431, 490, 136, 136, 136, 136, 164, 2, 2, 274,
	2, 2, 2, 169, -505, -521, 2, 2, 2, -227,
	187, -271, 288, -494, -286, 411, -227, 274, -229, 187,
	2, -232, 461, -499, 274, 37, 497, 2, -327, 2,
	202, -471, 274, -390, -242, -227, -385, -242, 381, -220,
	37, -351, -351, 136, 2, 2, 2, -198, -188, 502,
	58, 350, 136, -188, 136, -188, 136, -246, 187, -245,
	-188, 136, -188, 502, 136, 502, 136, 498, 502, -398,
	-398, -437, -157, 467, 167, 92, 497, 497, -163, -395,
	502, -394, -438, -99, -437, -494, -211, 2, -227, 2,
	411, 222, -157, -437, -437, -437, -430, 27, 383, 2,
	327, 379, 83, 383, 2, -227, 411, 106, 202, 74,
	-497, 164, -493, 357, -492, -227, 106, -227, 106, -227,
	106, -227, -227, 2, 2, 2, 2, 79, 79, 164,
	2, 429, 2, 429, 2, -198, -198, -198, 396, 239,
	-227, 164, 411, 202, 411, 202, 106, 411, -188, 502,
	-202, -174, -302, -430, -303, -302, -175, -174, -177, 164,
	331, 446, 268, 384, 226, -331, -330, 27, -354, -335,
	158, 267, -354, -333, -356, 488, 489, -422, -424, -288,
	282, -168, -168, -168, -275, -381, -354, 322, 202, -403,
	-401, -401, -225, -431, 422, -354, -354, -354, -354, -354,
	-354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
	-354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
	-354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
	240, 191, 386, 47, 194, -354, 426, -354, -354, -354,
	-354, 262, 274, 278, 434, 149, 443, 122, 282, -535,
	406, 39, -361, -169, -293, 497, -375, 34, 392, 27,
	-368, 497, 2, -349, -354, -350, -290, -289, -289, 498,
	460, 27, 122, 490, 2, 498, 502, 37, 498, -354,
	-290, -367, -363, -289, -374, -373, 464, -322, -323, 472,
	258, 109, 185, 257, -324, 372, -425, 8, -431, 490,
	-478, 157, 178, 497, 498, 2, 498, 2, 498, -354,
	2, 498, -354, 2, 498, -354, 2, 498, -354, 2,
	498, 2, -354, -354, -354, -354, -354, -354, -354, -289,
	8, -425, -425, 422, 422, -425, -425, -425, -417, 315,
	242, 316, 173, 261, 259, 260, 172, -417, -316, 2,
	-419, -289, 4, 472, 258, 109, 185, 257, 372, 5,
	-316, 2, -317, 2, -354, -289, -318, -355, -356, 488,
	489, 481, -368, -319, 2, -354, -290, -354, 53, 234,
	428, -320, -354, 167, -289, -289, 2, -289, 2, -475,
	37, -289, -281, 502, 167, 37, 4, -281, -281, 497,
	498, 502, -315, 182, 254, 249, -315, -384, -314, 221,
	-312, 298, -312, -312, -379, -212, 495, 503, -431, -379,
	-378, -377, 37, -220, 295, -379, -379, 499, 498, -378,
	496, -490, 497, 500, 500, 500, 500, 500, -227, 497,
	-289, -431, 499, 398, 498, 215, 215, 215, 215, 362,
	498, 426, 467, -83, 290, 498, 502, -280, 36, 495,
	499, -425, 2, 2, -420, 462, 497, 497, -323, 497,
	167, -279, -512, 498, 430, -342, -248, 331, 391, 345,
	376, 408, 8, 9, 8, 9, 502, -431, 502, -513,
	86, 426, 72, -345, 187, 72, -449, -214, 86, -450,
	-198, 66, 442, 322, 166, 134, -513, 86, 322, -513,
	86, 86, 381, 396, 55, -389, 40, 40, 27, -101,
	235, 167, 473, 411, 202, 426, -389, -309, -401, 104,
	255, 256, 55, -426, -421, 488, 489, -426, 55, -426,
	-426, -426, 467, -229, -389, 426, 426, 502, 40, 40,
	27, -101, 235, 167, 426, -245, -212, 456, 41, 456,
	426, 41, 368, 426, 502, 41, 41, -500, -203, 93,
	269, 248, 270, -204, -205, 309, 454, -437, -395, -237,
	-198, 499, -354, -101, -354, -101, 44, 136, 2, -529,
	229, 497, -252, 274, 167, -278, -396, 213, 502, -286,
	136, -308, -307, 274, -231, 187, 2, -227, 136, 131,
	497, 329, 2, -213, 187, -199, -198, -327, -191, 414,
	136, -306, 452, -336, -101, 497, 112, 37, -336, -297,
	-298, -393, -299, -214, 497, -220, -198, 2, -227, -287,
	-287, -287, -188, 502, 136, -211, -230, -235, -437, -438,
	-83, -397, 498, 498, 498, -156, 292, -155, -198, 5,
	-163, 452, -251, -346, -345, -453, -454, -449, 240, 202,
	442, 214, 150, -270, -215, -214, 105, -157, -98, 498,
	-395, -157, -157, -395, -395, -227, 164, -157, -157, -157,
	2, 2, -311, -227, -211, -245, -227, -278, -278, -311,
	-211, -311, -211, -311, -211, -101, -354, 378, 164, 164,
	499, -311, 329, 106, 411, 307, 202, -227, -245, -227,
	-245, -211, -227, -389, -303, -175, 289, 226, 384, -333,
	-334, -356, 361, 362, -334, 361, 362, 8, 9, 8,
	9, -179, 388, 277, -287, 502, -182, 38, 119, 226,
	-227, 473, 132, -354, -354, 426, -535, 406, -361, 132,
	-354, 262, 278, 434, 149, 443, 122, 282, 167, 497,
	-355, -355, 498, -291, -354, -354, 496, 505, 498, -274,
	502, -272, -354, -289, -289, 498, 499, -289, -278, 496,
	496, 502, 498, -372, -373, 127, -354, 426, 426, 426,
	426, 497, 498, 499, -483, 299, 497, 497, -354, 498,
	498, 498, 498, 37, 502, 502, 502, 498, 502, 502,
	502, 498, 498, 498, 502, 498, 473, 473, 498, 498,
	498, 498, 502, 498, 502, 498, 167, 498, 498, -325,
	312, 498, 11, 12, 488, 489, 490, 491, 162, 492,
	493, 486, 487, 485, 478, 479, 480, 80, 251, 363,
	14, 15, 16, 215, 194, -355, -355, -355, 498, -359,
	-360, 167, 164, 37, -320, -320, -320, 498, 167, -289,
	498, 498, 497, -476, 253, 274, 498, -348, -347, 465,
	-392, -282, 2, -384, -222, -431, -348, -348, -289, -354,
	221, 221, -313, 452, 288, -315, -384, -378, -427, -353,
	-352, 165, 38, 119, 271, 190, -378, -220, -269, -378,
	-378, -431, -379, -379, -377, 498, -491, -427, 498, -283,
	-387, -470, -274, 499, -431, -157, -145, 5, 278, -145,
	-145, -145, -278, 24, 313, -401, 495, 496, 8, -431,
	497, -425, -425, -425, -278, 167, -428, -341, 440, 77,
	331, 422, -428, -184, 344, -214, -214, -227, 274, -345,
	187, -190, 274, -401, -221, -198, 497, 497, 226, 226,
	452, -214, -221, 226, 187, -214, 187, -221, -221, -501,
	331, 283, -354, 243, 329, 275, -185, 344, -101, -101,
	-101, 497, -512, 452, 121, -227, -245, -227, -231, 344,
	272, -239, -426, -426, -307, 344, -229, -211, -186, -101,
	-101, -101, 497, -212, -187, 344, 5, 187, -214, 5,
	-198, -214, -236, -515, -435, 103, 380, -517, 23, -214,
	187, -214, -203, -437, 278, 448, -499, -154, 198, 490,
	-496, -198, 461, -198, -250, -253, -251, -214, -166, 469,
	467, 136, -243, -227, 495, -157, -437, -227, -236, 136,
	-269, 274, -437, 497, 2, 2, 288, 274, -213, 187,
	-192, 128, -533, 480, -211, -348, -282, -305, -339, 352,
	288, -270, 457, -220, -305, -284, 502, 167, 480, 499,
	-270, 2, -188, -188, -188, -245, -246, -188, -188, -83,
	-83, -157, 502, 497, 480, 480, 497, -437, -437, 498,
	502, -227, -213, 202, 202, -219, -199, 498, 502, 499,
	497, -157, 167, -46, 467, 411, 501, -311, -311, -311,
	378, 378, -198, -223, -211, -227, -224, -245, 164, 164,
	446, -334, 289, 247, -381, -183, 280, -227, 501, -354,
	-354, 132, 132, -354, -355, -355, -354, 132, 167, 497,
	-354, -365, 32, 32, 498, 502, -350, -354, 498, 460,
	-274, -274, 498, 490, -431, 501, 498, -363, 130, -354,
	420, 258, 185, 257, -324, 257, -324, -324, -425, 5,
	-431, 490, -484, -217, 497, -198, 465, -273, 294, 498,
	-403, -401, -354, -354, -354, -354, -354, -425, -406, -406,
	-421, -421, -354, -359, -354, -403, -401, -355, -355, -355,
	-355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
	-355, -355, -355, -355, -355, -355, 122, 274, 282, -355,
	-360, -359, -354, -354, -401, 498, 498, 498, -289, -83,
	497, 253, -301, 178, -354, -395, 502, -301, -301, 498,
	-384, -384, 497, -354, 221, 496, 502, 504, 480, -269,
	499, -377, -378, 496, 498, 502, 498, 502, -338, 37,
	498, -431, 291, 5, 8, 495, 496, 499, -425, 498,
	498, 498, -278, -354, 426, 426, 136, 274, 454, -455,
	-450, 134, -354, -276, -382, -354, 497, 497, 2, -181,
	126, 381, -514, 2, 452, 136, -188, 136, -188, 471,
	497, 497, 426, 467, -289, -354, -158, 112, -430, -503,
	501, -503, 501, 426, 426, 467, -289, 426, -405, 45,
	25, 274, -230, 426, 426, -188, 136, 437, 381, -437,
	278, -160, 467, 167, 426, 2, -231, 2, 498, 498,
	502, -456, 37, 286, 497, 286, -227, -65, 467, -394,
	-427, -229, 37, 136, -499, -399, -400, 5, -227, 136,
	288, 274, -193, 233, -533, -435, -471, -274, -305, -296,
	275, 85, 498, -348, -298, -282, -354, 2, 498, -188,
	-155, -156, -437, -437, -437, -157, -163, -163, -346, -254,
	497, -213, -199, 497, -163, -215, 2, -438, -101, 292,
	-227, 490, -311, -261, -260, 307, 282, -261, 361, 361,
	289, 158, 230, -182, -212, -354, -354, 132, 32, 32,
	-354, -354, -365, 498, -354, -354, -289, 496, 5, -354,
	498, 498, 8, -354, 498, 499, -485, -198, -354, 498,
	55, 498, 498, 502, 502, 498, 498, 498, 498, 498,
	498, 498, -360, 167, 122, 282, 497, 498, 498, -83,
	-362, 181, 55, -384, -362, -362, -313, -278, -384, -352,
	-212, 495, -431, -427, -387, 497, 499, 496, 2, 495,
	-431, 498, -214, -214, -345, 136, -457, 86, -459, 70,
	150, 92, 274, 278, 442, 322, 66, 112, 336, -525,
	37, 477, 498, 498, 502, -182, -276, -278, 274, 403,
	112, 274, 112, 105, 437, 73, -214, -221, -278, -278,
	-227, 143, 498, 502, 480, 2, 490, 490, -231, -229,
	143, 498, -212, 5, 5, 136, -209, 70, 5, -214,
	-214, -230, 105, -162, 292, -161, 129, 354, 120, -438,
	-98, -269, -257, 205, -214, -454, -451, -452, 322, -458,
	-460, 150, 322, -101, -165, -164, -198, 5, 2, 497,
	-252, 292, 496, -308, -101, -231, 498, 502, -329, 452,
	-212, -227, 136, -194, 232, -533, -435, -191, -332, -330,
	-337, 497, 288, -101, -274, 480, 498, 498, 105, 105,
	196, 135, -276, 497, 497, -278, 105, 498, -47, -48,
	202, 86, 311, -224, 411, 202, 497, 497, -182, -354,
	-354, -354, 498, -274, -431, 490, -479, 307, 498, -381,
	-354, -354, -355, 167, 497, -365, 498, -480, 466, -354,
	-289, -480, -480, 498, -427, 2, 495, 2, -345, -221,
	-225, -218, -198, 150, 187, 278, 226, 497, -355, -227,
	497, 2, 29, -526, 116, 206, -344, -527, 91, 404,
	195, -382, -183, 498, 498, 278, 278, -354, -401, 497,
	-188, -188, 498, 498, -354, 426, -430, 90, -428, 2,
	-503, -354, 426, 5, -188, -225, -188, -188, -209, 437,
	502, 497, 480, -160, 37, -258, -259, 194, -456, 226,
	-218, 226, -524, 467, 498, 502, 480, 480, -250, -166,
	-66, -67, 427, -394, -269, 5, 497, -198, 288, 497,
	-212, -533, -435, -192, -305, 123, -278, 86, -332, -361,
	-157, 497, 497, -255, 75, 87, 113, 186, 170, 203,
	396, 401, 27, -255, 498, -276, -276, 498, 497, -157,
	502, 27, 497, 27, 497, -227, -245, -289, -289, 498,
	-274, 55, 502, 498, 498, -355, -365, 498, -481, -482,
	-217, 496, 2, -459, -218, 274, 452, -354, -200, 497,
	-354, 37, 206, 117, 192, -257, 497, -343, 452, 336,
	-209, -276, 497, 497, 497, 480, 167, 497, -405, -188,
	-230, -161, -162, -437, -508, 334, -101, -166, 305, 497,
	-256, 288, 105, 268, -164, -357, -357, 498, 37, -67,
	9, 37, -276, -227, -276, 288, -435, -193, 446, 275,
	498, -221, -305, -438, -438, -343, 498, 498, -438, -48,
	-278, -278, 498, 498, -486, 329, 362, 180, -289, -275,
	498, 502, 37, 136, 182, 498, -461, 252, -198, 498,
	117, 192, -258, -278, -257, 182, -227, -504, 452, 498,
	-263, -262, -260, -265, -264, -260, -289, -428, 90, 305,
	-289, -209, 498, -511, 168, 266, -510, 5, 10, -256,
	-227, -277, -383, -214, 76, 105, -257, -101, -101, 498,
	-329, 498, -227, -194, 381, -347, 498, 498, -344, -343,
	-348, 498, 498, 498, 498, -487, -488, 47, 439, 96,
	-354, -487, -487, -482, -484, 150, 467, -462, -465, -464,
	288, 387, 168, 306, 498, 403, 463, -526, 498, 467,
	-269, -354, -343, 498, 502, 457, 498, 502, 457, 498,
	167, 498, -188, -159, 467, 44, 497, 498, 502, 321,
	118, 126, -258, -524, -343, 497, -344, 497, -297, -157,
	-157, -257, -344, -157, -489, 134, -488, 318, 163, 361,
	318, 163, -489, -489, -218, 51, -464, 288, -465, 288,
	446, 118, -348, 51, -461, -257, -262, 194, -264, 167,
	305, 139, -510, 29, -278, -383, 362, 362, 2, -166,
	-256, -344, -276, -257, -276, -348, -258, -257, 96, 178,
	421, 268, 32, 480, -463, 268, 350, 58, 381, -463,
	480, -462, 497, 497, 367, 498, 2, -256, -257, 498,
	-258, 498, -348, -258, 361, 296, -488, -354, 22, 278,
	112, -354, -526, -289, -289, 292, -189, 58, 350, -258,
	-343, -348, -344, -348, 498, 498, -156, 497, -348, -344,
	-257, -258, 426, -156, -257, -258, 497, 498, -258, -348,
	-289, -348, 498, -258,
}

var sqlDef = [...]int{
	-2, -2, 1, 2, 3, 4, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 26, 27,
	28, 429, 430, 432, 433, 434, 436, 437, 439, 441,
	443, 445, 446, 448, 450, 452, 453, 454, 455, 456,
	458, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 518, 520, 0, 1055, 1057, 1059,
	1061, 0, 650, 0, 30, 31, 0, -2, 242, 244,
	246, 0, 271, 273, 274, 276, 278, -2, 0, 374,
	375, 377, -2, -2, 0, 0, 507, 509, 0, 0,
	0, 529, 530, 0, 1143, -2, 523, 525, 527, 592,
	594, 596, 598, 600, 602, 604, 605, 607, 609, 611,
	613, 615, 617, 619, 620, 622, 624, 626, 628, 630,
	632, 634, 636, 638, 640, 642, 644, -2, 646, -2,
	-2, 0, -2, -2, -2, 1073, 34, 36, 38, 40,
	42, 44, 46, 48, 325, 326, 328, 330, 332, 334,
	337, 339, 341, 1201, 379, 381, 383, 385, 387, 389,
	0, -2, 1213, 0, 0, 50, 51, 52, 53, 54,
	55, 56, 57, 73, 74, 75, 76, 77, 78, 79,
	80, 61, 63, 64, 68, 69, 71, 59, 0, 0,
	1174, 1176, 1178, 1180, -2, 0, 0, 5, 9, 11,
	13, 15, 17, 19, 21, 23, 431, 435, 438, 440,
	442, 444, 447, 449, 451, 457, 459, 461, 416, 417,
	420, 1833, 1850, 1851, 1852, 1855, 1856, 1857, 1858, 1859,
	1860, 2220, 2301, 2302, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
	2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
	2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
	2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197,
	2198, 2199, 2200, 418, 419, 935, 0, 485, 483, 1826,
	486, 2048, 488, 490, 368, 369, 370, 371, 372, 373,
	0, 500, 494, 499, 501, 503, 504, 505, 506, 480,
	478, 0, 500, 1885, 498, 1053, 1054, 1048, 1049, 2083,
	1080, 519, -2, -2, -2, 2186, -2, 551, -2, 558,
	2190, 2085, 563, 0, 565, -2, 568, 1056, 1058, 1060,
	648, 649, 1836, 0, 0, 0, 0, 32, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 985,
	986, 0, 182, 184, -2, -2, -2, -2, 0, 0,
	2119, 1926, 1794, 1852, 1797, 1792, 243, 245, 247, 248,
	0, 0, 0, 0, 0, 0, 272, 275, 277, -2,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	830, 822, 823, 1025, 0, 0, 0, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	-2, 0, 0, 0, 304, 421, 422, 0, 1202, 1202,
	0, 0, 0, 0, 223, 214, 0, 0, 799, 508,
	510, 0, 0, 209, 0, 0, 1052, 0, 225, 0,
	0, 524, 526, 528, 593, 595, 597, 599, 601, 603,
	606, 608, 610, 612, 614, 616, 618, 621, 623, 625,
	627, 629, 631, 633, 635, 637, 639, 641, 643, 645,
	655, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 658, 660, 661, 662,
	0, 713, 730, 647, 0, 975, 1203, 1082, 1063, 1077,
	1082, 1065, 1066, 1067, 1068, 1069, 1074, 1076, 1070, 1071,
	1072, 35, 37, 39, 41, 43, 45, 47, 49, 327,
	329, 331, 333, 335, 338, 340, 342, -2, 1172, 1173,
	380, 382, 384, 386, 388, 390, 511, 0, 513, 0,
	659, -2, 0, 1207, 1207, 1207, 0, 0, 1173, 1171,
	0, 516, 517, 572, 573, 1437, 0, 0, 0, 0,
	0, 0, 0, 1691, 1523, 0, 574, -2, 1554, 1556,
	2161, 2186, 1690, 1558, 1559, 1560, 1561, 1562, 0, 1564,
	1565, 1566, 1567, 1568, 1569, 0, 1571, 0, 1576, 1577,
	1578, 0, 2168, 1771, 1846, -2, 0, 0, 2174, 1842,
	0, 1657, 1594, -2, -2, 1869, 1848, 1369, 1370, 1371,
	1372, 1373, -2, -2, 2203, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 0, 2150, 2169, 2170,
	2175, 2177, 2171, 2158, 1619, 1937, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1396,
	1405, -2, -2, -2, -2, -2, -2, 2162, 2163, 2180,
	2183, 2189, 2194, 2195, 2167, 2176, 2204, 2205, 2206, 2207,
	2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
	2218, 2219, 1397, -2, -2, -2, -2, 1190, 2059, 1193,
	935, 1191, 1175, 1177, 0, 1179, 0, 0, 0, 1184,
	1210, 1208, 0, 1251, 1188, 1189, 1269, 1269, 1293, 0,
	1274, 0, 1293, 1202, 1319, 0, 1280, 2077, 1595, 1596,
	0, 1852, 1847, -2, -2, 2201, 0, 0, 0, 0,
	0, 0, 0, 481, 0, 487, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 521, 522, 0, 546,
	0, 550, 2157, -2, 1893, 2094, -2, 554, 1083, 1087,
	1088, 1089, 1090, 0, 0, 0, 0, 0, 560, 0,
	0, 547, 548, 566, 569, 0, 651, 652, 653, 654,
	58, 0, 2169, 1319, 60, 0, 1816, 1877, 1878, 1879,
	1880, 1881, 2202, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237,
	2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
	2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257,
	2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
	2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277,
	2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287,
	2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297,
	2298, 2299, 2300, 2203, 62, 0, 2169, 65, 0, 2169,
	0, -2, 70, 0, 1822, 72, 0, 1819, 81, 0,
	2169, 0, 1791, -2, 0, 167, 1830, -2, 2169, 983,
	226, 227, 1865, 1866, 1873, 1874, 1875, 1876, 0, 0,
	790, 1788, 1793, 791, 1812, 792, 1798, 0, 249, 250,
	251, 252, 253, 2169, 255, 256, 0, 258, 259, 2169,
	261, 262, 0, 264, 0, 194, 195, 280, 281, 0,
	283, 0, 2169, 0, 0, 0, 289, -2, 305, 0,
	302, 0, 293, 294, 296, 297, 298, 299, 0, 346,
	344, 1827, 0, 800, 2169, 802, 1832, 0, 0, 1004,
	-2, 2169, 980, 1010, 1006, 0, -2, 0, 1200, 2169,
	1097, 826, 827, 828, 829, 0, 365, 0, 1110, 0,
	1112, 0, 1133, 1325, 1269, 1269, 0, 306, 307, 308,
	309, 310, 2169, 0, 0, 0, 315, 0, 317, 318,
	319, 320, 321, 322, 323, 324, 156, 2169, 393, 414,
	156, 2169, 396, 156, 2169, 399, 0, 402, 1023, 156,
	2169, 405, 156, 2169, 408, 409, 411, 2169, 413, 228,
	0, -2, 474, 1835, -2, 424, 0, 425, 0, -2,
	0, 240, 0, 0, 797, 798, 1306, 212, 210, 0,
	0, 1050, 1051, 0, 0, 531, 0, 0, 656, 657,
	0, 0, 667, 668, 669, 240, 2086, 2056, 1956, 674,
	0, 677, 680, -2, 0, 0, 0, 0, 684, 0,
	689, 690, 691, 0, 796, 693, 0, 0, 695, 0,
	699, 0, 702, 0, 704, 0, 706, -2, -2, -2,
	717, -2, 0, 721, 0, 723, 0, 0, 0, 0,
	738, 739, 0, 744, 0, 747, 748, 749, 0, 751,
	752, 0, 754, 755, 756, 757, 0, 759, 760, -2,
	-2, 764, 766, 0, 773, 0, 777, 0, 781, 0,
	663, 664, 156, 1323, 1062, -2, 1064, 0, -2, 0,
	512, 0, 515, 1230, 1158, 1155, 0, 1227, 1228, 1159,
	0, 0, 0, 1166, 0, 1205, 1206, 0, 0, 0,
	1145, 1146, 0, 0, 0, 0, 1696, 1697, 1698, 1699,
	1700, 1701, 1704, 1705, 1702, 1703, 1706, 1707, 0, 0,
	0, 0, 0, 1708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1709, 1710, 1711, 0, 0,
	1713, 0, 1715, 0, 0, 0, 0, 0, 0, 1502,
	1504, 1779, 0, 0, 1712, 1442, 1443, 1444, 1445, 1446,
	1481, 1482, 0, 0, 1555, 1776, 1775, 1557, 0, 1727,
	0, 1570, -2, 0, 1691, 1722, 0, 0, 1579, 1580,
	1581, 0, 0, 1727, 0, 0, 1770, 1591, 1592, 1434,
	0, 0, 1659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1383, 1382, 0, 1384, 0, 1385, 1386, 1393, 1406, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	0, 1751, -2, 0, 0, 0, 0, 1398, 0, 1192,
	0, 0, 1255, 1780, 1784, 1785, 1255, 1255, 0, 0,
	1728, 1316, 1316, 0, 0, 1312, 1312, 1312, 1310, 1293,
	0, 1293, 1303, 0, 1293, 1293, 0, -2, 1274, 0,
	0, 1303, 0, 1287, 462, 464, 466, 468, 469, 470,
	472, 1320, 1321, 0, 0, 0, 0, 1853, 0, 0,
	0, 0, 0, 1838, 0, 0, 0, 0, 492, 502,
	1202, 0, 1730, 1342, 1346, 0, 1348, 1349, 1350, 1351,
	1352, 0, 0, 1343, -2, 1394, 1396, 1417, 1870, 1871,
	1872, 1377, 1378, 1379, 1380, 1381, 1389, 1376, 1376, 1376,
	1387, 1416, 1408, 1416, 1412, 1363, 1364, 1399, 1400, 1401,
	1402, 0, 496, 0, 0, 0, 0, -2, 556, 561,
	562, 0, 0, 1085, 0, 1091, 583, 584, 585, 1093,
	1094, 0, 559, 586, 587, 588, 589, 590, 591, 0,
	1800, 1801, 1802, 1803, 1806, 1807, 0, 0, 557, 576,
	564, 0, 570, 82, 1045, 121, 0, 1045, 1045, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 106, 117,
	94, 95, 0, 0, 0, 0, 66, 957, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	105, 0, 100, 84, 0, 0, 0, 107, 119, 0,
	147, 149, 0, 0, 0, 0, 0, 0, 166, 174,
	0, 0, 981, 0, 1199, 0, 1306, 789, 0, 0,
	1853, 1796, 0, 0, 0, 0, 0, 282, 284, 0,
	286, 287, 288, 0, 1003, 0, 295, 292, 336, 906,
	2169, 0, 0, 363, 358, 0, 360, 0, 956, 2169,
	954, 1831, 0, 978, 0, 0, 0, 1011, 1862, 1020,
	1024, 1099, 0, 367, 0, 1113, 1115, 0, 0, 1326,
	0, 1328, 1329, 0, 312, 313, 314, 0, 391, 0,
	154, 155, 0, 394, 0, 397, 0, 156, 2169, 1786,
	403, 0, 406, 0, 0, 0, 0, 1202, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 240,
	0, 1305, 0, 1306, 240, 240, 1306, 533, 1306, 535,
	0, 0, 670, 240, 240, 240, 675, 676, 678, 679,
	-2, -2, 774, 681, 682, 741, 0, 0, 0, 740,
	692, 0, 783, 2073, 794, 741, 1926, 741, 1926, 741,
	1926, 703, 705, 708, 733, 716, 720, 0, 0, 0,
	725, 0, 727, 0, 729, 741, 742, 745, 750, 753,
	758, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	1075, 1230, 1158, 514, 1149, 1229, 1150, 1157, 1160, 0,
	0, 1162, 0, 1164, 0, 1225, 1226, 1233, 1234, 0,
	1244, 1245, 1237, 0, -2, 0, 0, 1240, 1241, 1168,
	0, 1185, 1186, 1187, 1214, 1217, 1034, 0, 2301, 1438,
	1337, 1439, 1440, 1815, 0, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, -2, -2, -2, -2, -2,
	-2, -2, -2, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, -2, -2, -2, 1479, 1480, -2,
	1714, 1716, 0, 1779, 0, -2, 0, -2, -2, -2,
	-2, 1499, 0, 1501, 1506, 1508, 1510, 0, 0, 0,
	0, 1778, 1520, 1762, 1763, 0, 0, 1693, 1694, 1695,
	1505, 0, 1524, 1777, 1774, 0, 0, 1726, 1213, 1583,
	0, 0, 0, 0, 1590, 1575, 1724, 0, 1723, 0,
	0, 0, 1734, 0, 1769, 1765, 0, 1813, 1433, 1420,
	1421, 1422, 1423, 1424, 1425, 1435, 0, 1810, 1839, 1845,
	1667, 0, 0, 0, 1620, 1621, 1622, 1623, 1624, 0,
	1626, 1627, 0, 1629, 1630, 0, 1632, 1633, 0, 1635,
	1636, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 0, 0, 1639,
	0, 1737, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 1641, 0, 1643, 1728, 1748, 0, 0, 1525, 0,
	0, 0, 1691, 0, 1646, 1728, 1756, 0, 0, 0,
	0, 0, 1728, 0, 1761, 0, 1653, 0, 1655, 1194,
	0, 0, 1332, 0, 0, 0, 1783, 1332, 1332, 0,
	1250, 0, 0, 1313, 1314, 1315, 0, 0, 1316, 0,
	1307, 1311, 1308, 1309, 1303, 1266, 0, 0, 1817, 1303,
	1272, 1302, 0, 935, 1292, 1303, 1303, 0, -2, 1276,
	1293, 0, 0, 463, 465, 467, 471, 473, 0, 0,
	1213, -2, 0, 240, 934, 0, 0, 0, 0, 482,
	484, 0, 0, 476, 0, 479, 0, 1333, 1336, 0,
	0, 1347, 1353, 1354, 0, -2, 0, 0, 1418, 0,
	0, 0, 0, 549, 0, 1084, 1092, 0, 580, 0,
	582, 0, 1804, 1808, 1805, 1809, 0, 571, 0, 0,
	0, 0, 1044, 125, 2169, 0, 158, 0, 0, 899,
	1823, 0, 0, 0, 0, 1943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 96,
	0, 0, 0, 0, 0, 0, 0, 958, 959, 961,
	968, 970, 0, 964, 1811, 0, 0, 965, 0, 967,
	969, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 97, 0, 0, 0, 0, 1790, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 997, 991,
	992, 993, 994, 995, 996, 0, 0, -2, 231, 1789,
	1799, 0, 254, 257, 260, 263, 183, 0, 290, 0,
	0, 832, 805, 0, 0, 345, 240, 0, 0, 359,
	0, 952, 955, 0, 935, 2169, 990, 1829, 0, 0,
	0, 0, 1009, 0, 2169, 1818, 1861, 1862, 1101, 1107,
	0, 1332, 0, 1131, 1116, 0, 0, 0, 1131, 1135,
	1136, 1138, 1139, 0, 0, 1327, 0, 316, 415, 156,
	156, 156, 400, 0, 0, 156, 410, 156, 229, 412,
	423, 475, 1202, 1202, 240, 238, 2032, 236, 233, 235,
	0, 0, 0, 833, 835, 836, 837, 838, 0, 1862,
	0, 1982, 1862, 0, 1119, 1121, 0, 207, 213, 211,
	240, 0, 357, 532, 537, 665, 0, 671, 672, 673,
	710, 735, 683, 685, 686, 687, 0, 795, 793, 694,
	741, 697, 741, 700, 741, 719, 722, 724, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 778,
	779, 780, 782, 1324, 1153, 1154, 1156, 0, 1165, 0,
	0, 1239, -2, -2, 1238, 1242, 1243, -2, -2, -2,
	-2, 1161, 0, 1170, 1167, 0, 1224, 1032, 1033, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1521, 0,
	-2, 1500, 1503, 1507, 1509, 1511, 0, 0, 0, 0,
	0, 0, 1717, 0, 1719, 1522, 1772, 1775, 1689, 0,
	0, 1212, 1213, 1213, 0, 1589, 0, 1725, 0, 1732,
	1733, 0, 1582, 0, 1766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1593, 0, 0, 0, 0, 1625,
	1628, 1631, 1634, 0, 0, 0, 0, 1614, 0, 0,
	0, 1618, 1388, 1374, 0, 1416, 1414, 1415, 1409, 1416,
	1413, 1366, 0, 1365, 0, 1638, 0, 1640, 1642, 0,
	0, 1644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 1529, 1530, 1645, 1754,
	1755, 0, 0, 0, 0, 0, 0, 1651, 0, 1760,
	1652, 1654, 1202, 0, 1195, 0, 1252, 1247, 1331, 0,
	1781, 1306, 1254, 1256, 1782, 1820, 1247, 1247, 0, 1729,
	0, 0, 1297, 0, 0, 0, 1299, 1270, 0, 0,
	1264, 0, 1260, 1261, 1262, 1263, 1271, 935, 1301, 1273,
	1277, 1839, 0, 1303, 0, 1288, 0, 1290, 1322, 0,
	1282, 1285, 0, 0, 1854, 241, 265, 269, 270, 266,
	267, 268, 491, 0, 0, 1731, 0, 1338, 0, 1344,
	0, 0, 0, 0, 495, 0, 545, -2, 578, 579,
	581, 0, 577, 122, 1045, 0, 0, 1036, 0, 127,
	2169, 136, 0, 873, 0, 1821, 0, 0, 0, 0,
	0, 1047, 0, 0, 2169, 156, 2169, 156, 139, 142,
	0, 146, 144, 0, 0, 864, 83, 1045, 86, 90,
	98, 0, 0, 0, 104, 0, 0, 0, 1038, 0,
	962, 963, 966, 972, 67, 0, 1040, 1035, 148, 88,
	92, 99, 0, 1042, 85, 0, 170, 0, 0, 0,
	162, 0, 163, 164, 171, 172, 173, 175, 0, 156,
	2169, 0, 998, 976, 977, 0, 982, 187, 0, 1795,
	0, 0, 0, 0, 0, 0, 831, 917, 0, 0,
	0, 0, 351, 347, 0, 356, 362, 361, 801, 0,
	0, 0, -2, 1013, 1007, 1008, 0, 0, 0, 2169,
	1103, 1107, 0, 1106, 1200, 1213, 366, 1108, 1131, 0,
	0, 0, 1118, 1114, 1111, 1332, 0, 0, 0, 0,
	0, 311, 392, 395, 398, 1787, 156, 404, 407, 426,
	427, 215, 0, 0, 0, 0, 0, 240, 0, 0,
	0, 842, 0, 1862, 1862, 0, 1825, 0, 0, 0,
	0, 208, 0, 534, 0, 0, 0, 696, 698, 701,
	726, 728, 741, 767, 768, 859, 0, 859, 0, 0,
	1163, 0, 1236, 1169, 1218, 1219, 0, 1034, 0, 1441,
	1484, 0, 0, -2, 0, 0, 1488, 0, 0, 0,
	-2, 0, 0, 0, 1718, 1720, 0, 1774, 1584, 0,
	0, 0, 1588, 1572, 1573, 0, 1692, 1735, 1764, 1768,
	0, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 0, 1814,
	1840, 1844, 1665, 1666, 1670, 1828, 0, 0, 0, 1597,
	0, 0, 0, 0, 0, 0, 0, 0, 1407, 1411,
	0, 0, 1736, 1747, 1749, 1526, 1527, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, -2, -2, -2,
	1544, 1545, 1546, -2, -2, -2, 0, 0, 0, 1750,
	1752, 1753, 1757, 1758, 0, 1648, 1649, 1650, 1759, 0,
	1202, 1196, 1249, 0, 1330, 1253, 0, 1249, 1249, 1209,
	1295, 0, 0, 1318, 0, 1267, 0, 1268, 0, 1300,
	0, 1275, 1278, 1279, 1289, 0, 1281, 0, 1284, 0,
	1584, -2, 493, 477, 0, 0, 1340, 0, 0, 1391,
	1395, 1419, 497, 1304, 0, 0, 0, 0, 157, 871,
	898, 0, 0, 0, 1027, 1034, 0, 0, 904, 129,
	0, 0, 0, 137, 0, 0, 134, 0, 141, 145,
	0, 0, 0, 0, 0, 101, 102, 103, 0, 108,
	0, 109, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 1031, 0, 0, 177, 0, 0, 0, 1001,
	1002, 181, 0, 0, 0, 285, 935, 291, 853, 905,
	0, 907, 0, 806, 0, 0, 906, 343, 0, 350,
	0, 956, 0, 0, 979, 0, 1012, 1014, 1022, 0,
	0, 0, 1105, 1107, 0, 1098, 1099, 1232, 1109, 1129,
	-2, 1128, 0, 1213, 1137, 1134, 1140, 1141, 0, 401,
	237, 0, 232, 234, 0, 218, 0, 0, 834, 839,
	0, 0, 0, 0, 0, 1120, 1122, 0, 224, 0,
	666, 688, 736, 769, 858, 0, 0, 771, 0, 0,
	1235, 1222, 1223, 1220, 1034, 1486, 1490, 0, 0, 0,
	1492, -2, 0, 1514, -2, -2, 1721, 1773, 1563, 1213,
	1585, 1587, 1574, 1767, 1436, 0, 1672, 1669, 0, 1656,
	0, 1609, 1610, 0, 0, 1613, 1615, 1616, 1617, 1375,
	1368, 1367, 1746, 0, 0, 0, 0, 1647, 1197, 0,
	1661, 0, 0, 1257, 1661, 1661, 1296, 0, 1298, 1265,
	1258, 0, 1840, 1291, 1283, 0, 0, 1334, 1339, 0,
	1345, 1390, 123, 124, 126, 0, 872, 0, 875, 0,
	0, 0, 0, 882, 883, 0, 0, 0, 0, 0,
	892, 0, 921, 931, 0, 1224, 0, 0, 0, 131,
	151, 0, 0, 1046, 0, 0, 156, 156, 0, 0,
	1037, 0, 0, 0, 0, 111, 0, 0, 1039, 1041,
	0, 0, 1043, 168, 169, 0, 156, 0, 161, 156,
	156, 1031, 0, 185, 0, 188, 0, 191, 192, 230,
	187, 0, 861, 0, 917, 909, 910, 911, 0, 916,
	918, 0, 0, 819, 0, 815, 0, 0, 808, 832,
	805, 0, 348, 953, 987, 935, 1005, 0, 0, 0,
	0, 0, 0, 1095, 1107, 0, 1100, 1101, 1131, 1231,
	0, 0, 0, 1117, 1232, 0, 239, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 536, 538,
	0, 0, 544, 857, 0, 0, 0, 0, 1221, 1494,
	-2, -2, 1515, 0, 1841, 1843, 1213, 0, 1658, 1215,
	0, 0, -2, 0, 0, 0, 1198, 1181, 0, 1248,
	1246, 1182, 1183, 1317, 0, 1286, 0, 1341, 128, 0,
	876, 877, 1824, 879, 0, 881, 884, 0, 887, 1864,
	0, 891, 0, 900, 922, 0, 853, 0, 927, 928,
	929, 1028, 1029, 933, 0, 130, 132, 150, 1031, 0,
	133, 140, 0, 0, 87, 0, 0, 1919, 114, 112,
	110, 89, 0, 170, 176, 1030, 165, 178, 156, 0,
	0, 0, 0, 0, 0, 805, 860, 0, 908, 0,
	919, 920, 809, 0, 807, 0, 0, 0, 0, 0,
	349, 352, 0, 355, 0, 1015, 0, 1021, 0, 0,
	0, 0, 1102, 1103, 364, 0, 0, 0, 1131, 1142,
	217, 0, 0, 840, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 841, 933, 0, 0, 897, 0, 222,
	0, 540, 0, 542, 0, 770, 772, 0, 0, 1586,
	1676, 0, 0, 1611, 1612, -2, 0, 1552, 1660, 1662,
	0, 1259, 1335, 874, 878, 0, 0, 0, 939, 0,
	0, 893, 0, 925, 926, 861, 0, 853, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 160, 179,
	1031, 189, 0, 190, 203, 0, 988, 809, 0, 0,
	817, 0, 820, 0, 816, 813, 814, 853, 0, 353,
	354, 0, 0, 1022, 0, 0, 1104, 1105, 0, 1124,
	1125, 1127, 1132, 0, 0, 931, 933, 1332, 0, 539,
	0, 0, 775, 776, 0, 0, 0, 0, 1671, 1216,
	1553, 0, 0, 0, 0, 886, 944, 0, 0, 0,
	923, 924, 921, 0, 902, 0, 935, 135, 0, 933,
	0, 865, 0, 0, 868, 0, 0, 115, 1919, 113,
	0, 156, 186, 206, 0, 199, 200, 197, 198, 803,
	0, 0, 913, 915, 0, 821, 861, 819, 989, 933,
	0, 931, 0, 1096, 0, 1126, 240, 240, 853, 931,
	896, 240, 541, 543, 1668, 1688, 1677, -2, 2130, 1923,
	0, 1688, 1688, 1663, 1664, 0, 0, 888, 940, 941,
	0, 936, 937, 938, 1863, 889, 890, 1332, 930, 0,
	939, 152, 853, 862, 0, 0, 863, 0, 0, 118,
	0, 120, 180, 193, 0, 0, 0, 912, 0, 0,
	0, 0, 805, 809, 931, 0, 853, 0, 1332, 219,
	220, 861, 853, 221, 1673, 0, 0, 1679, 1680, 1681,
	1682, 1683, 1674, 1675, 880, 0, 942, 0, 943, 0,
	0, 0, 901, 0, 944, 138, 866, 0, 869, 0,
	116, 0, 201, 202, 0, 914, 810, 0, 812, 809,
	818, 853, 0, 861, 0, 1123, 1332, 861, 0, 1685,
	1686, 0, 0, 0, 945, 0, 948, 949, 0, 946,
	0, 921, 0, 0, 0, 856, 811, 804, 861, 933,
	1332, 931, 894, 1332, 1684, 1687, 1678, 885, 947, 950,
	951, 932, 903, 0, 0, 0, 852, 854, 855, 1332,
	931, 1018, 853, 895, 861, 0, 204, 0, 1016, 853,
	861, 867, 0, 0, 861, 1332, 0, 205, 1332, 1019,
	0, 1017, 861, 870,
}

var sqlTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 486, 3, 492, 487, 3,
	497, 498, 490, 488, 502, 489, 499, 491, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 505, 3,
	478, 480, 479, 483, 501, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 495, 3, 496, 493, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 503, 485, 504, 481,
}

var sqlTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 482, 57821, 484, 57822, 494, 57823, 500, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1179
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "")
		}
	case 5:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ANALYZE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1189
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1190
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1193
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1194
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1195
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1203
		{
			sqlVAL.union.val = ast.Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1216
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1217
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1219
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1220
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1221
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1277
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1303
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1314
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1329
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &ast.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &ast.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1351
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1370
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1402
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1406
		{
			sqlVAL.union.val = &ast.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{
			sqlVAL.union.val = &ast.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = &ast.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1420
		{
			sqlVAL.union.val = &ast.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1426
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Split{
				TableOrIndex: ast.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   ast.Expr(nil),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1435
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Split{
				TableOrIndex: ast.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = &ast.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: ast.Expr(nil)}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = &ast.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1456
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Unsplit{
				TableOrIndex: ast.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1464
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Unsplit{
				TableOrIndex: ast.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1474
		{
			sqlVAL.union.val = &ast.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1478
		{
			sqlVAL.union.val = &ast.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1488
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Relocate{
				TableOrIndex: ast.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1499
		{

			sqlVAL.union.val = &ast.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1506
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Relocate{
				TableOrIndex:  ast.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1518
		{

			sqlVAL.union.val = &ast.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1525
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{NamedZone: ast.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1533
		{

			sqlVAL.union.val = &ast.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &ast.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1542
		{

			sqlVAL.union.val = &ast.SetZoneConfig{SetDefault: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = &ast.SetZoneConfig{YAMLConfig: ast.DNull}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1553
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{Database: ast.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{
				TableOrIndex: ast.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1572
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1582
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{
				TableOrIndex: ast.TableIndexName{Table: name},
				Partition:    ast.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1592
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    ast.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 110:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1601
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = ast.ZoneSpecifier{
				TableOrIndex: ast.TableIndexName{Table: name},
				Partition:    ast.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1612
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1618
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = []ast.KVOption{ast.KVOption{Key: ast.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = []ast.KVOption{ast.KVOption{Key: ast.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), ast.KVOption{Key: ast.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), ast.KVOption{Key: ast.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1644
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Scatter{TableOrIndex: ast.TableIndexName{Table: name}}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1649
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Scatter{
				TableOrIndex: ast.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1660
		{
			sqlVAL.union.val = &ast.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1664
		{
			sqlVAL.union.val = &ast.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1670
		{
			sqlVAL.union.val = ast.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &ast.AlterTableRenameColumn{Column: ast.Name(sqlDollar[3].str), NewName: ast.Name(sqlDollar[5].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &ast.AlterTableRenameConstraint{Constraint: ast.Name(sqlDollar[3].str), NewName: ast.Name(sqlDollar[5].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = &ast.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &ast.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &ast.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = &ast.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1711
		{
			sqlVAL.union.val = &ast.AlterTableSetDefault{Column: ast.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = &ast.AlterTableDropNotNull{Column: ast.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &ast.AlterTableDropStored{Column: ast.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &ast.AlterTableSetNotNull{Column: ast.Name(sqlDollar[3].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = &ast.AlterTableDropColumn{
				IfExists:     true,
				Column:       ast.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = &ast.AlterTableDropColumn{
				IfExists:     false,
				Column:       ast.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1752
		{
			sqlVAL.union.val = &ast.AlterTableAlterColumnType{
				Column:    ast.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.typeReference(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1762
		{
			sqlVAL.union.val = &ast.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1769
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = &ast.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = &ast.AlterTableValidateConstraint{
				Constraint: ast.Name(sqlDollar[3].str),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = &ast.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   ast.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = &ast.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   ast.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = &ast.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = &ast.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1818
		{

			sqlVAL.union.val = &ast.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1826
		{
			sqlVAL.union.val = ast.AuditModeReadWrite
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1827
		{
			sqlVAL.union.val = ast.AuditModeDisable
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1831
		{
			sqlVAL.union.val = ast.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = &ast.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = nil
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1863
		{
			sqlVAL.union.val = nil
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = ast.DropCascade
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1874
		{
			sqlVAL.union.val = ast.DropRestrict
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = ast.DropDefault
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = ast.ValidationSkip
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = ast.ValidationDefault
		}
	case 159:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1913
		{
			sqlVAL.union.val = &ast.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &ast.AlterTypeAddValue{
					NewVal:      sqlDollar[6].str,
					IfNotExists: false,
					Placement:   sqlDollar[7].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = &ast.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &ast.AlterTypeAddValue{
					NewVal:      sqlDollar[9].str,
					IfNotExists: true,
					Placement:   sqlDollar[10].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = &ast.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &ast.AlterTypeRenameValue{
					OldVal: sqlDollar[6].str,
					NewVal: sqlDollar[8].str,
				},
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.union.val = &ast.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &ast.AlterTypeRename{
					NewName: sqlDollar[6].str,
				},
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1954
		{
			sqlVAL.union.val = &ast.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &ast.AlterTypeSetSchema{
					Schema: sqlDollar[6].str,
				},
			}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1963
		{
			return unimplementedWithIssueDetail(sqllex, 48700, "ALTER TYPE OWNER TO")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1967
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1971
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &ast.AlterTypeAddValuePlacement{
				Before:      true,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = &ast.AlterTypeAddValuePlacement{
				Before:      false,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1992
		{
			sqlVAL.union.val = (*ast.AlterTypeAddValuePlacement)(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2036
		{
			backup := &ast.Backup{
				To:              sqlDollar[4].union.partitionedBackup(),
				IncrementalFrom: sqlDollar[6].union.exprs(),
				AsOf:            sqlDollar[5].union.asOfClause(),
				Options:         *sqlDollar[7].union.backupOptions(),
			}

			tl := sqlDollar[2].union.targetListPtr()
			if tl == nil {
				backup.DescriptorCoverage = ast.AllDescriptors
			} else {
				backup.DescriptorCoverage = ast.RequestedDescriptors
				backup.Targets = *tl
			}

			sqlVAL.union.val = backup
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2054
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = (*ast.TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2062
		{
			t := sqlDollar[1].union.targetList()
			sqlVAL.union.val = &t
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = sqlDollar[2].union.backupOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2074
		{
			sqlVAL.union.val = sqlDollar[4].union.backupOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2078
		{
			sqlVAL.union.val = &ast.BackupOptions{}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.backupOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			if err := sqlDollar[1].union.backupOptions().CombineWith(sqlDollar[3].union.backupOptions()); err != nil {
				return setErr(sqllex, err)
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			sqlVAL.union.val = &ast.BackupOptions{EncryptionPassphrase: sqlDollar[3].union.expr()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2102
		{
			sqlVAL.union.val = &ast.BackupOptions{CaptureRevisionHistory: true}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2106
		{
			sqlVAL.union.val = &ast.BackupOptions{Detached: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2188
		{
			sqlVAL.union.val = &ast.ScheduledBackup{
				ScheduleName:    sqlDollar[3].union.expr(),
				Recurrence:      sqlDollar[10].union.expr(),
				FullBackup:      sqlDollar[11].union.fullBackupClause(),
				To:              sqlDollar[8].union.partitionedBackup(),
				Targets:         sqlDollar[6].union.targetListPtr(),
				BackupOptions:   *(sqlDollar[9].union.backupOptions()),
				ScheduleOptions: sqlDollar[12].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE SCHEDULE FOR BACKUP")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = nil
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = ast.NewStrVal(sqlDollar[1].str)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2216
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2224
		{
			sqlVAL.union.val = nil
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2230
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = &ast.FullBackupClause{Recurrence: sqlDollar[3].union.expr()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = &ast.FullBackupClause{AlwaysFull: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = (*ast.FullBackupClause)(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2252
		{
			sqlVAL.union.val = sqlDollar[5].union.kvOptions()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2256
		{
			sqlVAL.union.val = sqlDollar[6].union.kvOptions()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2260
		{
			sqlVAL.union.val = nil
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2286
		{
			sqlVAL.union.val = &ast.Restore{DescriptorCoverage: ast.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2290
		{
			sqlVAL.union.val = &ast.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2293
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2297
		{
			sqlVAL.union.val = ast.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = ast.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2307
		{
			sqlVAL.union.val = []ast.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2317
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2354
		{

			sqlVAL.union.val = &ast.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: ast.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2359
		{
			sqlVAL.union.val = &ast.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: ast.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2363
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: ast.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2369
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: ast.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2374
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2379
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2384
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2389
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2393
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = &ast.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2416
		{
			sqlVAL.union.val = ast.NewStrVal(sqlDollar[1].str)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2420
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2438
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2442
		{
			sqlVAL.union.val = ast.Exprs(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2452
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str)}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2456
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str)}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2466
		{
			sqlVAL.union.val = []ast.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2480
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2484
		{
			sqlVAL.union.val = nil
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2490
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2505
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2517
		{
			sqlVAL.union.val = &ast.ControlJobs{
				Jobs: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: ast.CancelJob,
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2525
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			sqlVAL.union.val = &ast.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: ast.CancelJob}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2530
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &ast.CancelQueries{
				Queries: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = &ast.CancelQueries{
				Queries: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2557
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &ast.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &ast.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = &ast.CancelSessions{
				Sessions: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2585
		{
			sqlVAL.union.val = &ast.CancelSessions{
				Sessions: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = &ast.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = &ast.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2606
		{
			sqlVAL.union.val = &ast.CommentOnDatabase{Name: ast.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &ast.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2614
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*ast.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", ast.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &ast.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &ast.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2633
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2638
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "CREATE SCHEDULE FOR BACKUP")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2654
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "CREATE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2658
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2659
		{
			return unimplemented(sqllex, "create cast")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2660
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2662
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2663
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2664
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2665
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2666
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2667
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2668
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2669
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2670
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			return unimplemented(sqllex, "create operator")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2672
		{
			return unimplemented(sqllex, "create publication")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2673
		{
			return unimplemented(sqllex, "create rule")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2674
		{
			return unimplemented(sqllex, "create server")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2675
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2676
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2677
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2681
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2684
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2685
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2688
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2689
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2692
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2693
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2694
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2695
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2696
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2697
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2698
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2699
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2700
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2701
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2702
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2703
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2704
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2705
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2706
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2707
		{
			return unimplemented(sqllex, "drop server")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2709
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2710
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2714
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2715
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2720
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2721
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2722
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2723
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2733
		{
			sqlVAL.union.val = &ast.CreateStats{
				Name:        ast.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = ast.NameList(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2759
		{

			sqlVAL.union.val = &ast.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2768
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = &ast.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2781
		{
			sqlVAL.union.val = &ast.CreateStatsOptions{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2787
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2802
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &ast.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &ast.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = &ast.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2830
		{

			sqlVAL.union.val = &ast.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2840
		{
			sqlVAL.union.val = ast.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2844
		{
			sqlVAL.union.val = ast.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2850
		{
			sqlVAL.union.val = ast.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2861
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2865
		{

			sqlVAL.union.val = nil
		}
	case 364:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2879
		{
			sqlVAL.union.val = &ast.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     ast.NewWhere(ast.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2892
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2893
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2901
		{
			sqlVAL.union.val = &ast.Discard{Mode: ast.DiscardModeAll}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2904
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2905
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2906
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2907
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2908
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2918
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "DROP")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2923
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2924
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2935
		{
			sqlVAL.union.val = &ast.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2939
		{
			sqlVAL.union.val = &ast.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = &ast.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = &ast.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = &ast.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2969
		{
			sqlVAL.union.val = &ast.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2972
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &ast.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = &ast.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2997
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3005
		{
			sqlVAL.union.val = &ast.DropDatabase{
				Name:         ast.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3013
		{
			sqlVAL.union.val = &ast.DropDatabase{
				Name:         ast.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3027
		{
			sqlVAL.union.val = &ast.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3035
		{
			sqlVAL.union.val = &ast.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = []*ast.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = &ast.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = &ast.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3069
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3073
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = ast.TableNames{name}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3078
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{
			sqlVAL.union.val = &ast.Analyze{
				Table: sqlDollar[2].union.tblExpr(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3096
		{
			return helpWith(sqllex, "ANALYZE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = &ast.Analyze{
				Table: sqlDollar[2].union.tblExpr(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3103
		{
			return helpWith(sqllex, "ANALYZE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3129
		{
			var err error
			sqlVAL.union.val, err = ast.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3136
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3138
		{
			var err error
			sqlVAL.union.val, err = ast.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3146
		{
			var err error
			sqlVAL.union.val, err = ast.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3154
		{
			var err error
			sqlVAL.union.val, err = ast.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3162
		{
			var err error
			sqlVAL.union.val, err = ast.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3170
		{
			var err error
			sqlVAL.union.val, err = ast.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3181
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3185
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "DELETE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3190
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3191
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			return helpWith(sqllex, "INSERT")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3196
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3197
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "DELETE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "INSERT")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3216
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3221
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3225
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = &ast.Prepare{
				Name:      ast.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3247
		{

			sqlVAL.union.val = &ast.Prepare{
				Name:      ast.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: &ast.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3255
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = sqlDollar[2].union.typeReferences()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3263
		{
			sqlVAL.union.val = []ast.ResolvableTypeReference(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3273
		{
			sqlVAL.union.val = &ast.Execute{
				Name:   ast.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3280
		{

			sqlVAL.union.val = &ast.Execute{
				Name:        ast.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = ast.Exprs(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3306
		{
			sqlVAL.union.val = &ast.Deallocate{Name: ast.Name(sqlDollar[2].str)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3310
		{
			sqlVAL.union.val = &ast.Deallocate{Name: ast.Name(sqlDollar[3].str)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &ast.Deallocate{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = &ast.Deallocate{}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.union.val = &ast.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3345
		{
			sqlVAL.union.val = &ast.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3349
		{
			sqlVAL.union.val = &ast.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "GRANT")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3372
		{
			sqlVAL.union.val = &ast.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3376
		{
			sqlVAL.union.val = &ast.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = &ast.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3392
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3402
		{
			sqlVAL.union.val = ast.NameList{ast.Name(sqlDollar[1].str)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), ast.Name(sqlDollar[3].str))
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "RESET")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3429
		{
			sqlVAL.union.val = &ast.SetVar{Name: sqlDollar[2].str, Values: ast.Exprs{ast.DefaultVal{}}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &ast.SetVar{Name: sqlDollar[3].str, Values: ast.Exprs{ast.DefaultVal{}}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3436
		{
			return helpWith(sqllex, "RESET")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3444
		{
			sqlVAL.union.val = &ast.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: ast.DefaultVal{}}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = &ast.SetVar{Name: "database", Values: ast.Exprs{sqlDollar[2].union.expr()}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "USE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3466
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3468
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3474
		{
			return helpWith(sqllex, "USE")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3490
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &ast.Scrub{Typ: ast.ScrubDatabase, Database: ast.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &ast.Scrub{
				Typ:     ast.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3538
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = ast.ScrubOptions{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3548
		{
			sqlVAL.union.val = ast.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = &ast.ScrubOptionIndex{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = &ast.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &ast.ScrubOptionConstraint{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &ast.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &ast.ScrubOptionPhysical{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3585
		{
			sqlVAL.union.val = &ast.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3588
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3598
		{
			sqlVAL.union.val = &ast.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3614
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3623
		{
			sqlVAL.union.val = &ast.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &ast.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3643
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3645
		{
			sqlVAL.union.val = &ast.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3648
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3652
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &ast.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &ast.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{

			sqlVAL.union.val = &ast.SetVar{Name: "timezone", Values: ast.Exprs{sqlDollar[3].union.expr()}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3678
		{

			sqlVAL.union.val = &ast.SetVar{Name: "search_path", Values: ast.Exprs{sqlDollar[2].union.expr()}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3683
		{

			sqlVAL.union.val = &ast.SetSessionAuthorizationDefault{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3688
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3693
		{
			return unimplemented(sqllex, "set from current")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3694
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3702
		{

			sqlVAL.union.val = &ast.SetVar{Name: "client_encoding", Values: ast.Exprs{sqlDollar[2].union.expr()}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3707
		{

			sqlVAL.union.val = &ast.SetVar{Name: "client_encoding", Values: ast.Exprs{ast.DefaultVal{}}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3718
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3724
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3735
		{
			sqlVAL.union.val = ast.Expr(&ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}})
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3766
		{
			sqlVAL.union.val = ast.SerializableIsolation
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = ast.SerializableIsolation
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3774
		{
			sqlVAL.union.val = ast.SerializableIsolation
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3778
		{
			sqlVAL.union.val = ast.SerializableIsolation
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = ast.SerializableIsolation
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3788
		{
			sqlVAL.union.val = ast.Low
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = ast.Normal
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3796
		{
			sqlVAL.union.val = ast.High
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3807
		{
			sqlVAL.union.val = ast.NewStrVal(sqlDollar[1].str)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3811
		{
			sqlVAL.union.val = ast.NewStrVal(sqlDollar[1].str)
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3815
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3820
		{
			sqlVAL.union.val = ast.DefaultVal{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = ast.NewStrVal(sqlDollar[1].str)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3838
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3839
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3840
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3841
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3842
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3843
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3845
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3846
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3848
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3849
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3850
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3851
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3853
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3854
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3855
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3856
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3857
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3858
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3859
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3860
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3861
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3862
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3863
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3864
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3866
		{
			return helpWith(sqllex, "SHOW")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3867
		{
			return helpWith(sqllex, "SHOW LAST QUERY STATISTICS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3872
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3873
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3876
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3880
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3885
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3890
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3895
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3905
		{
			sqlVAL.union.val = &ast.ShowVar{Name: sqlDollar[2].str}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3906
		{
			sqlVAL.union.val = &ast.ShowVar{Name: sqlDollar[3].str}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3907
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3918
		{
			sqlVAL.str = "client_encoding"
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.str = "timezone"
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3922
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.union.val = &ast.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3940
		{

			sqlVAL.union.val = &ast.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3944
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3955
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &ast.ShowHistogram{HistogramID: id}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3963
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3971
		{
			sqlVAL.union.val = &ast.ShowBackup{
				Details: ast.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3979
		{
			sqlVAL.union.val = &ast.ShowBackup{
				Details:              ast.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3988
		{

			sqlVAL.union.val = &ast.ShowBackup{
				Details: ast.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3997
		{

			sqlVAL.union.val = &ast.ShowBackup{
				Details: ast.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4005
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4015
		{
			sqlVAL.union.val = &ast.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4019
		{
			sqlVAL.union.val = &ast.ShowClusterSettingList{All: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4022
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4024
		{
			sqlVAL.union.val = &ast.ShowClusterSettingList{All: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4027
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4029
		{
			sqlVAL.union.val = &ast.ShowClusterSettingList{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4033
		{
			sqlVAL.union.val = &ast.ShowClusterSettingList{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4036
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4044
		{
			sqlVAL.union.val = &ast.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4047
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = &ast.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = &ast.ShowPartitions{IsDB: true, Database: ast.Name(sqlDollar[5].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = &ast.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4067
		{
			sqlVAL.union.val = &ast.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4070
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4078
		{
			sqlVAL.union.val = &ast.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4081
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4094
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &ast.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &ast.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4102
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4110
		{
			sqlVAL.union.val = &ast.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4113
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = &ast.ShowDatabaseIndexes{Database: ast.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4119
		{
			sqlVAL.union.val = &ast.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4123
		{
			sqlVAL.union.val = &ast.ShowDatabaseIndexes{Database: ast.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4126
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = &ast.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4132
		{
			sqlVAL.union.val = &ast.ShowDatabaseIndexes{Database: ast.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4135
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4143
		{
			sqlVAL.union.val = &ast.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4146
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = &ast.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4151
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = &ast.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4162
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4164
		{
			sqlVAL.union.val = &ast.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4167
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = true
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4173
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = false
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4185
		{
			sqlVAL.union.val = &ast.ShowJobs{Automatic: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4189
		{
			sqlVAL.union.val = &ast.ShowJobs{Automatic: false}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4192
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4193
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4195
		{
			sqlVAL.union.val = &ast.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4199
		{
			sqlVAL.union.val = &ast.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4202
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.union.val = &ast.ShowJobs{
				Jobs: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4212
		{
			sqlVAL.union.val = &ast.ShowJobs{
				Jobs: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4220
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = &ast.ShowTraceForSession{TraceType: ast.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4232
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4234
		{
			sqlVAL.union.val = &ast.ShowTraceForSession{TraceType: ast.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4237
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4239
		{

			sqlVAL.union.val = &ast.ShowTraceForSession{TraceType: ast.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4243
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4246
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = &ast.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4258
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = &ast.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4263
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = &ast.ShowTables{ObjectNamePrefix: ast.ObjectNamePrefix{
				CatalogName:     ast.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      ast.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqlVAL.union.val = &ast.ShowTables{ObjectNamePrefix: ast.ObjectNamePrefix{

				SchemaName:     ast.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = &ast.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4294
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = false
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = &ast.ShowSchemas{Database: ast.Name(sqlDollar[4].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4309
		{
			sqlVAL.union.val = &ast.ShowSchemas{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4312
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4319
		{
			sqlVAL.union.val = &ast.ShowSequences{Database: ast.Name(sqlDollar[4].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = &ast.ShowSequences{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4326
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4333
		{

			sqlVAL.union.val = &ast.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4337
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4344
		{

			sqlVAL.union.val = &ast.ShowLastQueryStatistics{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4354
		{
			sqlVAL.union.val = &ast.ShowSavepointStatus{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4357
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4365
		{

			sqlVAL.union.val = &ast.ShowVar{Name: "transaction_isolation"}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4370
		{

			sqlVAL.union.val = &ast.ShowVar{Name: "transaction_priority"}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4375
		{

			sqlVAL.union.val = &ast.ShowTransactionStatus{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4379
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = &ast.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4391
		{

			sqlVAL.union.val = &ast.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4395
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = &ast.ShowUsers{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4411
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = &ast.ShowRoles{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4422
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4426
		{
			sqlVAL.union.val = &ast.ShowZoneConfig{ZoneSpecifier: ast.ZoneSpecifier{NamedZone: ast.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = &ast.ShowZoneConfig{ZoneSpecifier: ast.ZoneSpecifier{Database: ast.Name(sqlDollar[6].str)}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4434
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.ShowZoneConfig{ZoneSpecifier: ast.ZoneSpecifier{
				TableOrIndex: ast.TableIndexName{Table: name},
				Partition:    ast.Name(sqlDollar[7].str),
			}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4442
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.ShowZoneConfig{ZoneSpecifier: ast.ZoneSpecifier{
				TableOrIndex: ast.TableIndexName{Table: name},
				Partition:    ast.Name(sqlDollar[6].str),
			}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = &ast.ShowZoneConfig{ZoneSpecifier: ast.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    ast.Name(sqlDollar[7].str),
			}}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4457
		{
			sqlVAL.union.val = &ast.ShowZoneConfig{ZoneSpecifier: ast.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    ast.Name(sqlDollar[6].str),
			}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = &ast.ShowZoneConfig{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = &ast.ShowZoneConfig{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4479
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: ast.TableIndexName{Table: name},
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4487
		{
			sqlVAL.union.val = &ast.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4493
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4502
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.ShowRanges{TableOrIndex: ast.TableIndexName{Table: name}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4507
		{
			sqlVAL.union.val = &ast.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = &ast.ShowRanges{DatabaseName: ast.Name(sqlDollar[5].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4514
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4518
		{

			sqlVAL.union.val = &ast.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4525
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = (*ast.TargetList)(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.union.val = ast.TargetList{Tables: ast.TablePatterns{&ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}}}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4654
		{
			sqlVAL.union.val = ast.TargetList{Tables: ast.TablePatterns{&ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}}}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4658
		{

			sqlVAL.union.val = ast.TargetList{
				Tables:   ast.TablePatterns{&ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4697
		{
			sqlVAL.union.val = ast.TargetList{Tables: ast.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4701
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = ast.TargetList{Tables: append(ast.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = ast.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4710
		{
			tenID := uint64(sqlDollar[2].union.int64())
			if tenID == 0 {
				return setErr(sqllex, errors.New("invalid tenant ID"))
			}
			sqlVAL.union.val = ast.TargetList{Tenant: roachpb.MakeTenantID(tenID)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = ast.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = ast.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4738
		{
			sqlVAL.union.val = ast.NameList(nil)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4750
		{
			sqlVAL.union.val = &ast.ControlJobs{
				Jobs: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: ast.PauseJob,
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = &ast.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: ast.PauseJob}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4762
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = &ast.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4776
		{
			sqlVAL.union.val = &ast.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4782
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4821
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4836
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = nil
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4857
		{

			sqlVAL.union.val = nil
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4863
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4874
		{
			sqlVAL.union.val = ast.CreateTableOnCommitUnset
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4878
		{

			sqlVAL.union.val = ast.CreateTableOnCommitPreserveRows
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4883
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4888
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = ast.StorageParam{Key: ast.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.union.val = ast.StorageParam{Key: ast.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4905
		{
			sqlVAL.union.val = []ast.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4915
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4928
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4942
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4943
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4944
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = true
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4963
		{
			sqlVAL.union.val = true
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4964
		{
			sqlVAL.union.val = false
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = true
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = true
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4970
		{
			sqlVAL.union.val = true
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = true
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4972
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = ast.TableDefs(nil)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = ast.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4999
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5003
		{
			sqlVAL.union.val = &ast.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5016
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = []ast.LikeTableOption(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5027
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5028
		{
			sqlVAL.union.val = ast.LikeTableOption{Opt: ast.LikeTableOptConstraints}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = ast.LikeTableOption{Opt: ast.LikeTableOptDefaults}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5030
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.union.val = ast.LikeTableOption{Opt: ast.LikeTableOptGenerated}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5032
		{
			sqlVAL.union.val = ast.LikeTableOption{Opt: ast.LikeTableOptIndexes}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5033
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5034
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.union.val = ast.LikeTableOption{Opt: ast.LikeTableOptAll}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5040
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5049
		{
			sqlVAL.union.val = (*ast.InterleaveDef)(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5056
		{

			sqlVAL.union.val = ast.DropCascade
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5061
		{

			sqlVAL.union.val = ast.DropRestrict
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5066
		{
			sqlVAL.union.val = ast.DropDefault
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5079
		{
			sqlVAL.str = ""
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = (*ast.PartitionBy)(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:5092
		{
			sqlVAL.union.val = &ast.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:5099
		{
			sqlVAL.union.val = &ast.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = (*ast.PartitionBy)(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5112
		{
			sqlVAL.union.val = []ast.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = ast.ListPartition{
				Name:         ast.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.union.val = []ast.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = ast.RangePartition{
				Name:         ast.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5156
		{
			typ := sqlDollar[2].union.typeReference()
			tableDef, err := ast.NewColumnTableDef(ast.Name(sqlDollar[1].str), typ, ast.IsReferenceSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = []ast.NamedColumnQualification(nil)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Name: ast.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: ast.ColumnCollation(sqlDollar[2].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: &ast.ColumnFamilyConstraint{Family: ast.Name(sqlDollar[2].str)}}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: &ast.ColumnFamilyConstraint{Family: ast.Name(sqlDollar[3].str), Create: true}}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: &ast.ColumnFamilyConstraint{Create: true}}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5201
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: &ast.ColumnFamilyConstraint{Family: ast.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.union.val = ast.NotNullConstraint{}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5223
		{
			sqlVAL.union.val = ast.NullConstraint{}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5227
		{
			sqlVAL.union.val = ast.UniqueConstraint{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5231
		{
			sqlVAL.union.val = ast.PrimaryKeyConstraint{}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.union.val = ast.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5242
		{
			sqlVAL.union.val = &ast.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5246
		{
			sqlVAL.union.val = &ast.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5250
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.ColumnFKConstraint{
				Table:   name,
				Col:     ast.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5260
		{
			sqlVAL.union.val = &ast.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5264
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5275
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5276
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.union.val = &ast.IndexTableDef{
				Name:        ast.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Predicate:   sqlDollar[10].union.expr(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = &ast.UniqueConstraintTableDef{
				IndexTableDef: ast.IndexTableDef{
					Name:        ast.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
					Predicate:   sqlDollar[11].union.expr(),
				},
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5307
		{
			sqlVAL.union.val = &ast.IndexTableDef{
				Name:      ast.Name(sqlDollar[3].str),
				Columns:   sqlDollar[5].union.idxElems(),
				Inverted:  true,
				Predicate: sqlDollar[7].union.expr(),
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5318
		{
			sqlVAL.union.val = &ast.FamilyTableDef{
				Name:    ast.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ast.ConstraintTableDef).SetName(ast.Name(sqlDollar[2].str))
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = &ast.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.union.val = &ast.UniqueConstraintTableDef{
				IndexTableDef: ast.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
					Predicate:   sqlDollar[9].union.expr(),
				},
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = &ast.UniqueConstraintTableDef{
				IndexTableDef: ast.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5371
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5382
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5393
		{
			sqlVAL.union.val = ast.TableDefs(nil)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5399
		{
			tableDef, err := ast.NewColumnTableDef(ast.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef ast.TableDef = tableDef
			sqlVAL.union.val = ast.TableDefs{colToTableDef}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5409
		{
			tableDef, err := ast.NewColumnTableDef(ast.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef ast.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5424
		{
			var constraintToTableDef ast.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5437
		{
			sqlVAL.union.val = &ast.UniqueConstraintTableDef{
				IndexTableDef: ast.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5448
		{
			sqlVAL.union.val = ast.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5452
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = ast.IndexElem{Column: ast.Name(sqlDollar[1].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = []ast.NamedColumnQualification(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.union.val = ast.NamedColumnQualification{Qualification: &ast.ColumnFamilyConstraint{Family: ast.Name(sqlDollar[2].str)}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = ast.PrimaryKeyConstraint{}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5489
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5490
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5491
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5492
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5493
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5494
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5516
		{
			sqlVAL.union.val = ast.NameList(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &ast.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5528
		{
			sqlVAL.union.val = (*ast.ShardedIndexDef)(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5534
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = ast.NameList(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5558
		{
			sqlVAL.union.val = ast.MatchSimple
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = ast.MatchFull
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5566
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5570
		{
			sqlVAL.union.val = ast.MatchSimple
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5579
		{
			sqlVAL.union.val = ast.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5583
		{
			sqlVAL.union.val = ast.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5587
		{
			sqlVAL.union.val = ast.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.union.val = ast.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.union.val = ast.ReferenceActions{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5607
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = ast.NoAction
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = ast.Restrict
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5623
		{
			sqlVAL.union.val = ast.Cascade
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5627
		{
			sqlVAL.union.val = ast.SetNull
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5631
		{
			sqlVAL.union.val = ast.SetDefault
		}
	case 952:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5650
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5659
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5667
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5671
		{
			sqlVAL.union.val = []ast.SequenceOption(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5674
		{
			sqlVAL.union.val = []ast.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5678
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.typeReference().SQLString())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5679
		{
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptCycle}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptNoCycle}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5683
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*ast.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", ast.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5693
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptCache, IntVal: &x}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5696
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptIncrement, IntVal: &x}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5698
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5700
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptMinValue, IntVal: &x}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptMinValue}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5703
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptMaxValue, IntVal: &x}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5705
		{
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptMaxValue}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5706
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptStart, IntVal: &x}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5708
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5710
		{
			sqlVAL.union.val = ast.SequenceOption{Name: ast.SeqOptVirtual}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5718
		{
			sqlVAL.union.val = &ast.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5721
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: ast.DNull}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.union.val = &ast.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5743
		{
			sqlVAL.union.val = &ast.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5746
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5754
		{
			sqlVAL.union.val = &ast.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5758
		{
			sqlVAL.union.val = &ast.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5761
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = true
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5771
		{

			sqlVAL.union.val = true
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = false
		}
	case 987:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5786
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5800
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5812
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5823
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: nil}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: nil}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: nil}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(sqlDollar[1].str), Value: nil}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = []ast.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5861
		{
			sqlVAL.union.val = nil
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5867
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = ast.KVOption{Key: ast.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: ast.DNull}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5876
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5877
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = &ast.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    ast.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5893
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5895
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5897
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5899
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5901
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5903
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5911
		{
			sqlVAL.union.val = []string(nil)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5939
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateIndex{
				Name:         ast.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Predicate:    sqlDollar[16].union.expr(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5956
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateIndex{
				Name:         ast.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Predicate:    sqlDollar[19].union.expr(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5974
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateIndex{
				Name:         ast.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Predicate:    sqlDollar[15].union.expr(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5990
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.CreateIndex{
				Name:         ast.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Predicate:    sqlDollar[18].union.expr(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6006
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6010
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = false
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = true
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = false
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = true
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6045
		{
			sqlVAL.union.val = false
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = ast.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6064
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != ast.DefaultNullsOrder {
				if dir == ast.Descending && nullsOrder == ast.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != ast.Descending && nullsOrder == ast.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*ast.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = ast.IndexElem{Column: ast.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6087
		{
			sqlVAL.str = ""
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = ast.Ascending
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6095
		{
			sqlVAL.union.val = ast.Descending
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6099
		{
			sqlVAL.union.val = ast.DefaultDirection
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = &ast.RenameDatabase{Name: ast.Name(sqlDollar[3].str), NewName: ast.Name(sqlDollar[6].str)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6111
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &ast.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6117
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &ast.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6125
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &ast.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6131
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &ast.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6139
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &ast.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6145
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &ast.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.union.val = &ast.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: ast.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = &ast.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: ast.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6162
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6163
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6166
		{
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6167
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6175
		{
			sqlVAL.union.val = &ast.ReleaseSavepoint{Savepoint: ast.Name(sqlDollar[2].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6178
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6188
		{
			sqlVAL.union.val = &ast.ControlJobs{
				Jobs: &ast.Select{
					Select: &ast.ValuesClause{Rows: []ast.Exprs{ast.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: ast.ResumeJob,
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = &ast.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: ast.ResumeJob}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6200
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = &ast.Savepoint{Name: ast.Name(sqlDollar[2].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6211
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6215
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6216
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6217
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6233
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6236
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6241
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = &ast.CommitTransaction{}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6254
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6256
		{
			sqlVAL.union.val = &ast.CommitTransaction{}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6259
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = &ast.RollbackTransaction{}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6268
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6269
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6270
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6280
		{
			sqlVAL.union.val = &ast.RollbackTransaction{}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = &ast.RollbackToSavepoint{Savepoint: ast.Name(sqlDollar[4].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6287
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6290
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6291
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = &ast.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = &ast.BeginTransaction{}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6319
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6332
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6334
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6338
		{

			sqlVAL.union.val = ast.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = ast.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6347
		{
			sqlVAL.union.val = ast.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6351
		{
			sqlVAL.union.val = ast.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6363
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = ast.ReadOnly
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = ast.ReadWrite
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = &ast.CreateDatabase{
				Name:     ast.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:6393
		{
			sqlVAL.union.val = &ast.CreateDatabase{
				IfNotExists: true,
				Name:        ast.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6403
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6407
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.str = ""
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.str = ""
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6427
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6431
		{
			sqlVAL.str = ""
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6437
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6441
		{
			sqlVAL.str = ""
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6446
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6447
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*ast.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*ast.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*ast.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*ast.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*ast.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*ast.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*ast.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6473
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*ast.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*ast.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*ast.Insert).OnConflict = &ast.OnConflict{}
			sqlVAL.union.val.(*ast.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6491
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6495
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6504
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.AliasedTableExpr{Expr: &name, As: ast.AliasClause{Alias: ast.Name(sqlDollar[3].str)}}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = &ast.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = &ast.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = &ast.Insert{Rows: &ast.Select{}}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = ast.NameList{ast.Name(sqlDollar[1].str)}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), ast.Name(sqlDollar[3].str))
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6553
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = &ast.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: ast.NewWhere(ast.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = &ast.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6570
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6571
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = ast.NameList(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6579
		{
			ret := ast.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = ast.ReturningNothingClause
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = ast.AbsentReturningClause
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6605
		{
			sqlVAL.union.val = &ast.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     ast.NewWhere(ast.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6617
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6620
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6623
		{
			sqlVAL.union.val = ast.TableExprs{}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6629
		{
			sqlVAL.union.val = ast.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.union.val = &ast.UpdateExpr{Names: ast.NameList{ast.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6649
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = &ast.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = &ast.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = &ast.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = &ast.ParenSelect{Select: &ast.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = &ast.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.union.val = &ast.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.union.val = &ast.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = &ast.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6737
		{
			sqlVAL.union.val = &ast.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = &ast.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = &ast.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = &ast.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = (ast.LockingClause)(nil)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = (ast.LockingClause)(nil)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = ast.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6773
		{
			sqlVAL.union.val = &ast.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = ast.ForUpdate
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6783
		{
			sqlVAL.union.val = ast.ForNoKeyUpdate
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = ast.ForShare
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6785
		{
			sqlVAL.union.val = ast.ForKeyShare
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = ast.TableNames{}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = ast.LockWaitBlock
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.union.val = ast.LockWaitSkip
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = ast.LockWaitError
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6799
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6834
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6835
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6836
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = &ast.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   ast.NewWhere(ast.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  ast.NewWhere(ast.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6871
		{
			sqlVAL.union.val = &ast.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    ast.NewWhere(ast.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   ast.NewWhere(ast.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = &ast.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      ast.NewWhere(ast.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     ast.NewWhere(ast.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6897
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = &ast.UnionClause{
				Type:  ast.UnionOp,
				Left:  &ast.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &ast.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = &ast.UnionClause{
				Type:  ast.IntersectOp,
				Left:  &ast.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &ast.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = &ast.UnionClause{
				Type:  ast.ExceptOp,
				Left:  &ast.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &ast.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.union.val = &ast.SelectClause{
				Exprs:       ast.SelectExprs{ast.StarSelectExpr()},
				From:        ast.From{Tables: ast.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6941
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = &ast.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6957
		{

			sqlVAL.union.val = &ast.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &ast.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = []*ast.CTE{sqlDollar[1].union.cte()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = true
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = false
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = &ast.CTE{
				Name: ast.AliasClause{Alias: ast.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: ast.MaterializeClause{
					Set: false,
				},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = &ast.CTE{
				Name: ast.AliasClause{Alias: ast.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: ast.MaterializeClause{
					Materialize: sqlDollar[4].union.bool(),
					Set:         true,
				},
				Stmt: sqlDollar[6].union.stmt(),
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7010
		{
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7011
		{
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7015
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = nil
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7024
		{
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7025
		{
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = true
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = false
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = false
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = true
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = ast.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7054
		{
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7055
		{
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = ast.OrderBy(nil)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = ast.OrderBy(sqlDollar[3].union.orders())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = ast.OrderBy([]*ast.Order{sqlDollar[3].union.order()})
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqllex.Error("multiple ORDER BY clauses are not supported in this function")
			return 1
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = []*ast.Order{sqlDollar[1].union.order()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7096
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != ast.DefaultNullsOrder {
				if dir == ast.Descending && nullsOrder == ast.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != ast.Descending && nullsOrder == ast.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &ast.Order{
				OrderType:  ast.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7117
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Order{OrderType: ast.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7122
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.Order{
				OrderType: ast.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     ast.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = ast.NullsFirst
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7138
		{
			sqlVAL.union.val = ast.NullsLast
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7142
		{
			sqlVAL.union.val = ast.DefaultNullsOrder
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7151
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*ast.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*ast.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*ast.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = (*ast.Limit)(nil)
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = (*ast.Limit)(nil)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = &ast.Limit{LimitAll: true}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7184
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*ast.Limit)(nil)
			} else {
				sqlVAL.union.val = &ast.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = &ast.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = &ast.Limit{
				Count: ast.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &ast.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &ast.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7239
		{
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7240
		{
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7243
		{
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7244
		{
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = ast.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = ast.GroupBy(nil)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = ast.Expr(nil)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &ast.ValuesClause{Rows: []ast.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7297
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7299
		{
			valNode := sqlDollar[1].union.selectStmt().(*ast.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = ast.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7314
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = ast.From{}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = ast.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &ast.IndexFlags{Index: ast.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7336
		{

			sqlVAL.union.val = &ast.IndexFlags{IndexID: ast.IndexID(sqlDollar[4].union.int64())}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7341
		{

			sqlVAL.union.val = &ast.IndexFlags{Direction: ast.Ascending}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7346
		{

			sqlVAL.union.val = &ast.IndexFlags{Direction: ast.Descending}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &ast.IndexFlags{NoIndexJoin: true}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7357
		{

			sqlVAL.union.val = &ast.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &ast.IndexFlags{Index: ast.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &ast.IndexFlags{IndexID: ast.IndexID(sqlDollar[3].union.int64())}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7388
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = (*ast.IndexFlags)(nil)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7427
		{

			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7437
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       &ast.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       &ast.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &ast.AliasedTableExpr{Expr: &ast.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7483
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &ast.AliasedTableExpr{Expr: &ast.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7513
		{

			sqlVAL.union.val = &ast.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &ast.RowsFromExpr{Items: ast.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &ast.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7546
		{
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7551
		{
			sqlVAL.union.val = nil
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = []ast.ColumnID{}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = []ast.ColumnID{ast.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ast.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7567
		{
			sqlVAL.union.val = true
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7571
		{
			sqlVAL.union.val = false
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7591
		{
			sqlVAL.union.val = &ast.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7595
		{
			sqlVAL.union.val = &ast.JoinTableExpr{JoinType: ast.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = &ast.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &ast.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = &ast.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: ast.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &ast.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: ast.NaturalJoinCond{}}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = ast.AliasClause{Alias: ast.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = ast.AliasClause{Alias: ast.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = ast.AliasClause{}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = ast.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = ast.AsOfClause{}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.str = ast.AstFull
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.str = ast.AstLeft
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.str = ast.AstRight
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.str = ast.AstInner
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7665
		{
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7666
		{
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.str = ast.AstHash
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.str = ast.AstMerge
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.str = ast.AstLookup
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.str = ""
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &ast.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &ast.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7728
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = ast.TableNames{name}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7733
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7751
		{
			alias := sqlDollar[1].union.tblExpr().(*ast.AliasedTableExpr)
			alias.As = ast.AliasClause{Alias: ast.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7757
		{
			alias := sqlDollar[1].union.tblExpr().(*ast.AliasedTableExpr)
			alias.As = ast.AliasClause{Alias: ast.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7763
		{

			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7773
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &ast.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7783
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = ast.Expr(nil)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7802
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.typeReference()
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7815
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7823
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7824
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7842
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7844
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7852
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7865
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := ast.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7872
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := ast.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7881
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {

				var ok bool
				var err error
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						aIdx := sqllex.(*lexer).NewAnnotation()
						sqlVAL.union.val, err = ast.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
						if err != nil {
							return setErr(sqllex, err)
						}
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7921
		{
			id := sqlDollar[2].union.int32()
			sqlVAL.union.val = &ast.IDTypeReference{ID: uint32(id)}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7933
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7934
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = geopb.ShapeType_Point
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = geopb.ShapeType_LineString
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = geopb.ShapeType_Polygon
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = geopb.ShapeType_GeometryCollection
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = geopb.ShapeType_MultiPolygon
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = geopb.ShapeType_MultiLineString
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = geopb.ShapeType_MultiPoint
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = geopb.ShapeType_Geometry
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = types.Geography
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoShapeType(), 0)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoShapeType(), 0)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7958
		{
			val, err := sqlDollar[5].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoShapeType(), geopb.SRID(val))
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7966
		{
			val, err := sqlDollar[5].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoShapeType(), geopb.SRID(val))
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7992
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8000
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = nil
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = types.Int2
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = types.Int
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = types.Float4
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = types.Float
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8043
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8051
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8059
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = types.Bool
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8073
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = types.Float
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8092
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8098
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8120
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = types.String
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = true
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = false
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = types.Date
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8169
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8177
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8191
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8200
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8208
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8225
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = true
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = false
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = false
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = types.Interval
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8249
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8324
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8348
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8364
		{
			sqlVAL.union.val = nil
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8378
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = &ast.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: ast.CastShort}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = &ast.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: ast.AnnotateShort}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &ast.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("timezone"), Exprs: ast.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8438
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8443
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = &ast.UnaryExpr{Operator: ast.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = &ast.UnaryExpr{Operator: ast.UnarySqrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = &ast.UnaryExpr{Operator: ast.UnaryCbrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8491
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8539
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8551
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("json_remove_path"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("inet_contained_by_or_equals"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("inet_contains_or_equals"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = &ast.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = &ast.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = &ast.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &ast.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("like_escape"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("not_like_escape"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("ilike_escape"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("not_ilike_escape"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("similar_to_escape"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("not_similar_to_escape"), Exprs: ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8659
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8667
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.EQ, Left: sqlDollar[1].union.expr(), Right: ast.NewStrVal("NaN")}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NE, Left: sqlDollar[1].union.expr(), Right: ast.NewStrVal("NaN")}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = &ast.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = &ast.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = &ast.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = &ast.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8690
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: ast.MakeDBool(true)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: ast.MakeDBool(true)}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: ast.MakeDBool(false)}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: ast.MakeDBool(false)}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: ast.DNull}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: ast.DNull}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8716
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = &ast.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = &ast.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = &ast.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &ast.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = &ast.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = &ast.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8756
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ast.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ast.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = ast.DefaultVal{}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8778
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8790
		{
			sqlVAL.union.val = &ast.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: ast.CastShort}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = &ast.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: ast.AnnotateShort}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8806
		{
			sqlVAL.union.val = &ast.UnaryExpr{Operator: ast.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8810
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8822
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8830
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8838
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8842
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8846
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8850
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8858
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8870
		{
			sqlVAL.union.val = &ast.BinaryExpr{Operator: ast.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8874
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8878
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8882
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8886
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8890
		{
			sqlVAL.union.val = &ast.ComparisonExpr{Operator: ast.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = &ast.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = &ast.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8912
		{
			sqlVAL.union.val = &ast.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = &ast.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8956
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8960
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = ast.NewStrVal(sqlDollar[1].str)
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = ast.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8972
		{
			d, err := ast.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8977
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8987
		{
			sqlVAL.union.val = ast.MakeDBool(true)
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = ast.MakeDBool(false)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8995
		{
			sqlVAL.union.val = ast.DNull
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8999
		{
			sqlVAL.union.val = ast.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9003
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = ast.NewOrdinalReference(int(colNum - 1))
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9012
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9019
		{
			sqlVAL.union.val = &ast.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9023
		{
			sqlVAL.union.val = &ast.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9027
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &ast.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = &ast.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9038
		{
			sqlVAL.union.val = &ast.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9042
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.union.val = &ast.ArrayFlatten{Subquery: &ast.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.union.val = &ast.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9057
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9061
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9065
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy(), AggType: ast.GeneralAgg}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9068
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:9069
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9071
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: ast.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy(), AggType: ast.GeneralAgg}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9077
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: ast.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9081
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: ast.Exprs{ast.StarExpr()}}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9084
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9093
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &ast.CastExpr{Expr: ast.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: ast.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &ast.CastExpr{Expr: ast.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: ast.CastPrepend}
					default:
						sqlVAL.union.val = &ast.CastExpr{Expr: ast.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: ast.CastPrepend}
					}
				} else {

					var typ ast.ResolvableTypeReference
					var ok bool
					var err error
					var unimp int
					typ, ok, unimp = types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							aIdx := sqllex.(*lexer).NewAnnotation()
							typ, err = name.ToUnresolvedObjectName(aIdx)
							if err != nil {
								return setErr(sqllex, err)
							}
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &ast.CastExpr{Expr: ast.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: ast.CastPrepend}
				}
			} else {
				aIdx := sqllex.(*lexer).NewAnnotation()
				res, err := name.ToUnresolvedObjectName(aIdx)
				if err != nil {
					return setErr(sqllex, err)
				}
				sqlVAL.union.val = &ast.CastExpr{Expr: ast.NewStrVal(sqlDollar[2].str), Type: res, SyntaxMode: ast.CastPrepend}
			}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9146
		{
			sqlVAL.union.val = &ast.CastExpr{Expr: ast.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: ast.CastPrepend}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9159
		{
			f := sqlDollar[1].union.expr().(*ast.FuncExpr)
			w := sqlDollar[2].union.expr().(*ast.FuncExpr)
			if w.AggType != 0 {
				f.AggType = w.AggType
				f.OrderBy = w.OrderBy
			}
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9171
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9180
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9186
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("pg_collation_for"), Exprs: ast.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9190
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9194
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9200
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("current_database")}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9204
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9208
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9212
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9216
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9220
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9226
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("current_user")}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9230
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("current_user")}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9234
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("current_user")}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9238
		{
			sqlVAL.union.val = &ast.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: ast.CastExplicit}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9242
		{
			sqlVAL.union.val = &ast.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: ast.AnnotateExplicit}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:9246
		{
			sqlVAL.union.val = &ast.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:9250
		{
			sqlVAL.union.val = &ast.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9254
		{
			sqlVAL.union.val = &ast.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9258
		{
			sqlVAL.union.val = &ast.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9262
		{
			sqlVAL.union.val = &ast.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9266
		{
			sqlVAL.union.val = &ast.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9270
		{
			sqlVAL.union.val = &ast.CoalesceExpr{Name: "IFNULL", Exprs: ast.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9274
		{
			sqlVAL.union.val = &ast.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9281
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9284
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9286
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9289
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9291
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9295
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: ast.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9298
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9300
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9304
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: ast.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9307
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9309
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9313
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: ast.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9316
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9318
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9322
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: ast.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9325
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9327
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str)}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9330
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9332
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9335
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9337
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9340
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9342
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9345
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9347
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9351
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9354
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9355
		{
			return unimplemented(sqllex, "treat")
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9357
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9361
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9365
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9369
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9373
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9376
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9378
		{
			sqlVAL.union.val = &ast.FuncExpr{Func: ast.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9381
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9387
		{
			sqlVAL.union.val = &ast.FuncExpr{OrderBy: sqlDollar[4].union.orderBy(), AggType: ast.OrderedSetAgg}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9391
		{
			sqlVAL.union.val = &ast.FuncExpr{}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9397
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9401
		{
			sqlVAL.union.val = ast.Expr(nil)
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9408
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9412
		{
			sqlVAL.union.val = ast.Window(nil)
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9418
		{
			sqlVAL.union.val = ast.Window{sqlDollar[1].union.windowDef()}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9428
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = ast.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9436
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9440
		{
			sqlVAL.union.val = &ast.WindowDef{Name: ast.Name(sqlDollar[2].str)}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9444
		{
			sqlVAL.union.val = (*ast.WindowDef)(nil)
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9451
		{
			sqlVAL.union.val = &ast.WindowDef{
				RefName:    ast.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9471
		{
			sqlVAL.str = ""
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9477
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9481
		{
			sqlVAL.union.val = ast.Exprs(nil)
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9487
		{
			sqlVAL.union.val = &ast.WindowFrame{
				Mode:      ast.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9495
		{
			sqlVAL.union.val = &ast.WindowFrame{
				Mode:      ast.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9503
		{
			sqlVAL.union.val = &ast.WindowFrame{
				Mode:      ast.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9511
		{
			sqlVAL.union.val = (*ast.WindowFrame)(nil)
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9517
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == ast.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == ast.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = ast.WindowFrameBounds{StartBound: startBound}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9530
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == ast.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == ast.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == ast.CurrentRow && endBound.BoundType == ast.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == ast.OffsetFollowing && endBound.BoundType == ast.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == ast.OffsetFollowing && endBound.BoundType == ast.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = ast.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9558
		{
			sqlVAL.union.val = &ast.WindowFrameBound{BoundType: ast.UnboundedPreceding}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9562
		{
			sqlVAL.union.val = &ast.WindowFrameBound{BoundType: ast.UnboundedFollowing}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9566
		{
			sqlVAL.union.val = &ast.WindowFrameBound{BoundType: ast.CurrentRow}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9570
		{
			sqlVAL.union.val = &ast.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  ast.OffsetPreceding,
			}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9577
		{
			sqlVAL.union.val = &ast.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  ast.OffsetFollowing,
			}
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9586
		{
			sqlVAL.union.val = ast.ExcludeCurrentRow
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9590
		{
			sqlVAL.union.val = ast.ExcludeGroup
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9594
		{
			sqlVAL.union.val = ast.ExcludeTies
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9598
		{

			sqlVAL.union.val = ast.NoExclusion
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9603
		{
			sqlVAL.union.val = ast.NoExclusion
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9616
		{
			sqlVAL.union.val = &ast.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9620
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9627
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9639
		{
			sqlVAL.union.val = ast.Any
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9643
		{
			sqlVAL.union.val = ast.Some
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9647
		{
			sqlVAL.union.val = ast.All
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9652
		{
			sqlVAL.union.val = ast.Plus
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9653
		{
			sqlVAL.union.val = ast.Minus
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9654
		{
			sqlVAL.union.val = ast.Mult
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9655
		{
			sqlVAL.union.val = ast.Div
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9656
		{
			sqlVAL.union.val = ast.FloorDiv
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9657
		{
			sqlVAL.union.val = ast.Mod
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9658
		{
			sqlVAL.union.val = ast.Bitand
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9659
		{
			sqlVAL.union.val = ast.Bitor
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9660
		{
			sqlVAL.union.val = ast.Pow
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9661
		{
			sqlVAL.union.val = ast.Bitxor
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9662
		{
			sqlVAL.union.val = ast.LT
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9663
		{
			sqlVAL.union.val = ast.GT
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9664
		{
			sqlVAL.union.val = ast.EQ
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9665
		{
			sqlVAL.union.val = ast.LE
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9666
		{
			sqlVAL.union.val = ast.GE
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9667
		{
			sqlVAL.union.val = ast.NE
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9671
		{
			sqlVAL.union.val = ast.Like
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9672
		{
			sqlVAL.union.val = ast.NotLike
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9673
		{
			sqlVAL.union.val = ast.ILike
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9674
		{
			sqlVAL.union.val = ast.NotILike
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9697
		{
			sqlVAL.union.val = &ast.Tuple{}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9701
		{
			sqlVAL.union.val = &ast.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9707
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9711
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9715
		{
			sqlVAL.union.val = append(ast.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9726
		{
			sqlVAL.union.val = &ast.Tuple{}
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9730
		{
			sqlVAL.union.val = &ast.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9736
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9740
		{
			sqlVAL.union.val = append(ast.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9747
		{
			sqlVAL.union.val = ast.Exprs(nil)
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9753
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9763
		{
			sqlVAL.union.val = []ast.ResolvableTypeReference{sqlDollar[1].union.typeReference()}
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.typeReferences(), sqlDollar[3].union.typeReference())
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9773
		{
			sqlVAL.union.val = &ast.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9777
		{
			sqlVAL.union.val = &ast.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9783
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr()}
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9793
		{
			sqlVAL.union.val = ast.Exprs{ast.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9797
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9820
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9824
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9828
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9834
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9841
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9845
		{
			sqlVAL.union.val = ast.Exprs(nil)
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9862
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9866
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9870
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9874
		{
			sqlVAL.union.val = ast.Exprs{sqlDollar[1].union.expr(), ast.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9878
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9884
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9890
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9896
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9900
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9904
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9910
		{
			sqlVAL.union.val = &ast.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9922
		{
			sqlVAL.union.val = &ast.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9929
		{
			sqlVAL.union.val = []*ast.When{sqlDollar[1].union.when()}
		}
	case 1766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9939
		{
			sqlVAL.union.val = &ast.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9945
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9949
		{
			sqlVAL.union.val = ast.Expr(nil)
		}
	case 1771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9956
		{
			sqlVAL.union.val = ast.Expr(nil)
		}
	case 1772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9962
		{
			sqlVAL.union.val = &ast.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9966
		{
			sqlVAL.union.val = &ast.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9973
		{
			sqlVAL.union.val = ast.Expr(nil)
		}
	case 1776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9979
		{
			sqlVAL.union.val = ast.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9988
		{
		}
	case 1779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9989
		{
		}
	case 1780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9993
		{
			sqlVAL.union.val = ast.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10003
		{
			sqlVAL.union.val = ast.SelectExpr{Expr: sqlDollar[1].union.expr(), As: ast.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:10012
		{
			sqlVAL.union.val = ast.SelectExpr{Expr: sqlDollar[1].union.expr(), As: ast.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10016
		{
			sqlVAL.union.val = ast.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10020
		{
			sqlVAL.union.val = ast.StarSelectExpr()
		}
	case 1786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10028
		{
			sqlVAL.union.val = ast.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10038
		{
			sqlVAL.union.val = ast.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10061
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = ast.TableIndexName{
				Table: name,
				Index: ast.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10069
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := ast.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = ast.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10092
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10101
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10105
		{
			sqlVAL.union.val = &ast.UnresolvedName{Star: true, NumParts: 3, Parts: ast.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10109
		{
			sqlVAL.union.val = &ast.UnresolvedName{Star: true, NumParts: 2, Parts: ast.NameParts{"", sqlDollar[1].str}}
		}
	case 1797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10113
		{
			sqlVAL.union.val = &ast.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10119
		{
			sqlVAL.union.val = ast.NameList{ast.Name(sqlDollar[1].str)}
		}
	case 1799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), ast.Name(sqlDollar[3].str))
		}
	case 1804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:10138
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:10142
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:10154
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:10158
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10167
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10178
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10187
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10195
		{
			var err error
			var d ast.Datum
			if sqlDollar[3].union.val == nil {
				d, err = ast.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ast.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10207
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := ast.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10308
		{
			sqlVAL.union.val = &ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}}
		}
	case 1839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10315
		{
			sqlVAL.union.val = &ast.UnresolvedName{NumParts: 2, Parts: ast.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10319
		{
			sqlVAL.union.val = &ast.UnresolvedName{NumParts: 3, Parts: ast.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10323
		{
			sqlVAL.union.val = &ast.UnresolvedName{NumParts: 4, Parts: ast.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1843:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10337
		{
			sqlVAL.union.val = &ast.UnresolvedName{Star: true, NumParts: 4, Parts: ast.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10341
		{
			sqlVAL.union.val = &ast.UnresolvedName{Star: true, NumParts: 3, Parts: ast.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10345
		{
			sqlVAL.union.val = &ast.UnresolvedName{Star: true, NumParts: 2, Parts: ast.NameParts{"", sqlDollar[1].str}}
		}
	case 1846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10358
		{
			sqlVAL.union.val = &ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}}
		}
	case 1848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10367
		{
			sqlVAL.union.val = &ast.UnresolvedName{NumParts: 1, Parts: ast.NameParts{sqlDollar[1].str}}
		}
	case 1852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10385
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := ast.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10398
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := ast.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10405
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := ast.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10430
		{
			sqlVAL.str = ""
		}
	case 1863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10436
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10440
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
